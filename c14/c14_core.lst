     1                                          ;以下常量定义部分， 内核的大部分内容都应当固定
     2                                          core_code_seg_sel       equ 0x38        ;内核代码段选择子
     3                                          core_data_seg_sel       equ 0x30        ;内核数据段选择子
     4                                          sys_routine_seg_sel     equ 0x28        ;系统公共例程代码段选择子
     5                                          video_ram_seg_sel       equ 0x20        ;视频显示缓冲区的段选择子
     6                                          core_stack_seg_sel      equ 0x18        ;内核堆栈段选择子
     7                                          mem_0_4_gb_seg_sel      equ 0x08        ;整个0-4GB内存段选择子
     8                                  
     9                                  ;-------------------------------------------------------------------------------
    10                                          ;以下是系统核心的头部，用于加载核心程序
    11 00000000 [00000000]                      core_length     dd core_end             ;核心程序总长度#00
    12                                  
    13 00000004 [00000000]                      sys_routine_seg dd section.sys_routine.start
    14                                                                                  ;系统公用例程段位置#04
    15 00000008 [00000000]                      core_data_seg   dd section.core_data.start
    16                                                                                  ;核心数据段位置#08
    17 0000000C [00000000]                      core_code_seg   dd section.core_code.start
    18                                                                                  ;核心代码段位置#0c
    19                                  
    20 00000010 [98030000]                      core_entry      dd start                ;核心代码段入口点 #10
    21 00000014 3800                                            dw core_code_seg_sel
    22                                  
    23                                  
    24                                  
    25                                  ;===============================================================================
    26                                          [bits 32]
    27                                  ;===============================================================================
    28                                  SECTION sys_routine vstart=0                    ;系统公共例程代码段
    29                                  ;-------------------------------------------------------------------------------
    30                                          ;字符串显示例程
    31                                  put_string:                                     ;显示0终止的字符串并移动光标
    32                                                                                  ;输入： DS:EBX=串地址
    33 00000000 51                              push ecx
    34                                      .getc:
    35 00000001 8A0B                            mov cl, [ebx]
    36 00000003 08C9                            or  cl, cl
    37 00000005 7408                            jz .exit
    38 00000007 E805000000                      call put_char
    39 0000000C 43                              inc ebx
    40 0000000D EBF2                            jmp .getc
    41                                  
    42                                      .exit:
    43 0000000F 59                              pop ecx
    44 00000010 CB                              retf                                    ;段间返回
    45                                  
    46                                  ;-------------------------------------------------------------------------------
    47                                  put_char:                                       ;在当前光标处显示一个字符，并推进
    48                                                                                  ;光标。仅用于段内调用
    49                                                                                  ;输入：CL=字符的ASCII码
    50 00000011 60                              pushad
    51                                  
    52                                          ;以下取当前光标的位置
    53 00000012 66BAD403                        mov dx, 0x3d4
    54 00000016 B00E                            mov al, 0x0e
    55 00000018 EE                              out dx, al
    56 00000019 6642                            inc dx                                  ;0x3d5
    57 0000001B EC                              in  al, dx                              ;高字
    58 0000001C 88C4                            mov ah, al
    59                                  
    60 0000001E 664A                            dec dx                                  ;0x3d4
    61 00000020 B00F                            mov al, 0x0f
    62 00000022 EE                              out dx, al
    63 00000023 6642                            inc dx                                  ;0x3d5
    64 00000025 EC                              in  al, dx                              ;低字
    65 00000026 6689C3                          mov bx, ax                              ;BX=代表光标位置的16位数
    66                                  
    67 00000029 80F90D                          cmp cl, 0x0d                            ;回车符？
    68 0000002C 750E                            jnz .put_0a
    69 0000002E 6689D8                          mov ax, bx
    70 00000031 B350                            mov bl, 80
    71 00000033 F6F3                            div bl
    72 00000035 F6E3                            mul bl
    73 00000037 6689C3                          mov bx, ax
    74 0000003A EB60                            jmp .set_cursor
    75                                  
    76                                     .put_0a:
    77 0000003C 80F90A                          cmp cl, 0x0a                            ;换行符?
    78 0000003F 7506                            jnz .put_other
    79 00000041 6683C350                        add bx, 80
    80 00000045 EB15                            jmp .roll_screen
    81                                  
    82                                     .put_other:                                  ;正常显示字符
    83 00000047 06                              push es
    84 00000048 B820000000                      mov eax, video_ram_seg_sel              ;0xb8000段的选择子
    85 0000004D 8EC0                            mov es, eax
    86 0000004F 66D1E3                          shl bx, 1
    87 00000052 2667880F                        mov [es:bx], cl
    88 00000056 07                              pop es
    89                                  
    90                                          ;以下将光标位置推进一个字符
    91 00000057 66D1EB                          shr bx, 1
    92 0000005A 6643                            inc bx
    93                                  
    94                                     .roll_screen:
    95 0000005C 6681FBD007                      cmp bx, 2000                            ;光标超出屏幕？滚屏
    96 00000061 7C39                            jl .set_cursor
    97                                  
    98 00000063 1E                              push ds
    99 00000064 06                              push es
   100 00000065 B820000000                      mov eax, video_ram_seg_sel
   101 0000006A 8ED8                            mov ds, eax
   102 0000006C 8EC0                            mov es, eax
   103 0000006E FC                              cld
   104 0000006F BEA0000000                      mov esi, 0xa0
   105 00000074 BF00000000                      mov edi, 0x00
   106 00000079 B980070000                      mov ecx, 1920
   107 0000007E F3A5                            rep movsd
   108 00000080 66BB000F                        mov bx, 3840                            ;清除屏幕最底一行
   109 00000084 B950000000                      mov ecx, 80
   110                                     .cls:
   111 00000089 266667C7072007                  mov word[es:bx], 0x0720
   112 00000090 6683C302                        add bx, 2
   113 00000094 E2F3                            loop .cls
   114                                  
   115 00000096 07                              pop es
   116 00000097 1F                              pop ds
   117                                  
   118 00000098 66BB8007                        mov bx, 1920
   119                                  
   120                                     .set_cursor:
   121 0000009C 66BAD403                        mov dx, 0x3d4
   122 000000A0 B00E                            mov al, 0x0e
   123 000000A2 EE                              out dx, al
   124 000000A3 6642                            inc dx                                  ;0x3d5
   125 000000A5 88F8                            mov al, bh
   126 000000A7 EE                              out dx, al
   127 000000A8 664A                            dec dx                                  ;0x3d4
   128 000000AA B00F                            mov al, 0x0f
   129 000000AC EE                              out dx, al
   130 000000AD 6642                            inc dx                                  ;0x3d5
   131 000000AF 88D8                            mov al, bl
   132 000000B1 EE                              out dx, al
   133                                  
   134 000000B2 61                              popad
   135 000000B3 C3                              ret
   136                                  
   137                                  ;-------------------------------------------------------------------------------
   138                                  read_hard_disk_0:                               ;从硬盘读取一个逻辑扇区
   139                                                                                  ;EAX=逻辑扇区号
   140                                                                                  ;DS:EBX=目标缓冲区地址
   141                                                                                  ;返回：EBX=EBX+512
   142 000000B4 50                              push eax
   143 000000B5 51                              push ecx
   144 000000B6 52                              push edx
   145                                  
   146 000000B7 50                              push eax
   147                                  
   148 000000B8 66BAF201                        mov dx, 0x1f2
   149 000000BC B001                            mov al, 1
   150 000000BE EE                              out dx, al                              ;读取的扇区数
   151                                  
   152 000000BF 6642                            inc dx                                  ;0x1f3
   153 000000C1 58                              pop eax
   154 000000C2 EE                              out dx, al                              ;LBA地址的7~0
   155                                  
   156 000000C3 6642                            inc dx                                  ;0x1f4
   157 000000C5 B108                            mov cl, 8
   158 000000C7 D3E8                            shr eax, cl
   159 000000C9 EE                              out dx, al                              ;LBA地址的15~8
   160                                  
   161 000000CA 6642                            inc dx                                  ;0x1f5
   162 000000CC D3E8                            shr eax, cl
   163 000000CE EE                              out dx, al                              ;LBA地址的23~16
   164                                  
   165 000000CF 6642                            inc dx                                  ;0x1f6
   166 000000D1 D3E8                            shr eax, cl
   167 000000D3 0CE0                            or  al, 0xe0                            ;第一硬盘 LBA地址的27~24
   168 000000D5 EE                              out dx, al
   169                                  
   170 000000D6 6642                            inc dx                                  ;0x1f7
   171 000000D8 B020                            mov al, 0x20                            ;读命令
   172 000000DA EE                              out dx, al
   173                                  
   174                                      .waits:
   175 000000DB EC                              in  al, dx
   176 000000DC 2488                            and al, 0x88
   177 000000DE 3C08                            cmp al, 0x08
   178 000000E0 75F9                            jnz .waits                              ;不忙，且硬盘已准备好数据传输
   179                                  
   180 000000E2 B900010000                      mov ecx, 256                            ;总共要读取的字数
   181 000000E7 66BAF001                        mov dx, 0x1f0
   182                                  
   183                                      .readw:
   184 000000EB 66ED                            in  ax, dx
   185 000000ED 668903                          mov [ebx], ax
   186 000000F0 83C302                          add ebx, 2
   187 000000F3 E2F6                            loop .readw
   188                                  
   189 000000F5 5A                              pop edx
   190 000000F6 59                              pop ecx
   191 000000F7 58                              pop eax
   192                                  
   193 000000F8 CB                              retf                                    ;段间返回
   194                                  
   195                                  
   196                                  ;-------------------------------------------------------------------------------
   197                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助
   198                                  put_hex_dword:                                  ;在当前光标处以十六进制形式显示
   199                                                                                  ;一个双字并推进光标
   200                                                                                  ;输入：EDX=要转换并显示的数字
   201                                                                                  ;输出：无
   202 000000F9 60                               pushad
   203 000000FA 1E                               push ds
   204                                  
   205 000000FB 66B83000                         mov ax, core_data_seg_sel              ;切换到核心数据段
   206 000000FF 8ED8                             mov ds, ax
   207                                  
   208 00000101 BB[2B050000]                     mov ebx, bin_hex                       ;指向核心数据段内的转换表
   209 00000106 B908000000                       mov ecx, 8
   210                                    .xlt:
   211 0000010B C1C204                           rol edx, 4
   212 0000010E 89D0                             mov eax, edx
   213 00000110 83E00F                           and eax, 0x0000000f
   214 00000113 D7                               xlat
   215                                  
   216 00000114 51                               push ecx
   217 00000115 88C1                             mov cl, al
   218 00000117 E8F5FEFFFF                       call put_char
   219 0000011C 59                               pop ecx
   220                                  
   221 0000011D E2EC                             loop .xlt
   222                                  
   223 0000011F 1F                               pop ds
   224 00000120 61                               popad
   225 00000121 CB                               retf
   226                                  
   227                                  ;-------------------------------------------------------------------------------
   228                                  allocate_memory:                                ;分配内存
   229                                                                                  ;输入：ECX=希望分配的字节数
   230                                                                                  ;输出：ECX=起始线性地址
   231 00000122 1E                              push ds
   232 00000123 50                              push eax
   233 00000124 53                              push ebx
   234                                  
   235 00000125 B830000000                      mov eax, core_data_seg_sel
   236 0000012A 8ED8                            mov ds, eax
   237                                  
   238 0000012C A1[06000000]                    mov eax, [ram_alloc]
   239 00000131 01C8                            add eax, ecx                            ;下一次分配时的起始地址
   240                                  
   241                                          ;这里应当有检测可用内存数量的指令
   242                                  
   243 00000133 8B0D[06000000]                  mov ecx, [ram_alloc]                    ;返回分配的起始地址
   244                                  
   245 00000139 89C3                            mov ebx, eax
   246 0000013B 83E3FC                          and ebx, 0xfffffffc
   247 0000013E 83C304                          add ebx, 4                              ;强制对齐
   248 00000141 A903000000                      test eax, 0x00000003                    ;下次分配的起始地址最好是4字节对齐
   249 00000146 0F45C3                          cmovnz eax, ebx                         ;如果没有对齐，则强制对齐
   250 00000149 A3[06000000]                    mov [ram_alloc], eax                    ;下次从该地址分配内存
   251                                                                                  ;cmovcc指令可以避免控制转移
   252                                  
   253 0000014E 5B                              pop ebx
   254 0000014F 58                              pop eax
   255 00000150 1F                              pop ds
   256                                  
   257 00000151 CB                              retf
   258                                  
   259                                  ;-------------------------------------------------------------------------------
   260                                  set_up_gdt_descriptor:                          ;在GDT内安装一个新的描述符
   261                                                                                  ;输入：EDX:EAX=描述符
   262                                                                                  ;输出：CX=描述符的选择子
   263 00000152 50                              push eax
   264 00000153 53                              push ebx
   265 00000154 52                              push edx
   266                                  
   267 00000155 1E                              push ds
   268 00000156 06                              push es
   269                                  
   270 00000157 BB30000000                      mov ebx, core_data_seg_sel              ;切换到核心数据段
   271 0000015C 8EDB                            mov ds, ebx
   272                                  
   273 0000015E 0F0105[00000000]                sgdt [pgdt]                             ;以便开始处理GDT
   274                                  
   275 00000165 BB08000000                      mov ebx, mem_0_4_gb_seg_sel
   276 0000016A 8EC3                            mov es, ebx
   277                                  
   278 0000016C 0FB71D[00000000]                movzx ebx, word [pgdt]                  ;GDT界限
   279 00000173 6643                            inc bx                                  ;GDT总字节数，也是下一个描述符的偏移
   280 00000175 031D[02000000]                  add ebx, [pgdt+2]                       ;下一个描述符的线性地址
   281                                  
   282 0000017B 268903                          mov [es:ebx], eax
   283 0000017E 26895304                        mov [es:ebx+4], edx
   284                                  
   285 00000182 668305[00000000]08              add word [pgdt], 8                      ;增加一个描述符的大小
   286                                  
   287 0000018A 0F0115[00000000]                lgdt [pgdt]                             ;对GDT的更改生效
   288                                  
   289 00000191 66A1[00000000]                  mov ax, [pgdt]                          ;得到GDT的界限值
   290 00000197 6631D2                          xor dx, dx
   291 0000019A 66BB0800                        mov bx, 8
   292 0000019E 66F7F3                          div bx                                  ;除以8，去掉余数
   293 000001A1 6689C1                          mov cx, ax
   294 000001A4 66C1E103                        shl cx, 3                               ;将索引号移到正确的位置
   295                                  
   296 000001A8 07                              pop es
   297 000001A9 1F                              pop ds
   298                                  
   299 000001AA 5A                              pop edx
   300 000001AB 5B                              pop ebx
   301 000001AC 58                              pop eax
   302                                  
   303 000001AD CB                              retf
   304                                  ;-------------------------------------------------------------------------------
   305                                  make_seg_descriptor:                            ;构造存储器和系统的段描述符
   306                                                                                  ;输入：EAX=线性基地址
   307                                                                                  ;       EBX=段界限
   308                                                                                  ;       ECX=属性。各属性位都在原始位置，无关的位清零
   309                                                                                  ;返回：EDX:EAX=描述符
   310 000001AE 89C2                            mov edx, eax
   311 000001B0 C1E010                          shl eax, 16
   312 000001B3 6609D8                          or ax, bx                               ;描述符前32位（EAX）构造完毕
   313                                  
   314 000001B6 81E20000FFFF                    and edx, 0xffff0000                     ;清除基地址中无关的位
   315 000001BC C1C208                          rol edx, 8
   316 000001BF 0FCA                            bswap edx                               ;装配基址的31~24和23~16
   317                                  
   318 000001C1 6631DB                          xor bx, bx
   319 000001C4 09DA                            or  edx, ebx                            ;装配段界限的高4位
   320                                  
   321 000001C6 09CA                            or  edx, ecx                            ;装配属性
   322                                  
   323 000001C8 CB                              retf
   324                                  
   325                                  ;-------------------------------------------------------------------------------
   326                                  make_gate_descriptor:                           ;构造门的描述符(调用门等）
   327                                                                                  ;输入：EAX=门代码在段内偏移地址
   328                                                                                  ;       BX=门代码所在段的选择子
   329                                                                                  ;       CX=段类型及属性等（各属性
   330                                                                                  ;             位都在原始位置）
   331                                                                                  ;返回：EDX:EAX=完整的描述符
   332                                  
   333 000001C9 53                              push ebx
   334 000001CA 51                              push ecx
   335                                  
   336 000001CB 89C2                            mov edx, eax
   337 000001CD 81E20000FFFF                    and edx, 0xffff0000                     ;得到偏移地址高16位
   338 000001D3 6609CA                          or  dx, cx                              ;组装属性部分到EDX
   339                                  
   340 000001D6 25FFFF0000                      and eax, 0x0000ffff                     ;得到偏移地址低16位
   341 000001DB C1E310                          shl ebx, 16
   342 000001DE 09D8                            or  eax, ebx                            ;组装段选择子部分
   343                                  
   344 000001E0 59                              pop ecx
   345 000001E1 5B                              pop ebx
   346                                  
   347 000001E2 CB                              retf
   348                                  ;===============================================================================
   349                                  SECTION core_data vstart=0                      ;核心数据段
   350                                  ;-------------------------------------------------------------------------------
   351 00000000 0000                            pgdt                    dw  0           ;用于设置和修改GDT
   352 00000002 00000000                                                dd  0
   353                                  
   354 00000006 00001000                        ram_alloc               dd 0x00100000   ;下次分配内存时的起始地址
   355                                  
   356                                          ;符号地址检索表
   357                                          salt:
   358 0000000A 405072696E74537472-             salt_1                  db  '@PrintString'
   358 00000013 696E67             
   359 00000016 00<rep F4h>                                             times 256-($-salt_1) db 0
   360 0000010A [00000000]                                              dd  put_string
   361 0000010E 2800                                                    dw  sys_routine_seg_sel
   362                                  
   363 00000110 40526561644469736B-             salt_2                  db  '@ReadDiskData'
   363 00000119 44617461           
   364 0000011D 00<rep F3h>                                             times 256-($-salt_2) db 0
   365 00000210 [B4000000]                                              dd  read_hard_disk_0
   366 00000214 2800                                                    dw  sys_routine_seg_sel
   367                                  
   368 00000216 405072696E7444776F-             salt_3                  db  '@PrintDwordAsHexString'
   368 0000021F 726441734865785374-
   368 00000228 72696E67           
   369 0000022C 00<rep EAh>                                             times 256-($-salt_3) db 0
   370 00000316 [F9000000]                                              dd  put_hex_dword
   371 0000031A 2800                                                    dw  sys_routine_seg_sel
   372                                  
   373 0000031C 405465726D696E6174-             salt_4                  db  '@TerminateProgram'
   373 00000325 6550726F6772616D   
   374 0000032D 00<rep EFh>                                             times 256-($-salt_4) db 0
   375 0000041C [C8040000]                                              dd  return_point
   376 00000420 3800                                                    dw  core_code_seg_sel
   377                                  
   378                                          salt_item_len           equ $-salt_4
   379                                          salt_items              equ ($-salt)/salt_item_len
   380                                  
   381 00000422 2020496620796F7520-             message_1               db  '  If you seen this message,that means we '
   381 0000042B 7365656E2074686973-
   381 00000434 206D6573736167652C-
   381 0000043D 74686174206D65616E-
   381 00000446 7320776520         
   382 0000044B 617265206E6F772069-                                     db  'are now in protect mode,and the system '
   382 00000454 6E2070726F74656374-
   382 0000045D 206D6F64652C616E64-
   382 00000466 207468652073797374-
   382 0000046F 656D20             
   383 00000472 636F7265206973206C-                                     db  'core is loaded,and the video display '
   383 0000047B 6F616465642C616E64-
   383 00000484 207468652076696465-
   383 0000048D 6F20646973706C6179-
   383 00000496 20                 
   384 00000497 726F7574696E652077-                                     db  'routine works perfectly.',0x0d,0x0a,0
   384 000004A0 6F726B732070657266-
   384 000004A9 6563746C792E0D0A00 
   385                                  
   386                                  
   387 000004B2 202053797374656D20-             message_2               db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
   387 000004BB 776964652043414C4C-
   387 000004C4 2D47415445206D6F75-
   387 000004CD 6E7465642E0D0A00   
   388                                  
   389 000004D5 0D0A20204C6F616469-             message_3               db  0x0d,0x0a,'  Loading user program...',0
   389 000004DE 6E6720757365722070-
   389 000004E7 726F6772616D2E2E2E-
   389 000004F0 00                 
   390                                  
   391 000004F1 446F6E652E0D0A00                do_status               db  'Done.',0x0d,0x0a,0
   392                                  
   393 000004F9 0D0A0D0A0D0A                    message_6               db  0x0d,0x0a,0x0d,0x0a,0x0d,0x0a
   394 000004FF 202055736572207072-                                     db  '  User program terminated,control returned.',0
   394 00000508 6F6772616D20746572-
   394 00000511 6D696E617465642C63-
   394 0000051A 6F6E74726F6C207265-
   394 00000523 7475726E65642E00   
   395                                  
   396 0000052B 303132333435363738-             bin_hex                 db '0123456789ABCDEF'
   396 00000534 39414243444546     
   397                                                                                  ;put_hex_dword子过程用的查找表
   398 0000053B 00<rep 800h>                    core_buf  times 2048    db 0            ;内核用的缓冲区
   399                                  
   400 00000D3B 00000000                        esp_pointer             dd 0            ;内核用来临时保存自己的栈指针
   401                                  
   402 00000D3F 0D0A202000                      cpu_brnd0               db 0x0d, 0x0a, '  ', 0
   403 00000D44 00<rep 34h>                     cpu_brand times 52      db 0
   404 00000D78 0D0A0D0A00                      cpu_brnd1               db 0x0d, 0x0a, 0x0d, 0x0a, 0
   405                                  
   406                                          ;任务控制块链
   407 00000D7D 00000000                        tcb_chain               dd 0
   408                                  
   409                                  core_data_end:
   410                                  
   411                                  ;===============================================================================
   412                                  SECTION core_code vstart=0                      ;核心代码段
   413                                  ;-------------------------------------------------------------------------------
   414                                  fill_descriptor_in_ldt:                         ;在LDT内安装一个新的描述符
   415                                                                                  ;输入：EDX:EAX=描述符
   416                                                                                  ;           EBX=TCB基地址
   417                                                                                  ;输出：CX=描述符的选择子
   418 00000000 50                              push eax
   419 00000001 52                              push edx
   420 00000002 57                              push edi
   421 00000003 1E                              push ds
   422                                  
   423 00000004 B908000000                      mov ecx, mem_0_4_gb_seg_sel
   424 00000009 8ED9                            mov ds, ecx
   425                                  
   426 0000000B 8B7B0C                          mov edi, [ebx+0x0c]                     ;获取LDT基地址
   427                                  
   428 0000000E 31C9                            xor ecx, ecx
   429 00000010 668B4B0A                        mov cx, [ebx+0x0a]                      ;获取LDT界限
   430 00000014 6641                            inc cx                                  ;LDT的总字节数，即新描述符偏移地址
   431                                  
   432 00000016 89040F                          mov [edi+ecx+0x00], eax
   433 00000019 89540F04                        mov [edi+ecx+0x04], edx                 ;安装描述符
   434                                  
   435 0000001D 6683C108                        add cx, 8
   436 00000021 6649                            dec cx                                  ;得到新的LDT界限值
   437                                  
   438 00000023 66894B0A                        mov [ebx+0x0a], cx                      ;更新LDT界限值到TCB
   439                                  
   440 00000027 6689C8                          mov ax, cx
   441 0000002A 6631D2                          xor dx, dx
   442 0000002D 66B90800                        mov cx, 8
   443 00000031 66F7F1                          div cx
   444                                  
   445 00000034 6689C1                          mov cx, ax
   446 00000037 66C1E103                        shl cx, 3                               ;左移3位
   447 0000003B 6683C904                        or  cx, 0000_0000_0000_0100B            ;使TI位=1，指向LDT，最后使RPL=00
   448                                  
   449 0000003F 1F                              pop ds
   450 00000040 5F                              pop edi
   451 00000041 5A                              pop edx
   452 00000042 58                              pop eax
   453                                  
   454 00000043 C3                              ret
   455                                  ;-------------------------------------------------------------------------------
   456                                  load_relocate_program:                          ;加载并重定位用户程序
   457                                                                                  ;输入：PUSH 逻辑扇区号
   458                                                                                  ;      PUSH 任务控制块基地址
   459                                                                                  ;输出：无
   460 00000044 60                              pushad
   461                                  
   462 00000045 1E                              push ds
   463 00000046 06                              push es
   464                                  
   465 00000047 89E5                            mov ebp, esp                            ;为访问通过堆栈传递的参数做准备
   466                                  
   467 00000049 B908000000                      mov ecx, mem_0_4_gb_seg_sel
   468 0000004E 8EC1                            mov es, ecx
   469                                  
   470 00000050 8B752C                          mov esi, [ebp+11*4]                      ;从堆栈中取得TCB的基地址
   471                                  
   472                                          ;以下申请创建LDT所需要的内存
   473 00000053 B9A0000000                      mov ecx, 160                            ;允许安装20个LDT描述符
   474 00000058 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   475 0000005F 26894E0C                        mov [es:esi+0x0c], ecx                  ;登记LDT基地址到TCB中
   476 00000063 2666C7460AFFFF                  mov word [es:esi+0x0a], 0xffff          ;登记LDT初始的界限到TCB中
   477                                  
   478                                  
   479                                          ;以下开始加载用户程序
   480 0000006A B830000000                      mov eax, core_data_seg_sel
   481 0000006F 8ED8                            mov ds, eax                             ;切换DS到内核数据段
   482                                  
   483 00000071 8B4530                          mov eax, [ebp+12*4]                     ;从堆栈中取出用户程序起始扇区号
   484 00000074 BB[3B050000]                    mov ebx, core_buf
   485 00000079 9A[B4000000]2800                call sys_routine_seg_sel:read_hard_disk_0
   486                                  
   487                                          ;以下判断整个程序有多大
   488 00000080 A1[3B050000]                    mov eax, [core_buf]                     ;程序尺寸
   489 00000085 89C3                            mov ebx, eax
   490 00000087 81E300FEFFFF                    and ebx, 0xfffffe00                     ;使之512字节对齐（能被512整除的数，低9位都为0）
   491 0000008D 81C300020000                    add ebx, 512
   492 00000093 A9FF010000                      test eax, 0x000001ff                    ;程序的大小正好是512的倍数么？
   493 00000098 0F45C3                          cmovnz eax, ebx                         ;不是，使用凑整的结果
   494                                  
   495 0000009B 89C1                            mov ecx, eax                            ;实际需要申请的内存数量
   496 0000009D 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   497 000000A4 26894E06                        mov [es:esi+0x06], ecx                  ;登记程序加载基地址到TCB中
   498                                  
   499 000000A8 89CB                            mov ebx, ecx                            ;ebx -> 申请到的内存首地址
   500 000000AA 31D2                            xor edx, edx
   501 000000AC B900020000                      mov ecx, 512
   502 000000B1 F7F1                            div ecx
   503 000000B3 89C1                            mov ecx, eax                            ;总扇区数
   504                                  
   505 000000B5 B808000000                      mov eax, mem_0_4_gb_seg_sel             ;切换DS到0-4G的段
   506 000000BA 8ED8                            mov ds, eax
   507                                  
   508 000000BC 8B4530                          mov eax, [ebp+12*4]                     ;起始扇区段
   509                                      .b1:
   510 000000BF 9A[B4000000]2800                call sys_routine_seg_sel:read_hard_disk_0
   511 000000C6 40                              inc eax
   512 000000C7 E2F6                            loop .b1                                ;循环读，直到读完整个用户程序
   513                                  
   514 000000C9 268B7E06                        mov edi, [es:esi+0x06]                  ;获得程序加载的基地址
   515                                  
   516                                          ;建立程序头部段描述符
   517 000000CD 89F8                            mov eax, edi                            ;程序头部起始线性地址
   518 000000CF 8B5F04                          mov ebx, [edi+0x04]                     ;段长度
   519 000000D2 4B                              dec ebx                                 ;段界限
   520 000000D3 B900F24000                      mov ecx, 0x0040f200                     ;字节粒度的数据段描述符，特权级3
   521 000000D8 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   522                                  
   523                                          ;安装头部段描述符到LDT中
   524 000000DF 89F3                            mov ebx, esi                            ;TCB的基地址
   525 000000E1 E81AFFFFFF                      call fill_descriptor_in_ldt
   526                                  
   527 000000E6 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   528 000000EA 2666894E44                      mov [es:esi+0x44], cx                   ;登记程序头部段选择子到 TCB
   529 000000EF 66894F04                        mov [edi+0x04], cx                      ;和头部
   530                                  
   531                                  
   532                                          ;建立程序代码段描述符
   533 000000F3 89F8                            mov eax, edi
   534 000000F5 034714                          add eax, [edi+0x14]                     ;代码起始线性地址
   535 000000F8 8B5F18                          mov ebx, [edi+0x18]                     ;段长度
   536 000000FB 4B                              dec ebx                                 ;段界限
   537 000000FC B900F84000                      mov ecx, 0x0040f800                     ;字节粒度的代码段描述符,特权级3
   538 00000101 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   539 00000108 89F3                            mov ebx, esi                            ;TCB的基地址
   540 0000010A E8F1FEFFFF                      call fill_descriptor_in_ldt
   541 0000010F 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   542 00000113 66894F14                        mov [edi+0x14], cx                      ;登记代码段选择子到头部
   543                                  
   544                                          ;建立程序数据段描述符
   545 00000117 89F8                            mov eax, edi
   546 00000119 03471C                          add eax, [edi+0x1c]                     ;数据段起始线性地址
   547 0000011C 8B5F20                          mov ebx, [edi+0x20]                     ;段长度
   548 0000011F 4B                              dec ebx                                 ;段界限
   549 00000120 B900F24000                      mov ecx, 0x0040f200                     ;字节粒度的数据段描述符,特权级3
   550 00000125 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   551 0000012C 89F3                            mov ebx, esi                            ;TCB的基地址
   552 0000012E E8CDFEFFFF                      call fill_descriptor_in_ldt
   553 00000133 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   554 00000137 66894F1C                        mov [edi+0x1c], cx                      ;登记数据段选择子到头部
   555                                  
   556                                          ;建立程序堆栈段描述符
   557 0000013B 8B4F0C                          mov ecx, [edi+0x0c]                     ;4KB的倍率
   558 0000013E BBFFFF0F00                      mov ebx, 0x000fffff
   559 00000143 29CB                            sub ebx, ecx                            ;段界限
   560 00000145 B800100000                      mov eax, 4096
   561 0000014A F7670C                          mul dword [edi+0x0c]
   562 0000014D 89C1                            mov ecx, eax                            ;准备为堆栈分配内存
   563 0000014F 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   564 00000156 01C8                            add eax, ecx                            ;得到堆栈的高端物理地址
   565 00000158 B900F6C000                      mov ecx, 0x00c0f600                     ;4KB粒度的堆栈段描述符,特权级3
   566 0000015D 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   567 00000164 89F3                            mov ebx, esi                            ;TCB的基地址
   568 00000166 E895FEFFFF                      call fill_descriptor_in_ldt
   569 0000016B 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   570 0000016F 66894F08                        mov [edi+0x08], cx                      ;登记堆栈段选择子到头部
   571                                  
   572                                          ;重新定位SALT
   573 00000173 B808000000                      mov eax, mem_0_4_gb_seg_sel
   574 00000178 8EC0                            mov es, eax
   575                                  
   576 0000017A B830000000                      mov eax, core_data_seg_sel
   577 0000017F 8ED8                            mov ds, eax
   578                                  
   579 00000181 FC                              cld
   580                                  
   581 00000182 268B4F24                        mov ecx, [es:edi+0x24]                  ;U-SALT条目数（通过访问4GB段取得）
   582 00000186 83C728                          add edi, 0x28                           ;U-SALT在4GB段内的便宜
   583                                      .b2:
   584 00000189 51                              push ecx
   585 0000018A 57                              push edi
   586                                  
   587 0000018B B904000000                      mov ecx, salt_items
   588 00000190 BE[0A000000]                    mov esi, salt
   589                                      .b3:
   590 00000195 57                              push edi
   591 00000196 56                              push esi
   592 00000197 51                              push ecx
   593                                  
   594 00000198 B940000000                      mov ecx, 64                             ;检索表中，每条目的比较次数
   595 0000019D F3A7                            repe cmpsd                              ;每次比较4字节
   596 0000019F 7519                            jnz .b4
   597 000001A1 8B06                            mov eax, [esi]                          ;若匹配，esi恰好指向其后的地址数据
   598 000001A3 26898700FFFFFF                  mov [es:edi-256], eax                   ;将字符串改写成偏移地址
   599 000001AA 668B4604                        mov ax, [esi+4]
   600 000001AE 6683C803                        or  ax, 0000_0000_0000_0011B            ;以用户程序自己的特权级使用调用门
   601                                                                                  ;故RPL=3
   602 000001B2 2666898704FFFFFF                mov [es:edi-252], ax                    ;改写段选择子
   603                                      .b4:
   604                                  
   605 000001BA 59                              pop ecx
   606 000001BB 5E                              pop esi
   607 000001BC 81C606010000                    add esi, salt_item_len
   608 000001C2 5F                              pop edi
   609 000001C3 E2D0                            loop .b3
   610                                  
   611 000001C5 5F                              pop edi
   612 000001C6 81C700010000                    add edi, 256
   613 000001CC 59                              pop ecx
   614 000001CD E2BA                            loop .b2
   615                                  
   616 000001CF 8B752C                          mov esi, [ebp+11*4]                     ;从堆栈中取得TCB的基地址
   617                                  
   618                                          ;创建0特权级堆栈
   619 000001D2 B900100000                      mov ecx, 4096
   620 000001D7 89C8                            mov eax, ecx                            ;为生成堆栈高端地址做准备
   621 000001D9 26894E1A                        mov [es:esi+0x1a], ecx
   622 000001DD 26C16E1A0C                      shr dword [es:esi+0x1a], 12             ;登记0特权级堆栈尺寸到TCB(4096)
   623 000001E2 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   624 000001E9 01C8                            add eax, ecx                            ;堆栈必须使用高地址为基地址
   625 000001EB 2689461E                        mov [es:esi+0x1e], eax                  ;登记0特权级堆栈基地址到TCB
   626 000001EF BBFEFF0F00                      mov ebx, 0xffffe                        ;段长度（界限）
   627 000001F4 B90096C000                      mov ecx, 0x00c09600                     ;4KB粒度，读写，特权级0
   628 000001F9 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   629 00000200 89F3                            mov ebx, esi                            ;TCB的基地址
   630 00000202 E8F9FDFFFF                      call fill_descriptor_in_ldt
   631 00000207 6683C900                        or cx, 0000_0000_0000_0000              ;设置选择子的特权为0
   632 0000020B 2666894E22                      mov [es:esi+0x22], cx                   ;登记0特权级堆栈选择子到TCB
   633 00000210 26C7462400000000                mov dword [es:esi+0x24], 0              ;登记0特权级堆栈初始ESP到TCB
   634                                  
   635                                  
   636                                          ;创建1特权级堆栈
   637 00000218 B900100000                      mov ecx, 4096
   638 0000021D 89C8                            mov eax, ecx                            ;为生成堆栈高端地址做准备
   639 0000021F 26894E28                        mov [es:esi+0x28], ecx
   640 00000223 26C16E280C                      shr dword [es:esi+0x28], 12             ;登记1特权级堆栈尺寸到TCB(4096)
   641 00000228 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   642 0000022F 01C8                            add eax, ecx                            ;堆栈必须使用高地址为基地址
   643 00000231 2689462C                        mov [es:esi+0x2c], eax                  ;登记1特权级堆栈基地址到TCB
   644 00000235 BBFEFF0F00                      mov ebx, 0xffffe                        ;段长度（界限）
   645 0000023A B900B6C000                      mov ecx, 0x00c0b600                     ;4KB粒度，读写，特权级1
   646 0000023F 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   647 00000246 89F3                            mov ebx, esi                            ;TCB的基地址
   648 00000248 E8B3FDFFFF                      call fill_descriptor_in_ldt
   649 0000024D 6683C901                        or cx, 0000_0000_0000_0001              ;设置选择子的特权为1
   650 00000251 2666894E30                      mov [es:esi+0x30], cx                   ;登记1特权级堆栈选择子到TCB
   651 00000256 26C7463200000000                mov dword [es:esi+0x32], 0              ;登记1特权级堆栈初始ESP到TCB
   652                                  
   653                                  
   654                                          ;创建2特权级堆栈
   655 0000025E B900100000                      mov ecx, 4096
   656 00000263 89C8                            mov eax, ecx                            ;为生成堆栈高端地址做准备
   657 00000265 26894E36                        mov [es:esi+0x36], ecx
   658 00000269 26C16E360C                      shr dword [es:esi+0x36], 12             ;登记2特权级堆栈尺寸到TCB(4096)
   659 0000026E 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   660 00000275 01C8                            add eax, ecx                            ;堆栈必须使用高地址为基地址
   661 00000277 2689463A                        mov [es:esi+0x3a], eax                  ;登记2特权级堆栈基地址到TCB
   662 0000027B BBFEFF0F00                      mov ebx, 0xffffe                        ;段长度（界限）
   663 00000280 B900D6C000                      mov ecx, 0x00c0d600                     ;4KB粒度，读写，特权级2
   664 00000285 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   665 0000028C 89F3                            mov ebx, esi                            ;TCB的基地址
   666 0000028E E86DFDFFFF                      call fill_descriptor_in_ldt
   667 00000293 6683C90A                        or cx, 0000_0000_0000_0010              ;设置选择子的特权为2
   668 00000297 2666894E3E                      mov [es:esi+0x3e], cx                   ;登记2特权级堆栈选择子到TCB
   669 0000029C 26C7464000000000                mov dword [es:esi+0x40], 0              ;登记2特权级堆栈初始ESP到TCB
   670                                  
   671                                          ;在GDT中登记LDT描述符
   672 000002A4 268B460C                        mov eax, [es:esi+0x0c]                  ;LDT的起始线性地址
   673 000002A8 260FB75E0A                      movzx ebx, word [es:esi+0x0a]           ;LDT段界限
   674 000002AD B900824000                      mov ecx, 0x00408200                     ;LDT描述符，特权级0
   675 000002B2 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   676 000002B9 9A[52010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
   677 000002C0 2666894E10                      mov [es:esi+0x10], cx                   ;登记LDT选择子到TCB中
   678                                  
   679                                          ;创建用户程序的TSS
   680 000002C5 B968000000                      mov ecx, 104                            ;TSS的基本尺寸
   681 000002CA 2666894E12                      mov [es:esi+0x12], cx
   682 000002CF 2666FF4E12                      dec word [es:esi+0x12]                  ;登记TSS界限值到TCB
   683 000002D4 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   684 000002DB 26894E14                        mov [es:esi+0x14], ecx                  ;登记TSS基地址到TCB
   685                                  
   686                                          ;登记基本的TSS表格内容
   687 000002DF 2666C7010000                    mov word [es:ecx+0], 0                  ;反向链=0
   688                                  
   689 000002E5 268B5624                        mov edx, [es:esi+0x24]                  ;登记0特权级堆栈初始ESP
   690 000002E9 26895104                        mov [es:ecx+4], edx                     ;到TSS中
   691                                  
   692                                  
   693 000002ED 26668B5622                      mov dx, [es:esi+0x22]                   ;登记0特权级堆栈段选择子
   694 000002F2 2666895108                      mov [es:ecx+8], dx                      ;到TSS中
   695                                  
   696 000002F7 268B5632                        mov edx, [es:esi+0x32]                  ;登记1特权级堆栈初始ESP
   697 000002FB 2689510C                        mov [es:ecx+12], edx                    ;到TSS中
   698                                  
   699 000002FF 26668B5630                      mov dx, [es:esi+0x30]                   ;登记1特权级堆栈段选择子
   700 00000304 2666895110                      mov [es:ecx+16], dx                     ;到TSS中
   701                                  
   702 00000309 268B5640                        mov edx, [es:esi+0x40]                  ;登记2特权级堆栈初始ESP
   703 0000030D 26895114                        mov [es:ecx+20], edx                    ;到TSS中
   704                                  
   705 00000311 26668B563E                      mov dx, [es:esi+0x3e]                   ;登记2特权级堆栈段选择子
   706 00000316 2666895118                      mov [es:ecx+24], dx                     ;到TSS中
   707                                  
   708 0000031B 26668B5610                      mov dx, [es:esi+0x10]                   ;登记任务的LDT选择子
   709 00000320 2666895160                      mov [es:ecx+96], dx                     ;到TSS中
   710                                  
   711 00000325 26668B5612                      mov dx, [es:esi+0x12]                   ;登记任务的I/O位图偏移
   712 0000032A 2666895166                      mov [es:ecx+102], dx                    ;到TSS中
   713                                  
   714 0000032F 2666C741640000                  mov word [es:ecx+100], 0                ;T=0
   715                                  
   716                                          ;在GDT中登记TSS描述符
   717 00000336 268B4614                        mov eax, [es:esi+0x14]                  ;TSS的起始线性地址
   718 0000033A 260FB75E12                      movzx ebx, word [es:esi+0x12]           ;段长度(界限)
   719 0000033F B900894000                      mov ecx, 0x00408900                     ;TSS描述符，特权级0
   720 00000344 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   721 0000034B 9A[52010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
   722 00000352 2666894E18                      mov [es:esi+0x18], cx                   ;登记TSS选择子到TCB
   723                                  
   724 00000357 07                              pop es
   725 00000358 1F                              pop ds
   726                                  
   727 00000359 61                              popad
   728                                  
   729 0000035A C20800                          ret 8                                   ;丢弃调用本过程前压入的参数
   730                                  
   731                                  
   732                                  ;-------------------------------------------------------------------------------
   733                                  append_to_tcb_link:                             ;在TCB链上追加任务控制块
   734                                                                                  ;输入：ECX=TCB线性基地址
   735 0000035D 50                              push eax
   736 0000035E 52                              push edx
   737 0000035F 1E                              push ds
   738 00000360 06                              push es
   739                                  
   740 00000361 B830000000                      mov eax, core_data_seg_sel              ;令DS指向内核数据段
   741 00000366 8ED8                            mov ds, eax
   742 00000368 B808000000                      mov eax, mem_0_4_gb_seg_sel             ;令ES指向0..4GB段
   743 0000036D 8EC0                            mov es, eax
   744                                  
   745 0000036F 26C70100000000                  mov dword [es: ecx+0x00], 0             ;当前TCB指针域清零，以指示这是最后一个TCB
   746                                  
   747 00000376 A1[7D0D0000]                    mov eax, [tcb_chain]                    ;TCB表头指针
   748 0000037B 09C0                            or  eax, eax                            ;链表为空？
   749 0000037D 740E                            jz .notcb
   750                                  
   751                                      .searc:
   752 0000037F 89C2                            mov edx, eax
   753 00000381 268B02                          mov eax, [es:edx+0x00]
   754 00000384 09C0                            or  eax, eax
   755 00000386 75F7                            jnz .searc
   756                                  
   757 00000388 26890A                          mov [es:edx+0x00], ecx
   758 0000038B EB06                            jmp .retpc
   759                                  
   760                                      .notcb:
   761 0000038D 890D[7D0D0000]                  mov [tcb_chain], ecx                    ;若为空表，直接令表头指针指向TCB
   762                                  
   763                                      .retpc:
   764                                  
   765 00000393 07                              pop es
   766 00000394 1F                              pop ds
   767 00000395 5A                              pop edx
   768 00000396 58                              pop eax
   769                                  
   770 00000397 C3                              ret
   771                                  ;-------------------------------------------------------------------------------
   772                                  start:
   773 00000398 B930000000                      mov ecx, core_data_seg_sel              ;使ds指向核心数据段
   774 0000039D 8ED9                            mov ds, ecx
   775                                  
   776 0000039F BB[22040000]                    mov ebx, message_1
   777 000003A4 9A[00000000]2800                call sys_routine_seg_sel:put_string
   778                                  
   779                                          ;显示处理器品牌信息
   780 000003AB B802000080                      mov eax, 0x80000002
   781 000003B0 0FA2                            cpuid
   782 000003B2 A3[440D0000]                    mov [cpu_brand + 0x00], eax
   783 000003B7 891D[480D0000]                  mov [cpu_brand + 0x04], ebx
   784 000003BD 890D[4C0D0000]                  mov [cpu_brand + 0x08], ecx
   785 000003C3 8915[500D0000]                  mov [cpu_brand + 0x0c], edx
   786                                  
   787 000003C9 B803000080                      mov eax, 0x80000003
   788 000003CE 0FA2                            cpuid
   789 000003D0 A3[540D0000]                    mov [cpu_brand + 0x10], eax
   790 000003D5 891D[580D0000]                  mov [cpu_brand + 0x14], ebx
   791 000003DB 890D[5C0D0000]                  mov [cpu_brand + 0x18], ecx
   792 000003E1 8915[600D0000]                  mov [cpu_brand + 0x1c], edx
   793                                  
   794 000003E7 B804000080                      mov eax, 0x80000004
   795 000003EC 0FA2                            cpuid
   796 000003EE A3[640D0000]                    mov [cpu_brand + 0x20], eax
   797 000003F3 891D[680D0000]                  mov [cpu_brand + 0x24], ebx
   798 000003F9 890D[6C0D0000]                  mov [cpu_brand + 0x28], ecx
   799 000003FF 8915[700D0000]                  mov [cpu_brand + 0x2c], edx
   800                                  
   801 00000405 BB[3F0D0000]                    mov ebx, cpu_brnd0                      ;显示处理器品牌信息
   802 0000040A 9A[00000000]2800                call sys_routine_seg_sel:put_string
   803 00000411 BB[440D0000]                    mov ebx, cpu_brand
   804 00000416 9A[00000000]2800                call sys_routine_seg_sel:put_string
   805 0000041D BB[780D0000]                    mov ebx, cpu_brnd1
   806 00000422 9A[00000000]2800                call sys_routine_seg_sel:put_string
   807                                  
   808                                          ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
   809 00000429 BF[0A000000]                    mov edi, salt                           ;C-SALT表的起始位置
   810 0000042E B904000000                      mov ecx, salt_items                     ;C-SALT表的条目数量
   811                                      .b3:
   812 00000433 51                              push ecx
   813 00000434 8B8700010000                    mov eax, [edi+256]                      ;该条目入口点的32位偏移地址
   814 0000043A 668B9F04010000                  mov bx, [edi+260]                       ;该条目入口点的段选择子
   815 00000441 66B900EC                        mov cx, 1_11_0_1100_000_00000B          ;特权级3的调用门（3以上的特权级才
   816                                                                                  ;允许访问），0个参数（因为用寄存器
   817                                                                                  ;传递参数，而没用使用栈
   818 00000445 9A[C9010000]2800                call sys_routine_seg_sel:make_gate_descriptor
   819 0000044C 9A[52010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
   820 00000453 66898F04010000                  mov [edi+260], cx                       ;将返回的门描述符选择子回填
   821 0000045A 81C706010000                    add edi, salt_item_len                  ;指向下一个C-SALT条目
   822 00000460 59                              pop ecx
   823 00000461 E2D0                            loop .b3
   824                                  
   825                                          ;对门进行测试
   826 00000463 BB[B2040000]                    mov ebx, message_2
   827 00000468 FF1D[0A010000]                  call far [salt_1+256]                   ;通过门显示信息（偏移量忽略）
   828                                  
   829 0000046E BB[D5040000]                    mov ebx, message_3
   830 00000473 9A[00000000]2800                call sys_routine_seg_sel:put_string     ;在内核中调用例程不需要通过门
   831                                  
   832                                          ;创建任务控制块。这不是处理器的要求，而是我们自己为了方便而设立的
   833 0000047A B946000000                      mov ecx, 0x46                           ;TCB大小
   834 0000047F 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   835 00000486 E8D2FEFFFF                      call append_to_tcb_link                 ;将任务控制块追加到TCB链表
   836                                  
   837 0000048B 6A32                            push dword 50                           ;用户程序位于逻辑50扇区
   838 0000048D 51                              push ecx                                ;压入任务控制块起始线性地址
   839                                  
   840 0000048E E8B1FBFFFF                      call load_relocate_program
   841                                  
   842 00000493 BB[F1040000]                    mov ebx, do_status
   843 00000498 9A[00000000]2800                call sys_routine_seg_sel:put_string
   844                                  
   845 0000049F B808000000                      mov eax, mem_0_4_gb_seg_sel
   846 000004A4 8ED8                            mov ds, eax
   847                                  
   848 000004A6 0F005918                        ltr [ecx+0x18]                          ;加载任务状态段
   849 000004AA 0F005110                        lldt [ecx+0x10]                         ;加载LDT
   850                                  
   851 000004AE 8B4144                          mov eax, [ecx+0x44]
   852 000004B1 8ED8                            mov ds, eax                             ;切换到用户程序头部段
   853                                  
   854                                          ;一下假装是从调用门返回，模仿处理器压入返回参数
   855 000004B3 FF3508000000                    push dword [0x08]                       ;调用前的堆栈段选择子
   856 000004B9 6A00                            push dword 0                            ;调用前的ESP
   857                                  
   858 000004BB FF3514000000                    push dword [0x14]                       ;调用前的代码段选择子
   859 000004C1 FF3510000000                    push dword [0x10]                       ;调用前的ESP
   860                                  
   861 000004C7 CB                              retf
   862                                  
   863                                  return_point:                                   ;用户程序返回
   864 000004C8 B830000000                      mov eax, core_data_seg_sel
   865 000004CD 8ED8                            mov ds, eax
   866                                  
   867 000004CF BB[F9040000]                    mov ebx, message_6
   868 000004D4 9A[00000000]2800                call sys_routine_seg_sel:put_string
   869                                  
   870 000004DB F4                              hlt
   871                                  ;===============================================================================
   872                                  SECTION core_trail
   873                                  ;-------------------------------------------------------------------------------
   874                                  core_end:
