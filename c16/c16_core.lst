     1                                          ;以下常量定义部分， 内核的大部分内容都应当固定
     2                                          core_code_seg_sel       equ 0x38        ;内核代码段选择子
     3                                          core_data_seg_sel       equ 0x30        ;内核数据段选择子
     4                                          sys_routine_seg_sel     equ 0x28        ;系统公共例程代码段选择子
     5                                          video_ram_seg_sel       equ 0x20        ;视频显示缓冲区的段选择子
     6                                          core_stack_seg_sel      equ 0x18        ;内核堆栈段选择子
     7                                          mem_0_4_gb_seg_sel      equ 0x08        ;整个0-4GB内存段选择子
     8                                  
     9                                  ;-------------------------------------------------------------------------------
    10                                          ;以下是系统核心的头部，用于加载核心程序
    11 00000000 [00000000]                      core_length     dd core_end             ;核心程序总长度#00
    12                                  
    13 00000004 [00000000]                      sys_routine_seg dd section.sys_routine.start
    14                                                                                  ;系统公用例程段位置#04
    15 00000008 [00000000]                      core_data_seg   dd section.core_data.start
    16                                                                                  ;核心数据段位置#08
    17 0000000C [00000000]                      core_code_seg   dd section.core_code.start
    18                                                                                  ;核心代码段位置#0c
    19                                  
    20 00000010 [8F030000]                      core_entry      dd start                ;核心代码段入口点 #10
    21 00000014 3800                                            dw core_code_seg_sel
    22                                  
    23                                  
    24                                  
    25                                  ;===============================================================================
    26                                          [bits 32]
    27                                  ;===============================================================================
    28                                  SECTION sys_routine vstart=0                    ;系统公共例程代码段
    29                                  ;-------------------------------------------------------------------------------
    30                                          ;字符串显示例程
    31                                  put_string:                                     ;显示0终止的字符串并移动光标
    32                                                                                  ;输入： DS:EBX=串地址
    33 00000000 51                              push ecx
    34                                      .getc:
    35 00000001 8A0B                            mov cl, [ebx]
    36 00000003 08C9                            or  cl, cl
    37 00000005 7408                            jz .exit
    38 00000007 E805000000                      call put_char
    39 0000000C 43                              inc ebx
    40 0000000D EBF2                            jmp .getc
    41                                  
    42                                      .exit:
    43 0000000F 59                              pop ecx
    44 00000010 CB                              retf                                    ;段间返回
    45                                  
    46                                  ;-------------------------------------------------------------------------------
    47                                  put_char:                                       ;在当前光标处显示一个字符，并推进
    48                                                                                  ;光标。仅用于段内调用
    49                                                                                  ;输入：CL=字符的ASCII码
    50 00000011 60                              pushad
    51                                  
    52                                          ;以下取当前光标的位置
    53 00000012 66BAD403                        mov dx, 0x3d4
    54 00000016 B00E                            mov al, 0x0e
    55 00000018 EE                              out dx, al
    56 00000019 6642                            inc dx                                  ;0x3d5
    57 0000001B EC                              in  al, dx                              ;高字
    58 0000001C 88C4                            mov ah, al
    59                                  
    60 0000001E 664A                            dec dx                                  ;0x3d4
    61 00000020 B00F                            mov al, 0x0f
    62 00000022 EE                              out dx, al
    63 00000023 6642                            inc dx                                  ;0x3d5
    64 00000025 EC                              in  al, dx                              ;低字
    65 00000026 6689C3                          mov bx, ax                              ;BX=代表光标位置的16位数
    66                                  
    67 00000029 80F90D                          cmp cl, 0x0d                            ;回车符？
    68 0000002C 750E                            jnz .put_0a
    69 0000002E 6689D8                          mov ax, bx
    70 00000031 B350                            mov bl, 80
    71 00000033 F6F3                            div bl
    72 00000035 F6E3                            mul bl
    73 00000037 6689C3                          mov bx, ax
    74 0000003A EB60                            jmp .set_cursor
    75                                  
    76                                     .put_0a:
    77 0000003C 80F90A                          cmp cl, 0x0a                            ;换行符?
    78 0000003F 7506                            jnz .put_other
    79 00000041 6683C350                        add bx, 80
    80 00000045 EB15                            jmp .roll_screen
    81                                  
    82                                     .put_other:                                  ;正常显示字符
    83 00000047 06                              push es
    84 00000048 B820000000                      mov eax, video_ram_seg_sel              ;0xb8000段的选择子
    85 0000004D 8EC0                            mov es, eax
    86 0000004F 66D1E3                          shl bx, 1
    87 00000052 2667880F                        mov [es:bx], cl
    88 00000056 07                              pop es
    89                                  
    90                                          ;以下将光标位置推进一个字符
    91 00000057 66D1EB                          shr bx, 1
    92 0000005A 6643                            inc bx
    93                                  
    94                                     .roll_screen:
    95 0000005C 6681FBD007                      cmp bx, 2000                            ;光标超出屏幕？滚屏
    96 00000061 7C39                            jl .set_cursor
    97                                  
    98 00000063 1E                              push ds
    99 00000064 06                              push es
   100 00000065 B820000000                      mov eax, video_ram_seg_sel
   101 0000006A 8ED8                            mov ds, eax
   102 0000006C 8EC0                            mov es, eax
   103 0000006E FC                              cld
   104 0000006F BEA0000000                      mov esi, 0xa0
   105 00000074 BF00000000                      mov edi, 0x00
   106 00000079 B980070000                      mov ecx, 1920
   107 0000007E F3A5                            rep movsd
   108 00000080 66BB000F                        mov bx, 3840                            ;清除屏幕最底一行
   109 00000084 B950000000                      mov ecx, 80
   110                                     .cls:
   111 00000089 266667C7072007                  mov word[es:bx], 0x0720
   112 00000090 6683C302                        add bx, 2
   113 00000094 E2F3                            loop .cls
   114                                  
   115 00000096 07                              pop es
   116 00000097 1F                              pop ds
   117                                  
   118 00000098 66BB8007                        mov bx, 1920
   119                                  
   120                                     .set_cursor:
   121 0000009C 66BAD403                        mov dx, 0x3d4
   122 000000A0 B00E                            mov al, 0x0e
   123 000000A2 EE                              out dx, al
   124 000000A3 6642                            inc dx                                  ;0x3d5
   125 000000A5 88F8                            mov al, bh
   126 000000A7 EE                              out dx, al
   127 000000A8 664A                            dec dx                                  ;0x3d4
   128 000000AA B00F                            mov al, 0x0f
   129 000000AC EE                              out dx, al
   130 000000AD 6642                            inc dx                                  ;0x3d5
   131 000000AF 88D8                            mov al, bl
   132 000000B1 EE                              out dx, al
   133                                  
   134 000000B2 61                              popad
   135 000000B3 C3                              ret
   136                                  
   137                                  ;-------------------------------------------------------------------------------
   138                                  read_hard_disk_0:                               ;从硬盘读取一个逻辑扇区
   139                                                                                  ;EAX=逻辑扇区号
   140                                                                                  ;DS:EBX=目标缓冲区地址
   141                                                                                  ;返回：EBX=EBX+512
   142 000000B4 50                              push eax
   143 000000B5 51                              push ecx
   144 000000B6 52                              push edx
   145                                  
   146 000000B7 50                              push eax
   147                                  
   148 000000B8 66BAF201                        mov dx, 0x1f2
   149 000000BC B001                            mov al, 1
   150 000000BE EE                              out dx, al                              ;读取的扇区数
   151                                  
   152 000000BF 6642                            inc dx                                  ;0x1f3
   153 000000C1 58                              pop eax
   154 000000C2 EE                              out dx, al                              ;LBA地址的7~0
   155                                  
   156 000000C3 6642                            inc dx                                  ;0x1f4
   157 000000C5 B108                            mov cl, 8
   158 000000C7 D3E8                            shr eax, cl
   159 000000C9 EE                              out dx, al                              ;LBA地址的15~8
   160                                  
   161 000000CA 6642                            inc dx                                  ;0x1f5
   162 000000CC D3E8                            shr eax, cl
   163 000000CE EE                              out dx, al                              ;LBA地址的23~16
   164                                  
   165 000000CF 6642                            inc dx                                  ;0x1f6
   166 000000D1 D3E8                            shr eax, cl
   167 000000D3 0CE0                            or  al, 0xe0                            ;第一硬盘 LBA地址的27~24
   168 000000D5 EE                              out dx, al
   169                                  
   170 000000D6 6642                            inc dx                                  ;0x1f7
   171 000000D8 B020                            mov al, 0x20                            ;读命令
   172 000000DA EE                              out dx, al
   173                                  
   174                                      .waits:
   175 000000DB EC                              in  al, dx
   176 000000DC 2488                            and al, 0x88
   177 000000DE 3C08                            cmp al, 0x08
   178 000000E0 75F9                            jnz .waits                              ;不忙，且硬盘已准备好数据传输
   179                                  
   180 000000E2 B900010000                      mov ecx, 256                            ;总共要读取的字数
   181 000000E7 66BAF001                        mov dx, 0x1f0
   182                                  
   183                                      .readw:
   184 000000EB 66ED                            in  ax, dx
   185 000000ED 668903                          mov [ebx], ax
   186 000000F0 83C302                          add ebx, 2
   187 000000F3 E2F6                            loop .readw
   188                                  
   189 000000F5 5A                              pop edx
   190 000000F6 59                              pop ecx
   191 000000F7 58                              pop eax
   192                                  
   193 000000F8 CB                              retf                                    ;段间返回
   194                                  
   195                                  
   196                                  ;-------------------------------------------------------------------------------
   197                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助
   198                                  put_hex_dword:                                  ;在当前光标处以十六进制形式显示
   199                                                                                  ;一个双字并推进光标
   200                                                                                  ;输入：EDX=要转换并显示的数字
   201                                                                                  ;输出：无
   202 000000F9 60                               pushad
   203 000000FA 1E                               push ds
   204                                  
   205 000000FB 66B83000                         mov ax, core_data_seg_sel              ;切换到核心数据段
   206 000000FF 8ED8                             mov ds, ax
   207                                  
   208 00000101 BB[3C050000]                     mov ebx, bin_hex                       ;指向核心数据段内的转换表
   209 00000106 B908000000                       mov ecx, 8
   210                                    .xlt:
   211 0000010B C1C204                           rol edx, 4
   212 0000010E 89D0                             mov eax, edx
   213 00000110 83E00F                           and eax, 0x0000000f
   214 00000113 D7                               xlat
   215                                  
   216 00000114 51                               push ecx
   217 00000115 88C1                             mov cl, al
   218 00000117 E8F5FEFFFF                       call put_char
   219 0000011C 59                               pop ecx
   220                                  
   221 0000011D E2EC                             loop .xlt
   222                                  
   223 0000011F 1F                               pop ds
   224 00000120 61                               popad
   225 00000121 CB                               retf
   226                                  
   227                                  ;-------------------------------------------------------------------------------
   228                                  set_up_gdt_descriptor:                          ;在GDT内安装一个新的描述符
   229                                                                                  ;输入：EDX:EAX=描述符
   230                                                                                  ;输出：CX=描述符的选择子
   231 00000122 50                              push eax
   232 00000123 53                              push ebx
   233 00000124 52                              push edx
   234                                  
   235 00000125 1E                              push ds
   236 00000126 06                              push es
   237                                  
   238 00000127 BB30000000                      mov ebx, core_data_seg_sel              ;切换到核心数据段
   239 0000012C 8EDB                            mov ds, ebx
   240                                  
   241 0000012E 0F0105[00000000]                sgdt [pgdt]                             ;以便开始处理GDT
   242                                  
   243 00000135 BB08000000                      mov ebx, mem_0_4_gb_seg_sel
   244 0000013A 8EC3                            mov es, ebx
   245                                  
   246 0000013C 0FB71D[00000000]                movzx ebx, word [pgdt]                  ;GDT界限
   247 00000143 6643                            inc bx                                  ;GDT总字节数，也是下一个描述符的偏移
   248 00000145 031D[02000000]                  add ebx, [pgdt+2]                       ;下一个描述符的线性地址
   249                                  
   250 0000014B 268903                          mov [es:ebx], eax
   251 0000014E 26895304                        mov [es:ebx+4], edx
   252                                  
   253 00000152 668305[00000000]08              add word [pgdt], 8                      ;增加一个描述符的大小
   254                                  
   255 0000015A 0F0115[00000000]                lgdt [pgdt]                             ;对GDT的更改生效
   256                                  
   257 00000161 66A1[00000000]                  mov ax, [pgdt]                          ;得到GDT的界限值
   258 00000167 6631D2                          xor dx, dx
   259 0000016A 66BB0800                        mov bx, 8
   260 0000016E 66F7F3                          div bx                                  ;除以8，去掉余数
   261 00000171 6689C1                          mov cx, ax
   262 00000174 66C1E103                        shl cx, 3                               ;将索引号移到正确的位置
   263                                  
   264 00000178 07                              pop es
   265 00000179 1F                              pop ds
   266                                  
   267 0000017A 5A                              pop edx
   268 0000017B 5B                              pop ebx
   269 0000017C 58                              pop eax
   270                                  
   271 0000017D CB                              retf
   272                                  ;-------------------------------------------------------------------------------
   273                                  make_seg_descriptor:                            ;构造存储器和系统的段描述符
   274                                                                                  ;输入：EAX=线性基地址
   275                                                                                  ;       EBX=段界限
   276                                                                                  ;       ECX=属性。各属性位都在原始位置，无关的位清零
   277                                                                                  ;返回：EDX:EAX=描述符
   278 0000017E 89C2                            mov edx, eax
   279 00000180 C1E010                          shl eax, 16
   280 00000183 6609D8                          or ax, bx                               ;描述符前32位（EAX）构造完毕
   281                                  
   282 00000186 81E20000FFFF                    and edx, 0xffff0000                     ;清除基地址中无关的位
   283 0000018C C1C208                          rol edx, 8
   284 0000018F 0FCA                            bswap edx                               ;装配基址的31~24和23~16
   285                                  
   286 00000191 6631DB                          xor bx, bx
   287 00000194 09DA                            or  edx, ebx                            ;装配段界限的高4位
   288                                  
   289 00000196 09CA                            or  edx, ecx                            ;装配属性
   290                                  
   291 00000198 CB                              retf
   292                                  
   293                                  ;-------------------------------------------------------------------------------
   294                                  make_gate_descriptor:                           ;构造门的描述符(调用门等）
   295                                                                                  ;输入：EAX=门代码在段内偏移地址
   296                                                                                  ;       BX=门代码所在段的选择子
   297                                                                                  ;       CX=段类型及属性等（各属性
   298                                                                                  ;             位都在原始位置）
   299                                                                                  ;返回：EDX:EAX=完整的描述符
   300                                  
   301 00000199 53                              push ebx
   302 0000019A 51                              push ecx
   303                                  
   304 0000019B 89C2                            mov edx, eax
   305 0000019D 81E20000FFFF                    and edx, 0xffff0000                     ;得到偏移地址高16位
   306 000001A3 6609CA                          or  dx, cx                              ;组装属性部分到EDX
   307                                  
   308 000001A6 25FFFF0000                      and eax, 0x0000ffff                     ;得到偏移地址低16位
   309 000001AB C1E310                          shl ebx, 16
   310 000001AE 09D8                            or  eax, ebx                            ;组装段选择子部分
   311                                  
   312 000001B0 59                              pop ecx
   313 000001B1 5B                              pop ebx
   314                                  
   315 000001B2 CB                              retf
   316                                  
   317                                  ;-------------------------------------------------------------------------------
   318                                  allocate_a_4k_page:                             ;分配一个4KB的页
   319                                                                                  ;输入：无
   320                                                                                  ;输出：EAX=页的物理地址
   321 000001B3 53                              push ebx
   322 000001B4 51                              push ecx
   323 000001B5 52                              push edx
   324 000001B6 1E                              push ds
   325                                  
   326 000001B7 B830000000                      mov eax, core_data_seg_sel
   327 000001BC 8ED8                            mov ds, eax
   328                                  
   329 000001BE 31C0                            xor eax, eax
   330                                      .b1:
   331 000001C0 0FAB05[06000000]                bts [page_bit_map], eax
   332 000001C7 7315                            jnc .b2
   333 000001C9 40                              inc eax
   334 000001CA 3D00020000                      cmp eax, page_map_len*8
   335 000001CF 7CEF                            jl .b1
   336                                  
   337 000001D1 BB[EF040000]                    mov ebx, message_3
   338 000001D6 9A[00000000]2800                call sys_routine_seg_sel:put_string
   339 000001DD F4                              hlt                                     ;没有可以分配的页，停机
   340                                  
   341                                      .b2:
   342 000001DE C1E00C                          shl eax, 12                             ;乘以4096（0x1000）
   343                                  
   344 000001E1 1F                              pop ds
   345 000001E2 5A                              pop edx
   346 000001E3 59                              pop ecx
   347 000001E4 5B                              pop ebx
   348                                  
   349 000001E5 C3                              ret
   350                                  
   351                                  ;-------------------------------------------------------------------------------
   352                                  alloc_inst_a_page:                              ;分配一个页，并安装在当前活动的层级分页
   353                                                                                  ;结构中
   354                                                                                  ;输入：EBX=页的线性地址
   355 000001E6 50                              push eax
   356 000001E7 53                              push ebx
   357 000001E8 56                              push esi
   358 000001E9 1E                              push ds
   359                                  
   360 000001EA B808000000                      mov eax, mem_0_4_gb_seg_sel
   361 000001EF 8ED8                            mov ds, eax
   362                                  
   363                                          ;检查该线性地址所对应的页表是否存在
   364 000001F1 89DE                            mov esi, ebx
   365 000001F3 81E60000C0FF                    and esi, 0xffc00000
   366 000001F9 C1EE14                          shr esi, 20                             ;得到页目录索引，并乘以4
   367 000001FC 81CE00F0FFFF                    or  esi, 0xfffff000                     ;页目录自身的线性地址+表内偏移
   368                                  
   369 00000202 F70601000000                    test dword [esi], 0x00000001            ;P位是否为"1"。检查该线性地址是否已经有
   370 00000208 750A                            jnz .b1                                 ;对应的页表
   371                                  
   372                                          ;创建该线性地址所对应的页表
   373 0000020A E8A4FFFFFF                      call allocate_a_4k_page                 ;分配一个页做为页表
   374 0000020F 83C807                          or  eax, 0x00000007
   375 00000212 8906                            mov [esi], eax                          ;在页目录中登记该页表
   376                                  
   377                                      .b1:
   378                                          ;开始访问该线性地址所对应的页表
   379 00000214 89DE                            mov esi, ebx
   380 00000216 C1EE0A                          shr esi, 10
   381 00000219 81E600F03F00                    and esi, 0x003ff000                     ;或者0xfffff000,因为高10位是0
   382 0000021F 81CE0000C0FF                    or  esi, 0xffc00000                     ;得到该页表的线性地址
   383                                  
   384                                          ;得到该线性地址在页表内的对应条目（页表项）
   385 00000225 81E300F03F00                    and ebx, 0x003ff000
   386 0000022B C1EB0A                          shr ebx, 10                             ;相当于右移12位，再乘以4
   387 0000022E 09DE                            or  esi, ebx                            ;页表项的线性地址
   388 00000230 E87EFFFFFF                      call allocate_a_4k_page                 ;分配一个页，这才是要安装的页
   389 00000235 83C807                          or eax, 0x00000007
   390 00000238 8906                            mov [esi], eax
   391                                  
   392 0000023A 1F                              pop ds
   393 0000023B 5E                              pop esi
   394 0000023C 5B                              pop ebx
   395 0000023D 58                              pop eax
   396                                  
   397 0000023E CB                              retf
   398                                  
   399                                  ;-------------------------------------------------------------------------------
   400                                  create_copy_cur_pdir:                           ;创建新页目录，并复制当前页目录内容
   401                                                                                  ;输入：无
   402                                                                                  ;输出：EAX=新页目录的物理地址
   403 0000023F 1E                              push ds
   404 00000240 06                              push es
   405 00000241 56                              push esi
   406 00000242 57                              push edi
   407 00000243 53                              push ebx
   408 00000244 51                              push ecx
   409                                  
   410 00000245 BB08000000                      mov ebx, mem_0_4_gb_seg_sel
   411 0000024A 8EDB                            mov ds, ebx
   412 0000024C 8EC3                            mov es, ebx
   413                                  
   414 0000024E E860FFFFFF                      call allocate_a_4k_page
   415 00000253 89C3                            mov ebx, eax
   416 00000255 83CB07                          or  ebx, 0x00000007
   417 00000258 891DF8FFFFFF                    mov [0xfffffff8], ebx
   418                                  
   419 0000025E BE00F0FFFF                      mov esi, 0xfffff000                     ;ESI->当前页目录的线性地址
   420 00000263 BF00E0FFFF                      mov edi, 0xffffe000                     ;EDI->新页目录的线性地址
   421 00000268 B900040000                      mov ecx, 1024
   422 0000026D FC                              cld
   423 0000026E F3A5                            repe movsd
   424                                  
   425 00000270 59                              pop ecx
   426 00000271 5B                              pop ebx
   427 00000272 5F                              pop edi
   428 00000273 5E                              pop esi
   429 00000274 07                              pop es
   430 00000275 1F                              pop ds
   431                                  
   432 00000276 CB                              retf
   433                                  
   434                                  
   435                                  
   436                                  ;-------------------------------------------------------------------------------
   437                                  terminate_current_task:                         ;终止当前任务
   438                                                                                  ;注意，执行此例程时，当期任务仍在运行中
   439                                                                                  ;此例程其实也是当前任务的一部分
   440                                  
   441 00000277 B830000000                      mov eax, core_data_seg_sel
   442 0000027C 8ED8                            mov ds, eax
   443                                  
   444 0000027E 9C                              pushfd
   445 0000027F 5A                              pop edx
   446                                  
   447 00000280 66F7C20040                      test dx, 0100_0000_0000_0000B           ;测试NT位
   448 00000285 7506                            jnz .b1                                 ;当前任务是嵌套的，到.b1执行iretd
   449 00000287 FF2D[92070000]                  jmp far [program_man_tss]               ;程序管理器任务
   450                                  
   451                                      .b1:
   452 0000028D CF                              iretd
   453                                  
   454                                  sys_routine_end:
   455                                  
   456                                  ;===============================================================================
   457                                  SECTION core_data vstart=0                      ;核心数据段
   458                                  ;-------------------------------------------------------------------------------
   459 00000000 0000                            pgdt                    dw  0           ;用于设置和修改GDT
   460 00000002 00000000                                                dd  0
   461                                  
   462 00000006 FFFFFFFFFF5555FF                page_bit_map            db  0xff,0xff,0xff,0xff,0xff,0x55,0x55,0xff
   463 0000000E FFFFFFFFFFFFFFFF                                        db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   464 00000016 FFFFFFFFFFFFFFFF                                        db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   465 0000001E FFFFFFFFFFFFFFFF                                        db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   466 00000026 5555555555555555                                        db  0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55
   467 0000002E 0000000000000000                                        db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   468 00000036 0000000000000000                                        db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   469 0000003E 0000000000000000                                        db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   470                                          page_map_len            equ $-page_bit_map
   471                                  
   472                                          ;符号地址检索表
   473                                          salt:
   474 00000046 405072696E74537472-             salt_1                  db  '@PrintString'
   474 0000004F 696E67             
   475 00000052 00<rep F4h>                                             times 256-($-salt_1) db 0
   476 00000146 [00000000]                                              dd  put_string
   477 0000014A 2800                                                    dw  sys_routine_seg_sel
   478                                  
   479 0000014C 40526561644469736B-             salt_2                  db  '@ReadDiskData'
   479 00000155 44617461           
   480 00000159 00<rep F3h>                                             times 256-($-salt_2) db 0
   481 0000024C [B4000000]                                              dd  read_hard_disk_0
   482 00000250 2800                                                    dw  sys_routine_seg_sel
   483                                  
   484 00000252 405072696E7444776F-             salt_3                  db  '@PrintDwordAsHexString'
   484 0000025B 726441734865785374-
   484 00000264 72696E67           
   485 00000268 00<rep EAh>                                             times 256-($-salt_3) db 0
   486 00000352 [F9000000]                                              dd  put_hex_dword
   487 00000356 2800                                                    dw  sys_routine_seg_sel
   488                                  
   489 00000358 405465726D696E6174-             salt_4                  db  '@TerminateProgram'
   489 00000361 6550726F6772616D   
   490 00000369 00<rep EFh>                                             times 256-($-salt_4) db 0
   491 00000458 [77020000]                                              dd  terminate_current_task
   492 0000045C 2800                                                    dw  sys_routine_seg_sel
   493                                  
   494                                          salt_item_len           equ $-salt_4
   495                                          salt_items              equ ($-salt)/salt_item_len
   496                                  
   497 0000045E 2020576F726B696E67-             message_0               db  '  Working in system core,protect mode.'
   497 00000467 20696E207379737465-
   497 00000470 6D20636F72652C7072-
   497 00000479 6F74656374206D6F64-
   497 00000482 652E               
   498 00000484 0D0A00                                                  db  0x0d,0x0a,0
   499                                  
   500 00000487 2020506167696E6720-             message_1               db  '  Paging is enabled.System core is mapped to'
   500 00000490 697320656E61626C65-
   500 00000499 642E53797374656D20-
   500 000004A2 636F7265206973206D-
   500 000004AB 617070656420746F   
   501 000004B3 206164647265737320-                                     db  ' address 0x80000000.',0x0d,0x0a,0
   501 000004BC 307838303030303030-
   501 000004C5 302E0D0A00         
   502                                  
   503 000004CA 0D0A                            message_2               db  0x0d,0x0a
   504 000004CC 202053797374656D20-                                     db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
   504 000004D5 776964652043414C4C-
   504 000004DE 2D47415445206D6F75-
   504 000004E7 6E7465642E0D0A00   
   505                                  
   506 000004EF 2A2A2A2A2A2A2A2A4E-             message_3               db  '********No more pages********',0
   506 000004F8 6F206D6F7265207061-
   506 00000501 6765732A2A2A2A2A2A-
   506 0000050A 2A2A00             
   507                                  
   508 0000050D 0D0A20205461736B20-             message_4               db  0x0d,0x0a,'  Task switching...@_@',0x0d,0x0a,0
   508 00000516 737769746368696E67-
   508 0000051F 2E2E2E405F400D0A00 
   509                                  
   510 00000528 0D0A202050726F6365-             message_5               db  0x0d,0x0a,'  Processor HALT.',0
   510 00000531 73736F722048414C54-
   510 0000053A 2E00               
   511                                  
   512 0000053C 303132333435363738-             bin_hex                 db '0123456789ABCDEF'
   512 00000545 39414243444546     
   513                                                                                  ;put_hex_dword子过程用的查找表
   514 0000054C 00<rep 200h>                    core_buf  times 512     db 0            ;内核用的缓冲区
   515                                  
   516 0000074C 0D0A202000                      cpu_brnd0               db 0x0d, 0x0a, '  ', 0
   517 00000751 00<rep 34h>                     cpu_brand times 52      db 0
   518 00000785 0D0A0D0A00                      cpu_brnd1               db 0x0d, 0x0a, 0x0d, 0x0a, 0
   519                                  
   520                                          ;任务控制块链
   521 0000078A 00000000                        tcb_chain               dd 0
   522                                  
   523                                          ;内核信息
   524 0000078E 00001080                        core_next_laddr         dd 0x80100000   ;内核空间中下一个可分配的线性地址
   525 00000792 00000000                        program_man_tss         dd 0            ;程序管理器的TSS描述符选择子
   526 00000796 0000                                                    dw 0
   527                                  
   528                                  core_data_end:
   529                                  
   530                                  ;===============================================================================
   531                                  SECTION core_code vstart=0                      ;核心代码段
   532                                  ;-------------------------------------------------------------------------------
   533                                  fill_descriptor_in_ldt:                         ;在LDT内安装一个新的描述符
   534                                                                                  ;输入：EDX:EAX=描述符
   535                                                                                  ;           EBX=TCB基地址
   536                                                                                  ;输出：CX=描述符的选择子
   537 00000000 50                              push eax
   538 00000001 52                              push edx
   539 00000002 57                              push edi
   540 00000003 1E                              push ds
   541                                  
   542 00000004 B908000000                      mov ecx, mem_0_4_gb_seg_sel
   543 00000009 8ED9                            mov ds, ecx
   544                                  
   545 0000000B 8B7B0C                          mov edi, [ebx+0x0c]                     ;获取LDT基地址
   546                                  
   547 0000000E 31C9                            xor ecx, ecx
   548 00000010 668B4B0A                        mov cx, [ebx+0x0a]                      ;获取LDT界限
   549 00000014 6641                            inc cx                                  ;LDT的总字节数，即新描述符偏移地址
   550                                  
   551 00000016 89040F                          mov [edi+ecx+0x00], eax
   552 00000019 89540F04                        mov [edi+ecx+0x04], edx                 ;安装描述符
   553                                  
   554 0000001D 6683C108                        add cx, 8
   555 00000021 6649                            dec cx                                  ;得到新的LDT界限值
   556                                  
   557 00000023 66894B0A                        mov [ebx+0x0a], cx                      ;更新LDT界限值到TCB
   558                                  
   559 00000027 6689C8                          mov ax, cx
   560 0000002A 6631D2                          xor dx, dx
   561 0000002D 66B90800                        mov cx, 8
   562 00000031 66F7F1                          div cx
   563                                  
   564 00000034 6689C1                          mov cx, ax
   565 00000037 66C1E103                        shl cx, 3                               ;左移3位
   566 0000003B 6683C904                        or  cx, 0000_0000_0000_0100B            ;使TI位=1，指向LDT，最后使RPL=00
   567                                  
   568 0000003F 1F                              pop ds
   569 00000040 5F                              pop edi
   570 00000041 5A                              pop edx
   571 00000042 58                              pop eax
   572                                  
   573 00000043 C3                              ret
   574                                  ;-------------------------------------------------------------------------------
   575                                  load_relocate_program:                          ;加载并重定位用户程序
   576                                                                                  ;输入：PUSH 逻辑扇区号
   577                                                                                  ;      PUSH 任务控制块基地址
   578                                                                                  ;输出：无
   579 00000044 60                              pushad
   580                                  
   581 00000045 1E                              push ds
   582 00000046 06                              push es
   583                                  
   584 00000047 89E5                            mov ebp, esp                            ;为访问通过堆栈传递的参数做准备
   585                                  
   586 00000049 B908000000                      mov ecx, mem_0_4_gb_seg_sel
   587 0000004E 8EC1                            mov es, ecx
   588                                  
   589                                          ;清空当前页目录的前半部分(对应低2GB的局部地址空间)
   590 00000050 BB00F0FFFF                      mov ebx, 0xfffff000
   591 00000055 31F6                            xor esi, esi
   592                                      .b1:
   593 00000057 26C704B300000000                mov dword [es:ebx+esi*4], 0x00000000
   594 0000005F 46                              inc esi
   595 00000060 81FE00020000                    cmp esi, 512
   596 00000066 7CEF                            jl .b1
   597                                  
   598                                          ;以下开始分配内存并加载用户程序
   599 00000068 B830000000                      mov eax, core_data_seg_sel
   600 0000006D 8ED8                            mov ds, eax                             ;切换DS到内核数据段
   601                                  
   602 0000006F 8B4530                          mov eax, [ebp+12*4]                     ;从堆栈中取出用户程序的起始扇区号
   603 00000072 BB[4C050000]                    mov ebx, core_buf                       ;读取程序头部数据
   604 00000077 9A[B4000000]2800                call sys_routine_seg_sel:read_hard_disk_0
   605                                  
   606                                          ;以下判断整个程序有多大
   607 0000007E A1[4C050000]                    mov eax, [core_buf]                     ;程序尺寸
   608 00000083 89C3                            mov ebx, eax
   609 00000085 81E300F0FFFF                    and ebx, 0xfffff000                     ;使之4KB对齐
   610 0000008B 81C300100000                    add ebx, 0x1000
   611 00000091 A9FF0F0000                      test eax, 0x00000fff                    ;程序的大小正好是4KB的倍数么？
   612 00000096 0F45C3                          cmovnz eax, ebx                         ;不是，使用凑整的结果
   613                                  
   614 00000099 89C1                            mov ecx, eax
   615 0000009B C1E90C                          shr ecx, 12                             ;程序占用的总4KB页数
   616                                  
   617 0000009E B808000000                      mov eax, mem_0_4_gb_seg_sel             ;切换DS到0-4GB的段
   618 000000A3 8ED8                            mov ds, eax
   619                                  
   620 000000A5 8B4530                          mov eax, [ebp+12*4]                     ;起始扇区号
   621 000000A8 8B752C                          mov esi, [ebp+11*4]                     ;从堆栈中取得TCB的基地址
   622                                      .b2:
   623 000000AB 268B5E06                        mov ebx, [es:esi+0x06]                  ;取得可用的线性地址
   624 000000AF 2681460600100000                add dword [es:esi+0x06], 0x1000
   625 000000B7 9A[E6010000]2800                call sys_routine_seg_sel:alloc_inst_a_page
   626                                  
   627 000000BE 51                              push ecx
   628 000000BF B908000000                      mov ecx, 8
   629                                      .b3:
   630 000000C4 9A[B4000000]2800                call sys_routine_seg_sel:read_hard_disk_0
   631 000000CB 40                              inc eax
   632 000000CC E2F6                            loop .b3
   633                                  
   634 000000CE 59                              pop ecx
   635 000000CF E2DA                            loop .b2
   636                                  
   637                                          ;在内核地址空间内创建用户任务的TSS
   638 000000D1 B830000000                      mov eax, core_data_seg_sel              ;切换DS到内核数据段
   639 000000D6 8ED8                            mov ds, eax
   640                                  
   641 000000D8 8B1D[8E070000]                  mov ebx, [core_next_laddr]              ;用户任务的TSS必须在全局空间上分配
   642 000000DE 9A[E6010000]2800                call sys_routine_seg_sel:alloc_inst_a_page
   643 000000E5 8105[8E070000]0010-             add dword [core_next_laddr], 4096
   643 000000ED 0000               
   644                                  
   645 000000EF 26895E14                        mov [es:esi+0x14], ebx                  ;在TCB中填写TSS的线性地址
   646 000000F3 2666C746126700                  mov word [es:esi+0x12], 103             ;在TCB中填写TSS的界限值
   647                                  
   648                                          ;在用户任务的局部地址空间内创建LDT
   649 000000FA 268B5E06                        mov ebx, [es:esi+0x06]                  ;在TCB中取得可用的线性地址
   650 000000FE 2681460600100000                add dword [es:esi+0x06], 0x1000
   651 00000106 9A[E6010000]2800                call sys_routine_seg_sel:alloc_inst_a_page
   652 0000010D 26895E0C                        mov [es:esi+0x0c], ebx                  ;填写LDT线性地址到TCB中
   653                                  
   654                                          ;建立程序代码段描述符
   655 00000111 B800000000                      mov eax, 0x00000000
   656 00000116 BBFFFF0F00                      mov ebx, 0x000fffff
   657 0000011B B900F8C000                      mov ecx, 0x00c0f800                     ;4KB粒度的代码段描述符，特权级3
   658 00000120 9A[7E010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   659 00000127 89F3                            mov ebx, esi                            ;TCB的基地址
   660 00000129 E8D2FEFFFF                      call fill_descriptor_in_ldt
   661 0000012E 6683C903                        or  cx, 0000_0000_0000_0011B            ;设置选择子的特权级为3
   662                                  
   663 00000132 268B5E14                        mov ebx, [es:esi+0x14]                  ;从TCB中获取TSS的线性地址
   664 00000136 2666894B4C                      mov [es:ebx+76], cx                     ;填写TSS的CS域
   665                                  
   666                                          ;建立程序数据段描述符
   667 0000013B B800000000                      mov eax, 0x00000000
   668 00000140 BBFFFF0F00                      mov ebx, 0x000fffff
   669 00000145 B900F2C000                      mov ecx, 0x00c0f200                     ;4KB粒度的数据段描述符，特权级3
   670 0000014A 9A[7E010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   671 00000151 89F3                            mov ebx, esi                            ;TCB的基地址
   672 00000153 E8A8FEFFFF                      call fill_descriptor_in_ldt
   673 00000158 6683C903                        or  cx, 0000_0000_0000_0011B            ;设置选择子的特权级为3
   674                                  
   675 0000015C 268B5E14                        mov ebx, [es:esi+0x14]                  ;从TCB中获取TSS的线性地址
   676 00000160 2666894B54                      mov [es:ebx+84], cx                     ;填写TSS的DS域
   677 00000165 2666894B48                      mov [es:ebx+72], cx                     ;填写TSS的ES域
   678 0000016A 2666894B58                      mov [es:ebx+88], cx                     ;填写TSS的FS域
   679 0000016F 2666894B5C                      mov [es:ebx+92], cx                     ;填写TSS的GS域
   680                                  
   681                                          ;将数据段作为用户任务的3特权级固有堆栈
   682 00000174 268B5E06                        mov ebx, [es:esi+0x06]                  ;在TCB中取得可用的线性地址
   683 00000178 2681460600100000                add dword [es:esi+0x06], 0x1000
   684 00000180 9A[E6010000]2800                call sys_routine_seg_sel:alloc_inst_a_page
   685                                  
   686 00000187 268B5E14                        mov ebx, [es:esi+0x14]                  ;从TCB中获取TSS的线性地址
   687 0000018B 2666894B50                      mov [es:ebx+80], cx                     ;填写TSS的SS域
   688 00000190 268B5606                        mov edx, [es:esi+0x06]                  ;堆栈的高端线性地址地址
   689 00000194 26895338                        mov [es:ebx+56], edx                    ;填写TSS的ESP域
   690                                  
   691                                          ;在用户任务的局部地址空间内创建0特权级堆栈
   692 00000198 268B5E06                        mov ebx, [es:esi+0x06]                  ;在TCB中取得可用的线性地址
   693 0000019C 2681460600100000                add dword [es:esi+0x06], 0x1000
   694 000001A4 9A[E6010000]2800                call sys_routine_seg_sel:alloc_inst_a_page
   695                                  
   696 000001AB B800000000                      mov eax, 0x00000000
   697 000001B0 BBFFFF0F00                      mov ebx, 0x000fffff
   698 000001B5 B90092C000                      mov ecx, 0x00c09200                     ;4KB粒度的堆栈段描述符，特权级0
   699 000001BA 9A[7E010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   700 000001C1 89F3                            mov ebx, esi                            ;TCB的基地址
   701 000001C3 E838FEFFFF                      call fill_descriptor_in_ldt
   702 000001C8 6683C900                        or  cx, 0000_0000_0000_0000B            ;设置选择子的特权级为0
   703                                  
   704 000001CC 268B5E14                        mov ebx, [es:esi+0x14]                  ;从TCB中获取TSS的线性地址
   705 000001D0 2666894B08                      mov [es:ebx+8], cx                      ;填写TSS的SS0域
   706 000001D5 268B5606                        mov edx, [es:esi+0x06]                  ;堆栈的高端线性地址地址
   707 000001D9 26895304                        mov [es:ebx+4], edx                     ;填写TSS的ESP0域
   708                                  
   709                                          ;在用户任务的局部地址空间内创建1特权级堆栈
   710 000001DD 268B5E06                        mov ebx, [es:esi+0x06]                  ;在TCB中取得可用的线性地址
   711 000001E1 2681460600100000                add dword [es:esi+0x06], 0x1000
   712 000001E9 9A[E6010000]2800                call sys_routine_seg_sel:alloc_inst_a_page
   713                                  
   714 000001F0 B800000000                      mov eax, 0x00000000
   715 000001F5 BBFFFF0F00                      mov ebx, 0x000fffff
   716 000001FA B900B2C000                      mov ecx, 0x00c0b200                     ;4KB粒度的堆栈段描述符，特权级1
   717 000001FF 9A[7E010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   718 00000206 89F3                            mov ebx, esi                            ;TCB的基地址
   719 00000208 E8F3FDFFFF                      call fill_descriptor_in_ldt
   720 0000020D 6683C901                        or  cx, 0000_0000_0000_0001B            ;设置选择子的特权级为1
   721                                  
   722 00000211 268B5E14                        mov ebx, [es:esi+0x14]                  ;从TCB中获取TSS的线性地址
   723 00000215 2666894B10                      mov [es:ebx+16], cx                     ;填写TSS的SS1域
   724 0000021A 268B5606                        mov edx, [es:esi+0x06]                  ;堆栈的高端线性地址地址
   725 0000021E 2689530C                        mov [es:ebx+12], edx                    ;填写TSS的ESP1域
   726                                  
   727                                          ;在用户任务的局部地址空间内创建2特权级堆栈
   728 00000222 268B5E06                        mov ebx, [es:esi+0x06]                  ;在TCB中取得可用的线性地址
   729 00000226 2681460600100000                add dword [es:esi+0x06], 0x1000
   730 0000022E 9A[E6010000]2800                call sys_routine_seg_sel:alloc_inst_a_page
   731                                  
   732 00000235 B800000000                      mov eax, 0x00000000
   733 0000023A BBFFFF0F00                      mov ebx, 0x000fffff
   734 0000023F B900D2C000                      mov ecx, 0x00c0d200                     ;4KB粒度的堆栈段描述符，特权级2
   735 00000244 9A[7E010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   736 0000024B 89F3                            mov ebx, esi                            ;TCB的基地址
   737 0000024D E8AEFDFFFF                      call fill_descriptor_in_ldt
   738 00000252 6683C902                        or  cx, 0000_0000_0000_0010B            ;设置选择子的特权级为2
   739                                  
   740 00000256 268B5E14                        mov ebx, [es:esi+0x14]                  ;从TCB中获取TSS的线性地址
   741 0000025A 2666894B18                      mov [es:ebx+24], cx                     ;填写TSS的SS2域
   742 0000025F 268B5606                        mov edx, [es:esi+0x06]                  ;堆栈的高端线性地址地址
   743 00000263 26895314                        mov [es:ebx+20], edx                    ;填写TSS的ESP2域
   744                                  
   745                                  
   746                                          ;重新定位SALT
   747 00000267 B808000000                      mov eax, mem_0_4_gb_seg_sel             ;访问任务的4GB虚拟地址空间时用
   748 0000026C 8EC0                            mov es, eax
   749                                  
   750 0000026E B830000000                      mov eax, core_data_seg_sel
   751 00000273 8ED8                            mov ds, eax
   752                                  
   753 00000275 FC                              cld
   754                                  
   755 00000276 268B0D0C000000                  mov ecx, [es:0x0c]                      ;U-SALT条目数（通过访问4GB段取得）
   756 0000027D 268B3D08000000                  mov edi, [es:0x08]                      ;U-SALT在4GB段内的偏移
   757                                      .b4:
   758 00000284 51                              push ecx
   759 00000285 57                              push edi
   760                                  
   761 00000286 B904000000                      mov ecx, salt_items
   762 0000028B BE[46000000]                    mov esi, salt
   763                                      .b5:
   764 00000290 57                              push edi
   765 00000291 56                              push esi
   766 00000292 51                              push ecx
   767                                  
   768 00000293 B940000000                      mov ecx, 64                             ;检索表中，每条目的比较次数
   769 00000298 F3A7                            repe cmpsd                              ;每次比较4字节
   770 0000029A 7519                            jnz .b6
   771 0000029C 8B06                            mov eax, [esi]                          ;若匹配，esi恰好指向其后的地址数据
   772 0000029E 26898700FFFFFF                  mov [es:edi-256], eax                   ;将字符串改写成偏移地址
   773 000002A5 668B4604                        mov ax, [esi+4]
   774 000002A9 6683C803                        or  ax, 0000_0000_0000_0011B            ;以用户程序自己的特权级使用调用门
   775                                                                                  ;故RPL=3
   776 000002AD 2666898704FFFFFF                mov [es:edi-252], ax                    ;改写段选择子
   777                                      .b6:
   778                                  
   779 000002B5 59                              pop ecx
   780 000002B6 5E                              pop esi
   781 000002B7 81C606010000                    add esi, salt_item_len
   782 000002BD 5F                              pop edi
   783 000002BE E2D0                            loop .b5
   784                                  
   785 000002C0 5F                              pop edi
   786 000002C1 81C700010000                    add edi, 256
   787 000002C7 59                              pop ecx
   788 000002C8 E2BA                            loop .b4
   789                                  
   790                                  
   791                                  
   792                                  
   793                                  
   794                                          ;在GDT中登记LDT描述符
   795 000002CA 8B752C                          mov esi, [ebp+11*4]                     ;从堆栈中取得TCB的基地址
   796 000002CD 268B460C                        mov eax, [es:esi+0x0c]                  ;LDT的起始线性地址
   797 000002D1 260FB75E0A                      movzx ebx, word [es:esi+0x0a]           ;LDT段界限
   798 000002D6 B900824000                      mov ecx, 0x00408200                     ;LDT描述符，特权级0
   799 000002DB 9A[7E010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   800 000002E2 9A[22010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
   801 000002E9 2666894E10                      mov [es:esi+0x10], cx                   ;登记LDT选择子到TCB中
   802                                  
   803 000002EE 268B5E14                        mov ebx, [es:esi+0x14]                  ;从TCB中获取TSS线性地址
   804 000002F2 2666894B60                      mov [es:ebx+96], cx                     ;填写TSS的LDT域
   805                                  
   806 000002F7 2666C7030000                    mov word [es:ebx+0], 0                  ;反向链=0
   807                                  
   808 000002FD 26668B5612                      mov dx, [es:esi+0x12]                   ;段长度（界限）
   809 00000302 2666895366                      mov [es:ebx+102], dx                    ;填写TSS的I/O位图偏移域
   810                                  
   811 00000307 2666C743640000                  mov word [es:ebx+100], 0                ;T=0
   812                                  
   813 0000030E 26A104000000                    mov eax, [es:0x04]                      ;从任务的4GB地址空间获取入口点
   814 00000314 26894320                        mov [es:ebx+32], eax                    ;填写TSS的EIP域
   815                                  
   816 00000318 9C                              pushfd
   817 00000319 5A                              pop edx
   818 0000031A 26895324                        mov [es:ebx+36], edx                    ;填写TSS的EFLAGS域
   819                                  
   820                                          ;在GDT中登记TSS描述符
   821 0000031E 268B4614                        mov eax, [es:esi+0x14]                  ;从TCB中获取TSS的起始线性地址
   822 00000322 260FB75E12                      movzx ebx, word [es:esi+0x12]           ;段长度(界限)
   823 00000327 B900894000                      mov ecx, 0x00408900                     ;TSS描述符，特权级0
   824 0000032C 9A[7E010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   825 00000333 9A[22010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
   826 0000033A 2666894E18                      mov [es:esi+0x18], cx                   ;登记TSS选择子到TCB
   827                                  
   828                                          ;创建用户任务的页目录
   829                                          ;注意！页的分配和使用是由页位图决定的，可以不占用线性地址空间
   830 0000033F 9A[3F020000]2800                call sys_routine_seg_sel:create_copy_cur_pdir
   831 00000346 268B5E14                        mov ebx, [es:esi+0x14]                  ;从TCB中获取TSS的线性地址
   832 0000034A 2689431C                        mov dword [es:ebx+28], eax              ;填写TSS的CR3(PDBR)域
   833                                  
   834 0000034E 07                              pop es
   835 0000034F 1F                              pop ds
   836                                  
   837 00000350 61                              popad
   838                                  
   839 00000351 C20800                          ret 8                                   ;丢弃调用本过程前压入的参数
   840                                  
   841                                  
   842                                  ;-------------------------------------------------------------------------------
   843                                  append_to_tcb_link:                             ;在TCB链上追加任务控制块
   844                                                                                  ;输入：ECX=TCB线性基地址
   845 00000354 50                              push eax
   846 00000355 52                              push edx
   847 00000356 1E                              push ds
   848 00000357 06                              push es
   849                                  
   850 00000358 B830000000                      mov eax, core_data_seg_sel              ;令DS指向内核数据段
   851 0000035D 8ED8                            mov ds, eax
   852 0000035F B808000000                      mov eax, mem_0_4_gb_seg_sel             ;令ES指向0..4GB段
   853 00000364 8EC0                            mov es, eax
   854                                  
   855 00000366 26C70100000000                  mov dword [es: ecx+0x00], 0             ;当前TCB指针域清零，以指示这是最后一个TCB
   856                                  
   857 0000036D A1[8A070000]                    mov eax, [tcb_chain]                    ;TCB表头指针
   858 00000372 09C0                            or  eax, eax                            ;链表为空？
   859 00000374 740E                            jz .notcb
   860                                  
   861                                      .searc:
   862 00000376 89C2                            mov edx, eax
   863 00000378 268B02                          mov eax, [es:edx+0x00]
   864 0000037B 09C0                            or  eax, eax
   865 0000037D 75F7                            jnz .searc
   866                                  
   867 0000037F 26890A                          mov [es:edx+0x00], ecx
   868 00000382 EB06                            jmp .retpc
   869                                  
   870                                      .notcb:
   871 00000384 890D[8A070000]                  mov [tcb_chain], ecx                    ;若为空表，直接令表头指针指向TCB
   872                                  
   873                                      .retpc:
   874                                  
   875 0000038A 07                              pop es
   876 0000038B 1F                              pop ds
   877 0000038C 5A                              pop edx
   878 0000038D 58                              pop eax
   879                                  
   880 0000038E C3                              ret
   881                                  ;-------------------------------------------------------------------------------
   882                                  start:
   883 0000038F B930000000                      mov ecx, core_data_seg_sel              ;使ds指向核心数据段
   884 00000394 8ED9                            mov ds, ecx
   885                                  
   886                                  
   887 00000396 B908000000                      mov ecx, mem_0_4_gb_seg_sel             ;令ES指向4GB数据段
   888 0000039B 8EC1                            mov es, ecx
   889                                  
   890 0000039D BB[5E040000]                    mov ebx, message_0
   891 000003A2 9A[00000000]2800                call sys_routine_seg_sel:put_string
   892                                  
   893                                          ;显示处理器品牌信息
   894 000003A9 B802000080                      mov eax, 0x80000002
   895 000003AE 0FA2                            cpuid
   896 000003B0 A3[51070000]                    mov [cpu_brand + 0x00], eax
   897 000003B5 891D[55070000]                  mov [cpu_brand + 0x04], ebx
   898 000003BB 890D[59070000]                  mov [cpu_brand + 0x08], ecx
   899 000003C1 8915[5D070000]                  mov [cpu_brand + 0x0c], edx
   900                                  
   901 000003C7 B803000080                      mov eax, 0x80000003
   902 000003CC 0FA2                            cpuid
   903 000003CE A3[61070000]                    mov [cpu_brand + 0x10], eax
   904 000003D3 891D[65070000]                  mov [cpu_brand + 0x14], ebx
   905 000003D9 890D[69070000]                  mov [cpu_brand + 0x18], ecx
   906 000003DF 8915[6D070000]                  mov [cpu_brand + 0x1c], edx
   907                                  
   908 000003E5 B804000080                      mov eax, 0x80000004
   909 000003EA 0FA2                            cpuid
   910 000003EC A3[71070000]                    mov [cpu_brand + 0x20], eax
   911 000003F1 891D[75070000]                  mov [cpu_brand + 0x24], ebx
   912 000003F7 890D[79070000]                  mov [cpu_brand + 0x28], ecx
   913 000003FD 8915[7D070000]                  mov [cpu_brand + 0x2c], edx
   914                                  
   915 00000403 BB[4C070000]                    mov ebx, cpu_brnd0                      ;显示处理器品牌信息
   916 00000408 9A[00000000]2800                call sys_routine_seg_sel:put_string
   917 0000040F BB[51070000]                    mov ebx, cpu_brand
   918 00000414 9A[00000000]2800                call sys_routine_seg_sel:put_string
   919 0000041B BB[85070000]                    mov ebx, cpu_brnd1
   920 00000420 9A[00000000]2800                call sys_routine_seg_sel:put_string
   921                                  
   922                                          ;准备打开分页机制
   923                                  
   924                                          ;创建系统内核的页目录表PDT
   925                                          ;页目录表清零
   926 00000427 B900040000                      mov ecx, 1024                           ;1024个目录项
   927 0000042C BB00000200                      mov ebx, 0x00020000                     ;页目录的物理地址
   928 00000431 31F6                            xor esi, esi
   929                                      .b1:
   930 00000433 26C7043300000000                mov dword [es:ebx+esi], 0x00000000      ;页目录表项清零
   931 0000043B 83C604                          add esi, 4
   932 0000043E E2F3                            loop .b1
   933                                  
   934                                          ;在页目录内创建指向页目录自己的目录项
   935 00000440 26C783FC0F00000300-             mov dword [es:ebx+4092], 0x00020003
   935 00000449 0200               
   936                                  
   937                                          ;在页目录内创建与线性地址0x00000000对应的目录项
   938 0000044B 26C70303100200                  mov dword [es:ebx+0], 0x00021003       ;写入目录项（页表的物理地址和属性）
   939                                  
   940                                          ;创建与上面那个目录项相对应的页表，初始化页表项
   941 00000452 BB00100200                      mov ebx, 0x00021000                     ;页表的物理地址
   942 00000457 31C0                            xor eax, eax                            ;起始页的物理地址
   943 00000459 31F6                            xor esi, esi
   944                                      .b2:
   945 0000045B 89C2                            mov edx, eax
   946 0000045D 83CA03                          or  edx, 0x00000003
   947 00000460 268914B3                        mov [es:ebx+esi*4], edx                 ;登记页的物理地址
   948 00000464 0500100000                      add eax, 0x1000                         ;下一个相邻页的物理地址
   949 00000469 46                              inc esi
   950 0000046A 81FE00010000                    cmp esi, 256                            ;仅低端1MB内存对应的页才是有效的
   951 00000470 7CE9                            jl .b2
   952                                  
   953                                      .b3:                                        ;其余的页表项置为无效
   954 00000472 26C704B300000000                mov dword [es:ebx+esi*4], 0x00000000
   955 0000047A 46                              inc esi
   956 0000047B 81FE00040000                    cmp esi, 1024
   957 00000481 7CEF                            jl .b3
   958                                  
   959                                          ;令CR3寄存器指向页目录，并正式开启页功能
   960 00000483 B800000200                      mov eax, 0x00020000                     ;PCD=PWT=0
   961 00000488 0F22D8                          mov cr3, eax
   962                                  
   963 0000048B 0F20C0                          mov eax, cr0
   964 0000048E 0D00000080                      or  eax, 0x80000000
   965 00000493 0F22C0                          mov cr0, eax                            ;开启分页机制
   966                                  
   967                                          ;在页目录内创建与线性地址0x80000000对应的目录项
   968 00000496 BB00F0FFFF                      mov ebx, 0xfffff000                     ;页目录自己的线性地址
   969 0000049B BE00000080                      mov esi, 0x80000000                     ;映射的起始地址
   970 000004A0 C1EE16                          shr esi, 22
   971 000004A3 C1E602                          shl esi, 2
   972 000004A6 26C7043303100200                mov dword [es:ebx+esi], 0x00021003      ;写入目录项（页表的物理地址和属性）
   973                                                                                  ;目标单元的线性地址为0xFFFFF200
   974                                  
   975                                          ;将GDT中的段描述符映射到线性地址0x80000000
   976 000004AE 0F0105[00000000]                sgdt [pgdt]
   977                                  
   978 000004B5 8B1D[02000000]                  mov ebx, [pgdt+2]
   979                                  
   980 000004BB 26814B1400000080                or dword [es:ebx+0x10+4], 0x80000000
   981 000004C3 26814B1C00000080                or dword [es:ebx+0x18+4], 0x80000000
   982 000004CB 26814B2400000080                or dword [es:ebx+0x20+4], 0x80000000
   983 000004D3 26814B2C00000080                or dword [es:ebx+0x28+4], 0x80000000
   984 000004DB 26814B3400000080                or dword [es:ebx+0x30+4], 0x80000000
   985 000004E3 26814B3C00000080                or dword [es:ebx+0x38+4], 0x80000000
   986                                  
   987 000004EB 8105[02000000]0000-             add dword [pgdt+2], 0x80000000          ;GDTR也用的是线性地址
   987 000004F3 0080               
   988                                  
   989 000004F5 0F0115[00000000]                lgdt [pgdt]
   990                                  
   991 000004FC EA[03050000]3800                jmp core_code_seg_sel:flush             ;刷新段寄存器CS，启用高端线性地址
   992                                  
   993                                      flush:
   994 00000503 B818000000                      mov eax, core_stack_seg_sel
   995 00000508 8ED0                            mov ss, eax
   996                                  
   997 0000050A B830000000                      mov eax, core_data_seg_sel
   998 0000050F 8ED8                            mov ds, eax
   999                                  
  1000 00000511 BB[87040000]                    mov ebx, message_1
  1001 00000516 9A[00000000]2800                call sys_routine_seg_sel:put_string
  1002                                  
  1003                                          ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
  1004 0000051D BF[46000000]                    mov edi, salt                           ;C-SALT表的起始位置
  1005 00000522 B904000000                      mov ecx, salt_items                     ;C-SALT表的条目数量
  1006                                      .b4:
  1007 00000527 51                              push ecx
  1008 00000528 8B8700010000                    mov eax, [edi+256]                      ;该条目入口点的32位偏移地址
  1009 0000052E 668B9F04010000                  mov bx, [edi+260]                       ;该条目入口点的段选择子
  1010 00000535 66B900EC                        mov cx, 1_11_0_1100_000_00000B          ;特权级3的调用门（3以上的特权级才
  1011                                                                                  ;允许访问），0个参数（因为用寄存器
  1012                                                                                  ;传递参数，而没用使用栈
  1013 00000539 9A[99010000]2800                call sys_routine_seg_sel:make_gate_descriptor
  1014 00000540 9A[22010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
  1015 00000547 66898F04010000                  mov [edi+260], cx                       ;将返回的门描述符选择子回填
  1016 0000054E 81C706010000                    add edi, salt_item_len                  ;指向下一个C-SALT条目
  1017 00000554 59                              pop ecx
  1018 00000555 E2D0                            loop .b4
  1019                                  
  1020                                          ;对门进行测试
  1021 00000557 BB[CA040000]                    mov ebx, message_2
  1022 0000055C FF1D[46010000]                  call far [salt_1+256]                   ;通过门显示信息（偏移量忽略）
  1023                                  
  1024                                          ;为程序管理器的TSS分配内存空间
  1025 00000562 8B1D[8E070000]                  mov ebx, [core_next_laddr]
  1026 00000568 9A[E6010000]2800                call sys_routine_seg_sel:alloc_inst_a_page
  1027 0000056F 8105[8E070000]0010-             add dword [core_next_laddr], 4096
  1027 00000577 0000               
  1028                                  
  1029                                  
  1030                                          ;在程序管理器的TSS中设置的必要项目
  1031 00000579 2666C7030000                    mov word [es:ebx+0], 0                  ;反向链
  1032                                  
  1033 0000057F 0F20D8                          mov eax, cr3
  1034 00000582 2689431C                        mov dword [es:ebx+28], eax              ;登记CR3(PDBR)
  1035                                  
  1036 00000586 2666C743600000                  mov word [es:ebx+96], 0                 ;没有LDT。处理器允许没有LDT的任务
  1037 0000058D 2666C743640000                  mov word [es:ebx+100], 0                ;T=0
  1038 00000594 2666C743666700                  mov word [es:ebx+102], 103              ;没有I/O位图。0特权级事实上不需要
  1039                                  
  1040                                          ;创建程序管理器的TSS描述符，并安装到GDT中
  1041 0000059B 89D8                            mov eax, ebx                            ;TSS的起始线性地址
  1042 0000059D BB67000000                      mov ebx, 103                            ;段长度（界限）
  1043 000005A2 B900894000                      mov ecx, 0x00408900                     ;TSS描述符，特权级0
  1044 000005A7 9A[7E010000]2800                call sys_routine_seg_sel:make_seg_descriptor
  1045 000005AE 9A[22010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
  1046 000005B5 66890D[96070000]                mov [program_man_tss+0x04], cx          ;保存程序管理器的TSS描述符选择子
  1047                                  
  1048                                          ;任务寄存器TR中的内容是任务存在的标志，该内容也决定了当前任务是谁
  1049                                          ;下面的指令为当前正在执行的0特权任务『程序管理器』后补手续（TSS）
  1050 000005BC 0F00D9                          ltr cx
  1051                                  
  1052                                          ;现在可认为『程序管理器』任务正执行中
  1053                                  
  1054                                          ;创建用户任务的任务控制块
  1055 000005BF 8B1D[8E070000]                  mov ebx, [core_next_laddr]
  1056 000005C5 9A[E6010000]2800                call sys_routine_seg_sel:alloc_inst_a_page
  1057 000005CC 8105[8E070000]0010-             add dword [core_next_laddr], 4096
  1057 000005D4 0000               
  1058                                  
  1059 000005D6 26C7430600000000                mov dword [es:ebx+0x06], 0              ;用户任务局部空间的分配从0开始
  1060 000005DE 2666C7430AFFFF                  mov word [es:ebx+0x0a], 0xffff          ;登记LDT初始的界限到TCB中
  1061 000005E5 89D9                            mov ecx, ebx
  1062 000005E7 E868FDFFFF                      call append_to_tcb_link                 ;将此TCB添加到TCB链中
  1063                                  
  1064 000005EC 6A32                            push dword 50                           ;用户程序位于逻辑50扇区
  1065 000005EE 51                              push ecx                                ;压入任务控制块起始线性地址
  1066                                  
  1067 000005EF E850FAFFFF                      call load_relocate_program
  1068                                  
  1069 000005F4 BB[0D050000]                    mov ebx, message_4
  1070 000005F9 9A[00000000]2800                call sys_routine_seg_sel:put_string
  1071                                  
  1072 00000600 26FF5914                        call far [es:ecx+0x14]                  ;执行任务切换。
  1073                                  
  1074 00000604 BB[28050000]                    mov ebx, message_5
  1075 00000609 9A[00000000]2800                call sys_routine_seg_sel:put_string
  1076                                  
  1077 00000610 F4                              hlt
  1078                                  
  1079                                  ;===============================================================================
  1080                                  SECTION core_trail
  1081                                  ;-------------------------------------------------------------------------------
  1082                                  core_end:
