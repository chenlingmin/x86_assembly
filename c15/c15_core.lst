     1                                          ;以下常量定义部分， 内核的大部分内容都应当固定
     2                                          core_code_seg_sel       equ 0x38        ;内核代码段选择子
     3                                          core_data_seg_sel       equ 0x30        ;内核数据段选择子
     4                                          sys_routine_seg_sel     equ 0x28        ;系统公共例程代码段选择子
     5                                          video_ram_seg_sel       equ 0x20        ;视频显示缓冲区的段选择子
     6                                          core_stack_seg_sel      equ 0x18        ;内核堆栈段选择子
     7                                          mem_0_4_gb_seg_sel      equ 0x08        ;整个0-4GB内存段选择子
     8                                  
     9                                  ;-------------------------------------------------------------------------------
    10                                          ;以下是系统核心的头部，用于加载核心程序
    11 00000000 [00000000]                      core_length     dd core_end             ;核心程序总长度#00
    12                                  
    13 00000004 [00000000]                      sys_routine_seg dd section.sys_routine.start
    14                                                                                  ;系统公用例程段位置#04
    15 00000008 [00000000]                      core_data_seg   dd section.core_data.start
    16                                                                                  ;核心数据段位置#08
    17 0000000C [00000000]                      core_code_seg   dd section.core_code.start
    18                                                                                  ;核心代码段位置#0c
    19                                  
    20 00000010 [E8030000]                      core_entry      dd start                ;核心代码段入口点 #10
    21 00000014 3800                                            dw core_code_seg_sel
    22                                  
    23                                  
    24                                  
    25                                  ;===============================================================================
    26                                          [bits 32]
    27                                  ;===============================================================================
    28                                  SECTION sys_routine vstart=0                    ;系统公共例程代码段
    29                                  ;-------------------------------------------------------------------------------
    30                                          ;字符串显示例程
    31                                  put_string:                                     ;显示0终止的字符串并移动光标
    32                                                                                  ;输入： DS:EBX=串地址
    33 00000000 51                              push ecx
    34                                      .getc:
    35 00000001 8A0B                            mov cl, [ebx]
    36 00000003 08C9                            or  cl, cl
    37 00000005 7408                            jz .exit
    38 00000007 E805000000                      call put_char
    39 0000000C 43                              inc ebx
    40 0000000D EBF2                            jmp .getc
    41                                  
    42                                      .exit:
    43 0000000F 59                              pop ecx
    44 00000010 CB                              retf                                    ;段间返回
    45                                  
    46                                  ;-------------------------------------------------------------------------------
    47                                  put_char:                                       ;在当前光标处显示一个字符，并推进
    48                                                                                  ;光标。仅用于段内调用
    49                                                                                  ;输入：CL=字符的ASCII码
    50 00000011 60                              pushad
    51                                  
    52                                          ;以下取当前光标的位置
    53 00000012 66BAD403                        mov dx, 0x3d4
    54 00000016 B00E                            mov al, 0x0e
    55 00000018 EE                              out dx, al
    56 00000019 6642                            inc dx                                  ;0x3d5
    57 0000001B EC                              in  al, dx                              ;高字
    58 0000001C 88C4                            mov ah, al
    59                                  
    60 0000001E 664A                            dec dx                                  ;0x3d4
    61 00000020 B00F                            mov al, 0x0f
    62 00000022 EE                              out dx, al
    63 00000023 6642                            inc dx                                  ;0x3d5
    64 00000025 EC                              in  al, dx                              ;低字
    65 00000026 6689C3                          mov bx, ax                              ;BX=代表光标位置的16位数
    66                                  
    67 00000029 80F90D                          cmp cl, 0x0d                            ;回车符？
    68 0000002C 750E                            jnz .put_0a
    69 0000002E 6689D8                          mov ax, bx
    70 00000031 B350                            mov bl, 80
    71 00000033 F6F3                            div bl
    72 00000035 F6E3                            mul bl
    73 00000037 6689C3                          mov bx, ax
    74 0000003A EB60                            jmp .set_cursor
    75                                  
    76                                     .put_0a:
    77 0000003C 80F90A                          cmp cl, 0x0a                            ;换行符?
    78 0000003F 7506                            jnz .put_other
    79 00000041 6683C350                        add bx, 80
    80 00000045 EB15                            jmp .roll_screen
    81                                  
    82                                     .put_other:                                  ;正常显示字符
    83 00000047 06                              push es
    84 00000048 B820000000                      mov eax, video_ram_seg_sel              ;0xb8000段的选择子
    85 0000004D 8EC0                            mov es, eax
    86 0000004F 66D1E3                          shl bx, 1
    87 00000052 2667880F                        mov [es:bx], cl
    88 00000056 07                              pop es
    89                                  
    90                                          ;以下将光标位置推进一个字符
    91 00000057 66D1EB                          shr bx, 1
    92 0000005A 6643                            inc bx
    93                                  
    94                                     .roll_screen:
    95 0000005C 6681FBD007                      cmp bx, 2000                            ;光标超出屏幕？滚屏
    96 00000061 7C39                            jl .set_cursor
    97                                  
    98 00000063 1E                              push ds
    99 00000064 06                              push es
   100 00000065 B820000000                      mov eax, video_ram_seg_sel
   101 0000006A 8ED8                            mov ds, eax
   102 0000006C 8EC0                            mov es, eax
   103 0000006E FC                              cld
   104 0000006F BEA0000000                      mov esi, 0xa0
   105 00000074 BF00000000                      mov edi, 0x00
   106 00000079 B980070000                      mov ecx, 1920
   107 0000007E F3A5                            rep movsd
   108 00000080 66BB000F                        mov bx, 3840                            ;清除屏幕最底一行
   109 00000084 B950000000                      mov ecx, 80
   110                                     .cls:
   111 00000089 266667C7072007                  mov word[es:bx], 0x0720
   112 00000090 6683C302                        add bx, 2
   113 00000094 E2F3                            loop .cls
   114                                  
   115 00000096 07                              pop es
   116 00000097 1F                              pop ds
   117                                  
   118 00000098 66BB8007                        mov bx, 1920
   119                                  
   120                                     .set_cursor:
   121 0000009C 66BAD403                        mov dx, 0x3d4
   122 000000A0 B00E                            mov al, 0x0e
   123 000000A2 EE                              out dx, al
   124 000000A3 6642                            inc dx                                  ;0x3d5
   125 000000A5 88F8                            mov al, bh
   126 000000A7 EE                              out dx, al
   127 000000A8 664A                            dec dx                                  ;0x3d4
   128 000000AA B00F                            mov al, 0x0f
   129 000000AC EE                              out dx, al
   130 000000AD 6642                            inc dx                                  ;0x3d5
   131 000000AF 88D8                            mov al, bl
   132 000000B1 EE                              out dx, al
   133                                  
   134 000000B2 61                              popad
   135 000000B3 C3                              ret
   136                                  
   137                                  ;-------------------------------------------------------------------------------
   138                                  read_hard_disk_0:                               ;从硬盘读取一个逻辑扇区
   139                                                                                  ;EAX=逻辑扇区号
   140                                                                                  ;DS:EBX=目标缓冲区地址
   141                                                                                  ;返回：EBX=EBX+512
   142 000000B4 50                              push eax
   143 000000B5 51                              push ecx
   144 000000B6 52                              push edx
   145                                  
   146 000000B7 50                              push eax
   147                                  
   148 000000B8 66BAF201                        mov dx, 0x1f2
   149 000000BC B001                            mov al, 1
   150 000000BE EE                              out dx, al                              ;读取的扇区数
   151                                  
   152 000000BF 6642                            inc dx                                  ;0x1f3
   153 000000C1 58                              pop eax
   154 000000C2 EE                              out dx, al                              ;LBA地址的7~0
   155                                  
   156 000000C3 6642                            inc dx                                  ;0x1f4
   157 000000C5 B108                            mov cl, 8
   158 000000C7 D3E8                            shr eax, cl
   159 000000C9 EE                              out dx, al                              ;LBA地址的15~8
   160                                  
   161 000000CA 6642                            inc dx                                  ;0x1f5
   162 000000CC D3E8                            shr eax, cl
   163 000000CE EE                              out dx, al                              ;LBA地址的23~16
   164                                  
   165 000000CF 6642                            inc dx                                  ;0x1f6
   166 000000D1 D3E8                            shr eax, cl
   167 000000D3 0CE0                            or  al, 0xe0                            ;第一硬盘 LBA地址的27~24
   168 000000D5 EE                              out dx, al
   169                                  
   170 000000D6 6642                            inc dx                                  ;0x1f7
   171 000000D8 B020                            mov al, 0x20                            ;读命令
   172 000000DA EE                              out dx, al
   173                                  
   174                                      .waits:
   175 000000DB EC                              in  al, dx
   176 000000DC 2488                            and al, 0x88
   177 000000DE 3C08                            cmp al, 0x08
   178 000000E0 75F9                            jnz .waits                              ;不忙，且硬盘已准备好数据传输
   179                                  
   180 000000E2 B900010000                      mov ecx, 256                            ;总共要读取的字数
   181 000000E7 66BAF001                        mov dx, 0x1f0
   182                                  
   183                                      .readw:
   184 000000EB 66ED                            in  ax, dx
   185 000000ED 668903                          mov [ebx], ax
   186 000000F0 83C302                          add ebx, 2
   187 000000F3 E2F6                            loop .readw
   188                                  
   189 000000F5 5A                              pop edx
   190 000000F6 59                              pop ecx
   191 000000F7 58                              pop eax
   192                                  
   193 000000F8 CB                              retf                                    ;段间返回
   194                                  
   195                                  
   196                                  ;-------------------------------------------------------------------------------
   197                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助
   198                                  put_hex_dword:                                  ;在当前光标处以十六进制形式显示
   199                                                                                  ;一个双字并推进光标
   200                                                                                  ;输入：EDX=要转换并显示的数字
   201                                                                                  ;输出：无
   202 000000F9 60                               pushad
   203 000000FA 1E                               push ds
   204                                  
   205 000000FB 66B83000                         mov ax, core_data_seg_sel              ;切换到核心数据段
   206 000000FF 8ED8                             mov ds, ax
   207                                  
   208 00000101 BB[2B050000]                     mov ebx, bin_hex                       ;指向核心数据段内的转换表
   209 00000106 B908000000                       mov ecx, 8
   210                                    .xlt:
   211 0000010B C1C204                           rol edx, 4
   212 0000010E 89D0                             mov eax, edx
   213 00000110 83E00F                           and eax, 0x0000000f
   214 00000113 D7                               xlat
   215                                  
   216 00000114 51                               push ecx
   217 00000115 88C1                             mov cl, al
   218 00000117 E8F5FEFFFF                       call put_char
   219 0000011C 59                               pop ecx
   220                                  
   221 0000011D E2EC                             loop .xlt
   222                                  
   223 0000011F 1F                               pop ds
   224 00000120 61                               popad
   225 00000121 CB                               retf
   226                                  
   227                                  ;-------------------------------------------------------------------------------
   228                                  allocate_memory:                                ;分配内存
   229                                                                                  ;输入：ECX=希望分配的字节数
   230                                                                                  ;输出：ECX=起始线性地址
   231 00000122 1E                              push ds
   232 00000123 50                              push eax
   233 00000124 53                              push ebx
   234                                  
   235 00000125 B830000000                      mov eax, core_data_seg_sel
   236 0000012A 8ED8                            mov ds, eax
   237                                  
   238 0000012C A1[06000000]                    mov eax, [ram_alloc]
   239 00000131 01C8                            add eax, ecx                            ;下一次分配时的起始地址
   240                                  
   241                                          ;这里应当有检测可用内存数量的指令
   242                                  
   243 00000133 8B0D[06000000]                  mov ecx, [ram_alloc]                    ;返回分配的起始地址
   244                                  
   245 00000139 89C3                            mov ebx, eax
   246 0000013B 83E3FC                          and ebx, 0xfffffffc
   247 0000013E 83C304                          add ebx, 4                              ;强制对齐
   248 00000141 A903000000                      test eax, 0x00000003                    ;下次分配的起始地址最好是4字节对齐
   249 00000146 0F45C3                          cmovnz eax, ebx                         ;如果没有对齐，则强制对齐
   250 00000149 A3[06000000]                    mov [ram_alloc], eax                    ;下次从该地址分配内存
   251                                                                                  ;cmovcc指令可以避免控制转移
   252                                  
   253 0000014E 5B                              pop ebx
   254 0000014F 58                              pop eax
   255 00000150 1F                              pop ds
   256                                  
   257 00000151 CB                              retf
   258                                  
   259                                  ;-------------------------------------------------------------------------------
   260                                  set_up_gdt_descriptor:                          ;在GDT内安装一个新的描述符
   261                                                                                  ;输入：EDX:EAX=描述符
   262                                                                                  ;输出：CX=描述符的选择子
   263 00000152 50                              push eax
   264 00000153 53                              push ebx
   265 00000154 52                              push edx
   266                                  
   267 00000155 1E                              push ds
   268 00000156 06                              push es
   269                                  
   270 00000157 BB30000000                      mov ebx, core_data_seg_sel              ;切换到核心数据段
   271 0000015C 8EDB                            mov ds, ebx
   272                                  
   273 0000015E 0F0105[00000000]                sgdt [pgdt]                             ;以便开始处理GDT
   274                                  
   275 00000165 BB08000000                      mov ebx, mem_0_4_gb_seg_sel
   276 0000016A 8EC3                            mov es, ebx
   277                                  
   278 0000016C 0FB71D[00000000]                movzx ebx, word [pgdt]                  ;GDT界限
   279 00000173 6643                            inc bx                                  ;GDT总字节数，也是下一个描述符的偏移
   280 00000175 031D[02000000]                  add ebx, [pgdt+2]                       ;下一个描述符的线性地址
   281                                  
   282 0000017B 268903                          mov [es:ebx], eax
   283 0000017E 26895304                        mov [es:ebx+4], edx
   284                                  
   285 00000182 668305[00000000]08              add word [pgdt], 8                      ;增加一个描述符的大小
   286                                  
   287 0000018A 0F0115[00000000]                lgdt [pgdt]                             ;对GDT的更改生效
   288                                  
   289 00000191 66A1[00000000]                  mov ax, [pgdt]                          ;得到GDT的界限值
   290 00000197 6631D2                          xor dx, dx
   291 0000019A 66BB0800                        mov bx, 8
   292 0000019E 66F7F3                          div bx                                  ;除以8，去掉余数
   293 000001A1 6689C1                          mov cx, ax
   294 000001A4 66C1E103                        shl cx, 3                               ;将索引号移到正确的位置
   295                                  
   296 000001A8 07                              pop es
   297 000001A9 1F                              pop ds
   298                                  
   299 000001AA 5A                              pop edx
   300 000001AB 5B                              pop ebx
   301 000001AC 58                              pop eax
   302                                  
   303 000001AD CB                              retf
   304                                  ;-------------------------------------------------------------------------------
   305                                  make_seg_descriptor:                            ;构造存储器和系统的段描述符
   306                                                                                  ;输入：EAX=线性基地址
   307                                                                                  ;       EBX=段界限
   308                                                                                  ;       ECX=属性。各属性位都在原始位置，无关的位清零
   309                                                                                  ;返回：EDX:EAX=描述符
   310 000001AE 89C2                            mov edx, eax
   311 000001B0 C1E010                          shl eax, 16
   312 000001B3 6609D8                          or ax, bx                               ;描述符前32位（EAX）构造完毕
   313                                  
   314 000001B6 81E20000FFFF                    and edx, 0xffff0000                     ;清除基地址中无关的位
   315 000001BC C1C208                          rol edx, 8
   316 000001BF 0FCA                            bswap edx                               ;装配基址的31~24和23~16
   317                                  
   318 000001C1 6631DB                          xor bx, bx
   319 000001C4 09DA                            or  edx, ebx                            ;装配段界限的高4位
   320                                  
   321 000001C6 09CA                            or  edx, ecx                            ;装配属性
   322                                  
   323 000001C8 CB                              retf
   324                                  
   325                                  ;-------------------------------------------------------------------------------
   326                                  make_gate_descriptor:                           ;构造门的描述符(调用门等）
   327                                                                                  ;输入：EAX=门代码在段内偏移地址
   328                                                                                  ;       BX=门代码所在段的选择子
   329                                                                                  ;       CX=段类型及属性等（各属性
   330                                                                                  ;             位都在原始位置）
   331                                                                                  ;返回：EDX:EAX=完整的描述符
   332                                  
   333 000001C9 53                              push ebx
   334 000001CA 51                              push ecx
   335                                  
   336 000001CB 89C2                            mov edx, eax
   337 000001CD 81E20000FFFF                    and edx, 0xffff0000                     ;得到偏移地址高16位
   338 000001D3 6609CA                          or  dx, cx                              ;组装属性部分到EDX
   339                                  
   340 000001D6 25FFFF0000                      and eax, 0x0000ffff                     ;得到偏移地址低16位
   341 000001DB C1E310                          shl ebx, 16
   342 000001DE 09D8                            or  eax, ebx                            ;组装段选择子部分
   343                                  
   344 000001E0 59                              pop ecx
   345 000001E1 5B                              pop ebx
   346                                  
   347 000001E2 CB                              retf
   348                                  
   349                                  ;-------------------------------------------------------------------------------
   350                                  terminate_current_task:                         ;终止当前任务
   351                                                                                  ;注意，执行此例程时，当期任务仍在运行中
   352                                                                                  ;此例程其实也是当前任务的一部分
   353                                  
   354 000001E3 9C                              pushfd
   355 000001E4 8B1424                          mov edx, [esp]                          ;获取EFLAGS寄存器内容
   356 000001E7 83C404                          add esp, 4
   357                                  
   358 000001EA B830000000                      mov eax, core_data_seg_sel
   359 000001EF 8ED8                            mov ds, eax
   360                                  
   361 000001F1 66F7C20040                      test dx, 0100_0000_0000_0000B           ;测试NT位
   362 000001F6 7512                            jnz .b1                                 ;当前任务是嵌套的，到.b1执行iretd
   363 000001F8 BB[450F0000]                    mov ebx, core_msg1                      ;当前任务不是嵌套的，直到切换到
   364 000001FD 9A[00000000]2800                call sys_routine_seg_sel:put_string
   365 00000204 FF2D[810D0000]                  jmp far [prgman_tss]                    ;程序管理器任务
   366                                  
   367                                      .b1:
   368 0000020A BB[B80E0000]                    mov ebx, core_msg0
   369 0000020F 9A[00000000]2800                call sys_routine_seg_sel:put_string
   370 00000216 CF                              iretd
   371                                  
   372                                  sys_routine_end:
   373                                  
   374                                  ;===============================================================================
   375                                  SECTION core_data vstart=0                      ;核心数据段
   376                                  ;-------------------------------------------------------------------------------
   377 00000000 0000                            pgdt                    dw  0           ;用于设置和修改GDT
   378 00000002 00000000                                                dd  0
   379                                  
   380 00000006 00001000                        ram_alloc               dd 0x00100000   ;下次分配内存时的起始地址
   381                                  
   382                                          ;符号地址检索表
   383                                          salt:
   384 0000000A 405072696E74537472-             salt_1                  db  '@PrintString'
   384 00000013 696E67             
   385 00000016 00<rep F4h>                                             times 256-($-salt_1) db 0
   386 0000010A [00000000]                                              dd  put_string
   387 0000010E 2800                                                    dw  sys_routine_seg_sel
   388                                  
   389 00000110 40526561644469736B-             salt_2                  db  '@ReadDiskData'
   389 00000119 44617461           
   390 0000011D 00<rep F3h>                                             times 256-($-salt_2) db 0
   391 00000210 [B4000000]                                              dd  read_hard_disk_0
   392 00000214 2800                                                    dw  sys_routine_seg_sel
   393                                  
   394 00000216 405072696E7444776F-             salt_3                  db  '@PrintDwordAsHexString'
   394 0000021F 726441734865785374-
   394 00000228 72696E67           
   395 0000022C 00<rep EAh>                                             times 256-($-salt_3) db 0
   396 00000316 [F9000000]                                              dd  put_hex_dword
   397 0000031A 2800                                                    dw  sys_routine_seg_sel
   398                                  
   399 0000031C 405465726D696E6174-             salt_4                  db  '@TerminateProgram'
   399 00000325 6550726F6772616D   
   400 0000032D 00<rep EFh>                                             times 256-($-salt_4) db 0
   401 0000041C [E3010000]                                              dd  terminate_current_task
   402 00000420 2800                                                    dw  sys_routine_seg_sel
   403                                  
   404                                          salt_item_len           equ $-salt_4
   405                                          salt_items              equ ($-salt)/salt_item_len
   406                                  
   407 00000422 2020496620796F7520-             message_1               db  '  If you seen this message,that means we '
   407 0000042B 7365656E2074686973-
   407 00000434 206D6573736167652C-
   407 0000043D 74686174206D65616E-
   407 00000446 7320776520         
   408 0000044B 617265206E6F772069-                                     db  'are now in protect mode,and the system '
   408 00000454 6E2070726F74656374-
   408 0000045D 206D6F64652C616E64-
   408 00000466 207468652073797374-
   408 0000046F 656D20             
   409 00000472 636F7265206973206C-                                     db  'core is loaded,and the video display '
   409 0000047B 6F616465642C616E64-
   409 00000484 207468652076696465-
   409 0000048D 6F20646973706C6179-
   409 00000496 20                 
   410 00000497 726F7574696E652077-                                     db  'routine works perfectly.',0x0d,0x0a,0
   410 000004A0 6F726B732070657266-
   410 000004A9 6563746C792E0D0A00 
   411                                  
   412                                  
   413 000004B2 202053797374656D20-             message_2               db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
   413 000004BB 776964652043414C4C-
   413 000004C4 2D47415445206D6F75-
   413 000004CD 6E7465642E0D0A00   
   414                                  
   415 000004D5 0D0A20204C6F616469-             message_3               db  0x0d,0x0a,'  Loading user program...',0
   415 000004DE 6E6720757365722070-
   415 000004E7 726F6772616D2E2E2E-
   415 000004F0 00                 
   416                                  
   417 000004F1 446F6E652E0D0A00                do_status               db  'Done.',0x0d,0x0a,0
   418                                  
   419 000004F9 0D0A0D0A0D0A                    message_6               db  0x0d,0x0a,0x0d,0x0a,0x0d,0x0a
   420 000004FF 202055736572207072-                                     db  '  User program terminated,control returned.',0
   420 00000508 6F6772616D20746572-
   420 00000511 6D696E617465642C63-
   420 0000051A 6F6E74726F6C207265-
   420 00000523 7475726E65642E00   
   421                                  
   422 0000052B 303132333435363738-             bin_hex                 db '0123456789ABCDEF'
   422 00000534 39414243444546     
   423                                                                                  ;put_hex_dword子过程用的查找表
   424 0000053B 00<rep 800h>                    core_buf  times 2048    db 0            ;内核用的缓冲区
   425                                  
   426 00000D3B 00000000                        esp_pointer             dd 0            ;内核用来临时保存自己的栈指针
   427                                  
   428 00000D3F 0D0A202000                      cpu_brnd0               db 0x0d, 0x0a, '  ', 0
   429 00000D44 00<rep 34h>                     cpu_brand times 52      db 0
   430 00000D78 0D0A0D0A00                      cpu_brnd1               db 0x0d, 0x0a, 0x0d, 0x0a, 0
   431                                  
   432                                          ;任务控制块链
   433 00000D7D 00000000                        tcb_chain               dd 0
   434                                  
   435                                          ;程序管理器的任务信息
   436 00000D81 00000000                        prgman_tss              dd 0            ;程序管理器的TSS基地址
   437 00000D85 0000                                                    dw 0            ;程序管理器的TSS描述符选择子
   438                                  
   439                                  
   440 00000D87 0D0A                            prgman_msg1             db  0x0d,0x0a
   441 00000D89 5B50524F4752414D20-                                     db  '[PROGRAM MANAGER]: Hello! I am Program Manager,'
   441 00000D92 4D414E414745525D3A-
   441 00000D9B 2048656C6C6F212049-
   441 00000DA4 20616D2050726F6772-
   441 00000DAD 616D204D616E616765-
   441 00000DB6 722C               
   442 00000DB8 72756E206174204350-                                     db  'run at CPL=0.Now,create user task and switch '
   442 00000DC1 4C3D302E4E6F772C63-
   442 00000DCA 726561746520757365-
   442 00000DD3 72207461736B20616E-
   442 00000DDC 642073776974636820 
   443 00000DE5 746F20697420627920-                                     db  'to it by the CALL instruction...',0x0d,0x0a,0
   443 00000DEE 7468652043414C4C20-
   443 00000DF7 696E73747275637469-
   443 00000E00 6F6E2E2E2E0D0A00   
   444                                  
   445 00000E08 0D0A                            prgman_msg2             db  0x0d,0x0a
   446 00000E0A 5B50524F4752414D20-                                     db  '[PROGRAM MANAGER]: I am glad to regain control.'
   446 00000E13 4D414E414745525D3A-
   446 00000E1C 204920616D20676C61-
   446 00000E25 6420746F2072656761-
   446 00000E2E 696E20636F6E74726F-
   446 00000E37 6C2E               
   447 00000E39 4E6F772C6372656174-                                     db  'Now,create another user task and switch to '
   447 00000E42 6520616E6F74686572-
   447 00000E4B 207573657220746173-
   447 00000E54 6B20616E6420737769-
   447 00000E5D 74636820746F20     
   448 00000E64 697420627920746865-                                     db  'it by the JMP instruction...',0x0d,0x0a,0
   448 00000E6D 204A4D5020696E7374-
   448 00000E76 72756374696F6E2E2E-
   448 00000E7F 2E0D0A00           
   449                                  
   450 00000E83 0D0A                            prgman_msg3             db  0x0d,0x0a
   451 00000E85 5B50524F4752414D20-                                     db  '[PROGRAM MANAGER]: I am gain control again,'
   451 00000E8E 4D414E414745525D3A-
   451 00000E97 204920616D20676169-
   451 00000EA0 6E20636F6E74726F6C-
   451 00000EA9 20616761696E2C     
   452 00000EB0 48414C542E2E2E00                                        db  'HALT...',0
   453                                  
   454 00000EB8 0D0A                            core_msg0               db  0x0d,0x0a
   455 00000EBA 5B53595354454D2043-                                     db  '[SYSTEM CORE]: Uh...This task initiated with '
   455 00000EC3 4F52455D3A2055682E-
   455 00000ECC 2E2E54686973207461-
   455 00000ED5 736B20696E69746961-
   455 00000EDE 746564207769746820 
   456 00000EE7 43414C4C20696E7374-                                     db  'CALL instruction or an exeception/ interrupt,'
   456 00000EF0 72756374696F6E206F-
   456 00000EF9 7220616E2065786563-
   456 00000F02 657074696F6E2F2069-
   456 00000F0B 6E746572727570742C 
   457 00000F14 73686F756C64207573-                                     db  'should use IRETD instruction to switch back...'
   457 00000F1D 652049524554442069-
   457 00000F26 6E737472756374696F-
   457 00000F2F 6E20746F2073776974-
   457 00000F38 6368206261636B2E2E-
   457 00000F41 2E                 
   458 00000F42 0D0A00                                                  db  0x0d,0x0a,0
   459                                  
   460 00000F45 0D0A                            core_msg1               db  0x0d,0x0a
   461 00000F47 5B53595354454D2043-                                     db  '[SYSTEM CORE]: Uh...This task initiated with '
   461 00000F50 4F52455D3A2055682E-
   461 00000F59 2E2E54686973207461-
   461 00000F62 736B20696E69746961-
   461 00000F6B 746564207769746820 
   462 00000F74 4A4D5020696E737472-                                     db  'JMP instruction,  should switch to Program '
   462 00000F7D 756374696F6E2C2020-
   462 00000F86 73686F756C64207377-
   462 00000F8F 6974636820746F2050-
   462 00000F98 726F6772616D20     
   463 00000F9F 4D616E616765722064-                                     db  'Manager directly by the JMP instruction...'
   463 00000FA8 69726563746C792062-
   463 00000FB1 7920746865204A4D50-
   463 00000FBA 20696E737472756374-
   463 00000FC3 696F6E2E2E2E       
   464 00000FC9 0D0A00                                                  db  0x0d,0x0a,0
   465                                  core_data_end:
   466                                  
   467                                  ;===============================================================================
   468                                  SECTION core_code vstart=0                      ;核心代码段
   469                                  ;-------------------------------------------------------------------------------
   470                                  fill_descriptor_in_ldt:                         ;在LDT内安装一个新的描述符
   471                                                                                  ;输入：EDX:EAX=描述符
   472                                                                                  ;           EBX=TCB基地址
   473                                                                                  ;输出：CX=描述符的选择子
   474 00000000 50                              push eax
   475 00000001 52                              push edx
   476 00000002 57                              push edi
   477 00000003 1E                              push ds
   478                                  
   479 00000004 B908000000                      mov ecx, mem_0_4_gb_seg_sel
   480 00000009 8ED9                            mov ds, ecx
   481                                  
   482 0000000B 8B7B0C                          mov edi, [ebx+0x0c]                     ;获取LDT基地址
   483                                  
   484 0000000E 31C9                            xor ecx, ecx
   485 00000010 668B4B0A                        mov cx, [ebx+0x0a]                      ;获取LDT界限
   486 00000014 6641                            inc cx                                  ;LDT的总字节数，即新描述符偏移地址
   487                                  
   488 00000016 89040F                          mov [edi+ecx+0x00], eax
   489 00000019 89540F04                        mov [edi+ecx+0x04], edx                 ;安装描述符
   490                                  
   491 0000001D 6683C108                        add cx, 8
   492 00000021 6649                            dec cx                                  ;得到新的LDT界限值
   493                                  
   494 00000023 66894B0A                        mov [ebx+0x0a], cx                      ;更新LDT界限值到TCB
   495                                  
   496 00000027 6689C8                          mov ax, cx
   497 0000002A 6631D2                          xor dx, dx
   498 0000002D 66B90800                        mov cx, 8
   499 00000031 66F7F1                          div cx
   500                                  
   501 00000034 6689C1                          mov cx, ax
   502 00000037 66C1E103                        shl cx, 3                               ;左移3位
   503 0000003B 6683C904                        or  cx, 0000_0000_0000_0100B            ;使TI位=1，指向LDT，最后使RPL=00
   504                                  
   505 0000003F 1F                              pop ds
   506 00000040 5F                              pop edi
   507 00000041 5A                              pop edx
   508 00000042 58                              pop eax
   509                                  
   510 00000043 C3                              ret
   511                                  ;-------------------------------------------------------------------------------
   512                                  load_relocate_program:                          ;加载并重定位用户程序
   513                                                                                  ;输入：PUSH 逻辑扇区号
   514                                                                                  ;      PUSH 任务控制块基地址
   515                                                                                  ;输出：无
   516 00000044 60                              pushad
   517                                  
   518 00000045 1E                              push ds
   519 00000046 06                              push es
   520                                  
   521 00000047 89E5                            mov ebp, esp                            ;为访问通过堆栈传递的参数做准备
   522                                  
   523 00000049 B908000000                      mov ecx, mem_0_4_gb_seg_sel
   524 0000004E 8EC1                            mov es, ecx
   525                                  
   526 00000050 8B752C                          mov esi, [ebp+11*4]                      ;从堆栈中取得TCB的基地址
   527                                  
   528                                          ;以下申请创建LDT所需要的内存
   529 00000053 B9A0000000                      mov ecx, 160                            ;允许安装20个LDT描述符
   530 00000058 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   531 0000005F 26894E0C                        mov [es:esi+0x0c], ecx                  ;登记LDT基地址到TCB中
   532 00000063 2666C7460AFFFF                  mov word [es:esi+0x0a], 0xffff          ;登记LDT初始的界限到TCB中
   533                                  
   534                                  
   535                                          ;以下开始加载用户程序
   536 0000006A B830000000                      mov eax, core_data_seg_sel
   537 0000006F 8ED8                            mov ds, eax                             ;切换DS到内核数据段
   538                                  
   539 00000071 8B4530                          mov eax, [ebp+12*4]                     ;从堆栈中取出用户程序起始扇区号
   540 00000074 BB[3B050000]                    mov ebx, core_buf
   541 00000079 9A[B4000000]2800                call sys_routine_seg_sel:read_hard_disk_0
   542                                  
   543                                          ;以下判断整个程序有多大
   544 00000080 A1[3B050000]                    mov eax, [core_buf]                     ;程序尺寸
   545 00000085 89C3                            mov ebx, eax
   546 00000087 81E300FEFFFF                    and ebx, 0xfffffe00                     ;使之512字节对齐（能被512整除的数，低9位都为0）
   547 0000008D 81C300020000                    add ebx, 512
   548 00000093 A9FF010000                      test eax, 0x000001ff                    ;程序的大小正好是512的倍数么？
   549 00000098 0F45C3                          cmovnz eax, ebx                         ;不是，使用凑整的结果
   550                                  
   551 0000009B 89C1                            mov ecx, eax                            ;实际需要申请的内存数量
   552 0000009D 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   553 000000A4 26894E06                        mov [es:esi+0x06], ecx                  ;登记程序加载基地址到TCB中
   554                                  
   555 000000A8 89CB                            mov ebx, ecx                            ;ebx -> 申请到的内存首地址
   556 000000AA 31D2                            xor edx, edx
   557 000000AC B900020000                      mov ecx, 512
   558 000000B1 F7F1                            div ecx
   559 000000B3 89C1                            mov ecx, eax                            ;总扇区数
   560                                  
   561 000000B5 B808000000                      mov eax, mem_0_4_gb_seg_sel             ;切换DS到0-4G的段
   562 000000BA 8ED8                            mov ds, eax
   563                                  
   564 000000BC 8B4530                          mov eax, [ebp+12*4]                     ;起始扇区段
   565                                      .b1:
   566 000000BF 9A[B4000000]2800                call sys_routine_seg_sel:read_hard_disk_0
   567 000000C6 40                              inc eax
   568 000000C7 E2F6                            loop .b1                                ;循环读，直到读完整个用户程序
   569                                  
   570 000000C9 268B7E06                        mov edi, [es:esi+0x06]                  ;获得程序加载的基地址
   571                                  
   572                                          ;建立程序头部段描述符
   573 000000CD 89F8                            mov eax, edi                            ;程序头部起始线性地址
   574 000000CF 8B5F04                          mov ebx, [edi+0x04]                     ;段长度
   575 000000D2 4B                              dec ebx                                 ;段界限
   576 000000D3 B900F24000                      mov ecx, 0x0040f200                     ;字节粒度的数据段描述符，特权级3
   577 000000D8 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   578                                  
   579                                          ;安装头部段描述符到LDT中
   580 000000DF 89F3                            mov ebx, esi                            ;TCB的基地址
   581 000000E1 E81AFFFFFF                      call fill_descriptor_in_ldt
   582                                  
   583 000000E6 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   584 000000EA 2666894E44                      mov [es:esi+0x44], cx                   ;登记程序头部段选择子到 TCB
   585 000000EF 66894F04                        mov [edi+0x04], cx                      ;和头部
   586                                  
   587                                  
   588                                          ;建立程序代码段描述符
   589 000000F3 89F8                            mov eax, edi
   590 000000F5 034714                          add eax, [edi+0x14]                     ;代码起始线性地址
   591 000000F8 8B5F18                          mov ebx, [edi+0x18]                     ;段长度
   592 000000FB 4B                              dec ebx                                 ;段界限
   593 000000FC B900F84000                      mov ecx, 0x0040f800                     ;字节粒度的代码段描述符,特权级3
   594 00000101 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   595 00000108 89F3                            mov ebx, esi                            ;TCB的基地址
   596 0000010A E8F1FEFFFF                      call fill_descriptor_in_ldt
   597 0000010F 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   598 00000113 66894F14                        mov [edi+0x14], cx                      ;登记代码段选择子到头部
   599                                  
   600                                          ;建立程序数据段描述符
   601 00000117 89F8                            mov eax, edi
   602 00000119 03471C                          add eax, [edi+0x1c]                     ;数据段起始线性地址
   603 0000011C 8B5F20                          mov ebx, [edi+0x20]                     ;段长度
   604 0000011F 4B                              dec ebx                                 ;段界限
   605 00000120 B900F24000                      mov ecx, 0x0040f200                     ;字节粒度的数据段描述符,特权级3
   606 00000125 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   607 0000012C 89F3                            mov ebx, esi                            ;TCB的基地址
   608 0000012E E8CDFEFFFF                      call fill_descriptor_in_ldt
   609 00000133 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   610 00000137 66894F1C                        mov [edi+0x1c], cx                      ;登记数据段选择子到头部
   611                                  
   612                                          ;建立程序堆栈段描述符
   613 0000013B 8B4F0C                          mov ecx, [edi+0x0c]                     ;4KB的倍率
   614 0000013E BBFFFF0F00                      mov ebx, 0x000fffff
   615 00000143 29CB                            sub ebx, ecx                            ;段界限
   616 00000145 B800100000                      mov eax, 4096
   617 0000014A F7670C                          mul dword [edi+0x0c]
   618 0000014D 89C1                            mov ecx, eax                            ;准备为堆栈分配内存
   619 0000014F 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   620 00000156 01C8                            add eax, ecx                            ;得到堆栈的高端物理地址
   621 00000158 B900F6C000                      mov ecx, 0x00c0f600                     ;4KB粒度的堆栈段描述符,特权级3
   622 0000015D 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   623 00000164 89F3                            mov ebx, esi                            ;TCB的基地址
   624 00000166 E895FEFFFF                      call fill_descriptor_in_ldt
   625 0000016B 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   626 0000016F 66894F08                        mov [edi+0x08], cx                      ;登记堆栈段选择子到头部
   627                                  
   628                                          ;重新定位SALT
   629 00000173 B808000000                      mov eax, mem_0_4_gb_seg_sel
   630 00000178 8EC0                            mov es, eax
   631                                  
   632 0000017A B830000000                      mov eax, core_data_seg_sel
   633 0000017F 8ED8                            mov ds, eax
   634                                  
   635 00000181 FC                              cld
   636                                  
   637 00000182 268B4F24                        mov ecx, [es:edi+0x24]                  ;U-SALT条目数（通过访问4GB段取得）
   638 00000186 83C728                          add edi, 0x28                           ;U-SALT在4GB段内的便宜
   639                                      .b2:
   640 00000189 51                              push ecx
   641 0000018A 57                              push edi
   642                                  
   643 0000018B B904000000                      mov ecx, salt_items
   644 00000190 BE[0A000000]                    mov esi, salt
   645                                      .b3:
   646 00000195 57                              push edi
   647 00000196 56                              push esi
   648 00000197 51                              push ecx
   649                                  
   650 00000198 B940000000                      mov ecx, 64                             ;检索表中，每条目的比较次数
   651 0000019D F3A7                            repe cmpsd                              ;每次比较4字节
   652 0000019F 7519                            jnz .b4
   653 000001A1 8B06                            mov eax, [esi]                          ;若匹配，esi恰好指向其后的地址数据
   654 000001A3 26898700FFFFFF                  mov [es:edi-256], eax                   ;将字符串改写成偏移地址
   655 000001AA 668B4604                        mov ax, [esi+4]
   656 000001AE 6683C803                        or  ax, 0000_0000_0000_0011B            ;以用户程序自己的特权级使用调用门
   657                                                                                  ;故RPL=3
   658 000001B2 2666898704FFFFFF                mov [es:edi-252], ax                    ;改写段选择子
   659                                      .b4:
   660                                  
   661 000001BA 59                              pop ecx
   662 000001BB 5E                              pop esi
   663 000001BC 81C606010000                    add esi, salt_item_len
   664 000001C2 5F                              pop edi
   665 000001C3 E2D0                            loop .b3
   666                                  
   667 000001C5 5F                              pop edi
   668 000001C6 81C700010000                    add edi, 256
   669 000001CC 59                              pop ecx
   670 000001CD E2BA                            loop .b2
   671                                  
   672 000001CF 8B752C                          mov esi, [ebp+11*4]                     ;从堆栈中取得TCB的基地址
   673                                  
   674                                          ;创建0特权级堆栈
   675 000001D2 B900100000                      mov ecx, 4096
   676 000001D7 89C8                            mov eax, ecx                            ;为生成堆栈高端地址做准备
   677 000001D9 26894E1A                        mov [es:esi+0x1a], ecx
   678 000001DD 26C16E1A0C                      shr dword [es:esi+0x1a], 12             ;登记0特权级堆栈尺寸到TCB(4096)
   679 000001E2 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   680 000001E9 01C8                            add eax, ecx                            ;堆栈必须使用高地址为基地址
   681 000001EB 2689461E                        mov [es:esi+0x1e], eax                  ;登记0特权级堆栈基地址到TCB
   682 000001EF BBFEFF0F00                      mov ebx, 0xffffe                        ;段长度（界限）
   683 000001F4 B90096C000                      mov ecx, 0x00c09600                     ;4KB粒度，读写，特权级0
   684 000001F9 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   685 00000200 89F3                            mov ebx, esi                            ;TCB的基地址
   686 00000202 E8F9FDFFFF                      call fill_descriptor_in_ldt
   687 00000207 6683C900                        or cx, 0000_0000_0000_0000              ;设置选择子的特权为0
   688 0000020B 2666894E22                      mov [es:esi+0x22], cx                   ;登记0特权级堆栈选择子到TCB
   689 00000210 26C7462400000000                mov dword [es:esi+0x24], 0              ;登记0特权级堆栈初始ESP到TCB
   690                                  
   691                                  
   692                                          ;创建1特权级堆栈
   693 00000218 B900100000                      mov ecx, 4096
   694 0000021D 89C8                            mov eax, ecx                            ;为生成堆栈高端地址做准备
   695 0000021F 26894E28                        mov [es:esi+0x28], ecx
   696 00000223 26C16E280C                      shr dword [es:esi+0x28], 12             ;登记1特权级堆栈尺寸到TCB(4096)
   697 00000228 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   698 0000022F 01C8                            add eax, ecx                            ;堆栈必须使用高地址为基地址
   699 00000231 2689462C                        mov [es:esi+0x2c], eax                  ;登记1特权级堆栈基地址到TCB
   700 00000235 BBFEFF0F00                      mov ebx, 0xffffe                        ;段长度（界限）
   701 0000023A B900B6C000                      mov ecx, 0x00c0b600                     ;4KB粒度，读写，特权级1
   702 0000023F 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   703 00000246 89F3                            mov ebx, esi                            ;TCB的基地址
   704 00000248 E8B3FDFFFF                      call fill_descriptor_in_ldt
   705 0000024D 6683C901                        or cx, 0000_0000_0000_0001              ;设置选择子的特权为1
   706 00000251 2666894E30                      mov [es:esi+0x30], cx                   ;登记1特权级堆栈选择子到TCB
   707 00000256 26C7463200000000                mov dword [es:esi+0x32], 0              ;登记1特权级堆栈初始ESP到TCB
   708                                  
   709                                  
   710                                          ;创建2特权级堆栈
   711 0000025E B900100000                      mov ecx, 4096
   712 00000263 89C8                            mov eax, ecx                            ;为生成堆栈高端地址做准备
   713 00000265 26894E36                        mov [es:esi+0x36], ecx
   714 00000269 26C16E360C                      shr dword [es:esi+0x36], 12             ;登记2特权级堆栈尺寸到TCB(4096)
   715 0000026E 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   716 00000275 01C8                            add eax, ecx                            ;堆栈必须使用高地址为基地址
   717 00000277 2689463A                        mov [es:esi+0x3a], eax                  ;登记2特权级堆栈基地址到TCB
   718 0000027B BBFEFF0F00                      mov ebx, 0xffffe                        ;段长度（界限）
   719 00000280 B900D6C000                      mov ecx, 0x00c0d600                     ;4KB粒度，读写，特权级2
   720 00000285 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   721 0000028C 89F3                            mov ebx, esi                            ;TCB的基地址
   722 0000028E E86DFDFFFF                      call fill_descriptor_in_ldt
   723 00000293 6683C90A                        or cx, 0000_0000_0000_0010              ;设置选择子的特权为2
   724 00000297 2666894E3E                      mov [es:esi+0x3e], cx                   ;登记2特权级堆栈选择子到TCB
   725 0000029C 26C7464000000000                mov dword [es:esi+0x40], 0              ;登记2特权级堆栈初始ESP到TCB
   726                                  
   727                                          ;在GDT中登记LDT描述符
   728 000002A4 268B460C                        mov eax, [es:esi+0x0c]                  ;LDT的起始线性地址
   729 000002A8 260FB75E0A                      movzx ebx, word [es:esi+0x0a]           ;LDT段界限
   730 000002AD B900824000                      mov ecx, 0x00408200                     ;LDT描述符，特权级0
   731 000002B2 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   732 000002B9 9A[52010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
   733 000002C0 2666894E10                      mov [es:esi+0x10], cx                   ;登记LDT选择子到TCB中
   734                                  
   735                                          ;创建用户程序的TSS
   736 000002C5 B968000000                      mov ecx, 104                            ;TSS的基本尺寸
   737 000002CA 2666894E12                      mov [es:esi+0x12], cx
   738 000002CF 2666FF4E12                      dec word [es:esi+0x12]                  ;登记TSS界限值到TCB
   739 000002D4 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   740 000002DB 26894E14                        mov [es:esi+0x14], ecx                  ;登记TSS基地址到TCB
   741                                  
   742                                          ;登记基本的TSS表格内容
   743 000002DF 2666C7010000                    mov word [es:ecx+0], 0                  ;反向链=0
   744                                  
   745 000002E5 268B5624                        mov edx, [es:esi+0x24]                  ;登记0特权级堆栈初始ESP
   746 000002E9 26895104                        mov [es:ecx+4], edx                     ;到TSS中
   747                                  
   748                                  
   749 000002ED 26668B5622                      mov dx, [es:esi+0x22]                   ;登记0特权级堆栈段选择子
   750 000002F2 2666895108                      mov [es:ecx+8], dx                      ;到TSS中
   751                                  
   752 000002F7 268B5632                        mov edx, [es:esi+0x32]                  ;登记1特权级堆栈初始ESP
   753 000002FB 2689510C                        mov [es:ecx+12], edx                    ;到TSS中
   754                                  
   755 000002FF 26668B5630                      mov dx, [es:esi+0x30]                   ;登记1特权级堆栈段选择子
   756 00000304 2666895110                      mov [es:ecx+16], dx                     ;到TSS中
   757                                  
   758 00000309 268B5640                        mov edx, [es:esi+0x40]                  ;登记2特权级堆栈初始ESP
   759 0000030D 26895114                        mov [es:ecx+20], edx                    ;到TSS中
   760                                  
   761 00000311 26668B563E                      mov dx, [es:esi+0x3e]                   ;登记2特权级堆栈段选择子
   762 00000316 2666895118                      mov [es:ecx+24], dx                     ;到TSS中
   763                                  
   764 0000031B 26668B5610                      mov dx, [es:esi+0x10]                   ;登记任务的LDT选择子
   765 00000320 2666895160                      mov [es:ecx+96], dx                     ;到TSS中
   766                                  
   767 00000325 26668B5612                      mov dx, [es:esi+0x12]                   ;登记任务的I/O位图偏移
   768 0000032A 2666895166                      mov [es:ecx+102], dx                    ;到TSS中
   769                                  
   770 0000032F 2666C741640000                  mov word [es:ecx+100], 0                ;T=0
   771                                  
   772 00000336 26C7411C00000000                mov dword [es:ecx+28],0                 ;登记CR3(PDBR)
   773                                  
   774                                          ;访问用户程序头部，获取数据填充TSS
   775 0000033E 8B5D2C                          mov ebx, [ebp+11*4]                     ;从堆栈中取得TCB的基地址
   776 00000341 268B7B06                        mov edi, [es:ebx+0x06]                  ;用户程序加载的基地址
   777                                  
   778 00000345 268B5710                        mov edx, [es:edi+0x10]                  ;登记程序入口点（EIP）
   779 00000349 26895120                        mov [es:ecx+32], edx                    ;到TSS
   780                                  
   781 0000034D 26668B5714                      mov dx, [es:edi+0x14]                   ;登记程序代码段（CS）选择子
   782 00000352 266689514C                      mov [es:ecx+76], dx                     ;到TSS中
   783                                  
   784 00000357 26668B5708                      mov dx, [es:edi+0x08]                   ;登记程序堆栈段（SS）选择子
   785 0000035C 2666895150                      mov [es:ecx+80], dx                     ;到TSS中
   786                                  
   787 00000361 26668B5704                      mov dx, [es:edi+0x04]                   ;登记程序数据段（DS）选择子
   788 00000366 2666895154                      mov word [es:ecx+84], dx                ;到TSS中。注意，它指向程序头部段
   789                                  
   790 0000036B 2666C741480000                  mov word [es:ecx+72], 0                 ;TSS中的ES=0
   791                                  
   792 00000372 2666C741580000                  mov word [es:ecx+88], 0                 ;TSS中的FS=0
   793                                  
   794 00000379 2666C7415C0000                  mov word [es:ecx+92], 0                 ;TSS中的GS=0
   795                                  
   796 00000380 9C                              pushfd
   797 00000381 5A                              pop edx
   798                                  
   799 00000382 26895124                        mov dword [es:ecx+36], edx              ;EFLAGS
   800                                  
   801                                          ;在GDT中登记TSS描述符
   802 00000386 268B4614                        mov eax, [es:esi+0x14]                  ;TSS的起始线性地址
   803 0000038A 260FB75E12                      movzx ebx, word [es:esi+0x12]           ;段长度(界限)
   804 0000038F B900894000                      mov ecx, 0x00408900                     ;TSS描述符，特权级0
   805 00000394 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   806 0000039B 9A[52010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
   807 000003A2 2666894E18                      mov [es:esi+0x18], cx                   ;登记TSS选择子到TCB
   808                                  
   809 000003A7 07                              pop es
   810 000003A8 1F                              pop ds
   811                                  
   812 000003A9 61                              popad
   813                                  
   814 000003AA C20800                          ret 8                                   ;丢弃调用本过程前压入的参数
   815                                  
   816                                  
   817                                  ;-------------------------------------------------------------------------------
   818                                  append_to_tcb_link:                             ;在TCB链上追加任务控制块
   819                                                                                  ;输入：ECX=TCB线性基地址
   820 000003AD 50                              push eax
   821 000003AE 52                              push edx
   822 000003AF 1E                              push ds
   823 000003B0 06                              push es
   824                                  
   825 000003B1 B830000000                      mov eax, core_data_seg_sel              ;令DS指向内核数据段
   826 000003B6 8ED8                            mov ds, eax
   827 000003B8 B808000000                      mov eax, mem_0_4_gb_seg_sel             ;令ES指向0..4GB段
   828 000003BD 8EC0                            mov es, eax
   829                                  
   830 000003BF 26C70100000000                  mov dword [es: ecx+0x00], 0             ;当前TCB指针域清零，以指示这是最后一个TCB
   831                                  
   832 000003C6 A1[7D0D0000]                    mov eax, [tcb_chain]                    ;TCB表头指针
   833 000003CB 09C0                            or  eax, eax                            ;链表为空？
   834 000003CD 740E                            jz .notcb
   835                                  
   836                                      .searc:
   837 000003CF 89C2                            mov edx, eax
   838 000003D1 268B02                          mov eax, [es:edx+0x00]
   839 000003D4 09C0                            or  eax, eax
   840 000003D6 75F7                            jnz .searc
   841                                  
   842 000003D8 26890A                          mov [es:edx+0x00], ecx
   843 000003DB EB06                            jmp .retpc
   844                                  
   845                                      .notcb:
   846 000003DD 890D[7D0D0000]                  mov [tcb_chain], ecx                    ;若为空表，直接令表头指针指向TCB
   847                                  
   848                                      .retpc:
   849                                  
   850 000003E3 07                              pop es
   851 000003E4 1F                              pop ds
   852 000003E5 5A                              pop edx
   853 000003E6 58                              pop eax
   854                                  
   855 000003E7 C3                              ret
   856                                  ;-------------------------------------------------------------------------------
   857                                  start:
   858 000003E8 B930000000                      mov ecx, core_data_seg_sel              ;使ds指向核心数据段
   859 000003ED 8ED9                            mov ds, ecx
   860                                  
   861                                  
   862 000003EF B908000000                      mov ecx, mem_0_4_gb_seg_sel             ;令ES指向4GB数据段
   863 000003F4 8EC1                            mov es, ecx
   864                                  
   865 000003F6 BB[22040000]                    mov ebx, message_1
   866 000003FB 9A[00000000]2800                call sys_routine_seg_sel:put_string
   867                                  
   868                                          ;显示处理器品牌信息
   869 00000402 B802000080                      mov eax, 0x80000002
   870 00000407 0FA2                            cpuid
   871 00000409 A3[440D0000]                    mov [cpu_brand + 0x00], eax
   872 0000040E 891D[480D0000]                  mov [cpu_brand + 0x04], ebx
   873 00000414 890D[4C0D0000]                  mov [cpu_brand + 0x08], ecx
   874 0000041A 8915[500D0000]                  mov [cpu_brand + 0x0c], edx
   875                                  
   876 00000420 B803000080                      mov eax, 0x80000003
   877 00000425 0FA2                            cpuid
   878 00000427 A3[540D0000]                    mov [cpu_brand + 0x10], eax
   879 0000042C 891D[580D0000]                  mov [cpu_brand + 0x14], ebx
   880 00000432 890D[5C0D0000]                  mov [cpu_brand + 0x18], ecx
   881 00000438 8915[600D0000]                  mov [cpu_brand + 0x1c], edx
   882                                  
   883 0000043E B804000080                      mov eax, 0x80000004
   884 00000443 0FA2                            cpuid
   885 00000445 A3[640D0000]                    mov [cpu_brand + 0x20], eax
   886 0000044A 891D[680D0000]                  mov [cpu_brand + 0x24], ebx
   887 00000450 890D[6C0D0000]                  mov [cpu_brand + 0x28], ecx
   888 00000456 8915[700D0000]                  mov [cpu_brand + 0x2c], edx
   889                                  
   890 0000045C BB[3F0D0000]                    mov ebx, cpu_brnd0                      ;显示处理器品牌信息
   891 00000461 9A[00000000]2800                call sys_routine_seg_sel:put_string
   892 00000468 BB[440D0000]                    mov ebx, cpu_brand
   893 0000046D 9A[00000000]2800                call sys_routine_seg_sel:put_string
   894 00000474 BB[780D0000]                    mov ebx, cpu_brnd1
   895 00000479 9A[00000000]2800                call sys_routine_seg_sel:put_string
   896                                  
   897                                          ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
   898 00000480 BF[0A000000]                    mov edi, salt                           ;C-SALT表的起始位置
   899 00000485 B904000000                      mov ecx, salt_items                     ;C-SALT表的条目数量
   900                                      .b3:
   901 0000048A 51                              push ecx
   902 0000048B 8B8700010000                    mov eax, [edi+256]                      ;该条目入口点的32位偏移地址
   903 00000491 668B9F04010000                  mov bx, [edi+260]                       ;该条目入口点的段选择子
   904 00000498 66B900EC                        mov cx, 1_11_0_1100_000_00000B          ;特权级3的调用门（3以上的特权级才
   905                                                                                  ;允许访问），0个参数（因为用寄存器
   906                                                                                  ;传递参数，而没用使用栈
   907 0000049C 9A[C9010000]2800                call sys_routine_seg_sel:make_gate_descriptor
   908 000004A3 9A[52010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
   909 000004AA 66898F04010000                  mov [edi+260], cx                       ;将返回的门描述符选择子回填
   910 000004B1 81C706010000                    add edi, salt_item_len                  ;指向下一个C-SALT条目
   911 000004B7 59                              pop ecx
   912 000004B8 E2D0                            loop .b3
   913                                  
   914                                          ;对门进行测试
   915 000004BA BB[B2040000]                    mov ebx, message_2
   916 000004BF FF1D[0A010000]                  call far [salt_1+256]                   ;通过门显示信息（偏移量忽略）
   917                                  
   918                                          ;为程序管理器的TSS分配内存空间
   919 000004C5 B968000000                      mov ecx, 104                            ;为该任务的TSS分配内存
   920 000004CA 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   921 000004D1 890D[810D0000]                  mov [prgman_tss+0x00], ecx              ;保存程序管理器的TSS地址
   922                                  
   923                                          ;在程序管理器的TSS中设置必要的条目
   924 000004D7 2666C741600000                  mov word [es:ecx+96], 0                 ;没有LDT。处理器允许没有LDT的任务
   925 000004DE 2666C741666700                  mov word [es:ecx+102], 103              ;没有I/O位图，0特权级事实上不需要
   926 000004E5 2666C7010000                    mov word [es:ecx+0], 0                  ;反向链=0
   927 000004EB 26C7411C00000000                mov dword [es:ecx+28], 0                ;登记CR3（PDBR）
   928 000004F3 2666C741640000                  mov word [es:ecx+100], 0                ;T=0
   929                                                                                  ;不需要0、1、2特权级堆栈。0特权级不会向底特权级转移控制
   930                                  
   931                                          ;创建TSS描述符，并安装到GDT中
   932 000004FA 89C8                            mov eax, ecx                            ;TSS的起始线性地址
   933 000004FC BB67000000                      mov ebx, 103                            ;段长度（界限）
   934 00000501 B900894000                      mov ecx, 0x00408900                     ;TSS描述符，特权级0
   935 00000506 9A[AE010000]2800                call sys_routine_seg_sel:make_seg_descriptor
   936 0000050D 9A[52010000]2800                call sys_routine_seg_sel:set_up_gdt_descriptor
   937 00000514 66890D[850D0000]                mov [prgman_tss+0x04], cx               ;保存程序管理器的TSS描述符选择子
   938                                  
   939                                          ;任务寄存器TR中的内容是任务存在的标志，该内容也决定了当前任务是谁
   940                                          ;下面的指令为当前正在执行的0特权任务『程序管理器』后补手续（TSS）
   941 0000051B 0F00D9                          ltr cx
   942                                  
   943                                          ;现在可认为『程序管理器』任务正执行中
   944 0000051E BB[870D0000]                    mov ebx, prgman_msg1
   945 00000523 9A[00000000]2800                call sys_routine_seg_sel:put_string
   946                                  
   947 0000052A B946000000                      mov ecx, 0x46
   948 0000052F 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   949 00000536 E872FEFFFF                      call append_to_tcb_link                 ;将此TCB添加到TCB链中
   950                                  
   951 0000053B 6A32                            push dword 50                           ;用户程序位于逻辑50扇区
   952 0000053D 51                              push ecx                                ;压入任务控制块起始线性地址
   953                                  
   954 0000053E E801FBFFFF                      call load_relocate_program
   955                                  
   956 00000543 26FF5914                        call far [es:ecx+0x14]                  ;执行任务切换。和上一章不同，任务切换时要恢复TSS内容，所以在创建时TSS要填完整
   957                                  
   958                                          ;重新加载并切换任务
   959 00000547 BB[080E0000]                    mov ebx, prgman_msg2
   960 0000054C 9A[00000000]2800                call sys_routine_seg_sel:put_string
   961                                  
   962 00000553 B946000000                      mov ecx, 0x46
   963 00000558 9A[22010000]2800                call sys_routine_seg_sel:allocate_memory
   964 0000055F E849FEFFFF                      call append_to_tcb_link                 ;将此TCB添加到TCB链中
   965                                  
   966 00000564 6A32                            push dword 50                           ;用户程序位于逻辑50扇区
   967 00000566 51                              push ecx                                ;压入任务控制块起始线性地址
   968                                  
   969 00000567 E8D8FAFFFF                      call load_relocate_program
   970                                  
   971 0000056C 26FF6914                        jmp far [es:ecx+0x14]                   ;执行任务切换
   972                                  
   973 00000570 BB[830E0000]                    mov ebx, prgman_msg3
   974 00000575 9A[00000000]2800                call sys_routine_seg_sel:put_string
   975                                  
   976 0000057C F4                              hlt
   977                                  
   978                                  ;===============================================================================
   979                                  SECTION core_trail
   980                                  ;-------------------------------------------------------------------------------
   981                                  core_end:
