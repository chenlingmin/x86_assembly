     1                                  ;-------------------------------------------------------------------------------
     2                                          ;以下是常量
     3                                          flat_4gb_code_seg_sel   equ 0x0008      ;平坦模型下的4GB代码段选择子
     4                                          flat_4gb_data_seg_sel   equ 0x0018      ;平坦模型下的4GB数据段选择子
     5                                          idt_linear_address      equ 0x8001f000  ;中断描述符表的线性基地址
     6                                  ;-------------------------------------------------------------------------------
     7                                          ;以下定义宏
     8                                          %macro  alloc_core_linear 0             ;在内核空间分配虚拟内存
     9                                                  mov ebx, [core_tcb+0x06]
    10                                                  add dword [core_tcb+0x06], 0x1000
    11                                                  call flat_4gb_code_seg_sel:alloc_inst_a_page
    12                                          %endmacro
    13                                  ;-------------------------------------------------------------------------------
    14                                          %macro  alloc_user_linear 0             ;在任务空间分配虚拟内存
    15                                                  mov ebx, [esi+0x06]
    16                                                  add dword [esi+0x06], 0x1000
    17                                                  call flat_4gb_code_seg_sel:alloc_inst_a_page
    18                                          %endmacro
    19                                  ;===============================================================================
    20                                  SECTION core vstart=0x80040000
    21                                  
    22                                          ;以下是系统核心的头部，用于加载核心程序
    23 00000000 [00000000]                      core_length     dd  core_end            ;核心程序总长度#00
    24 00000004 [9F0D0000]                      core_entry      dd  start               ;核心代码段入口点#04
    25                                  ;-------------------------------------------------------------------------------
    26                                          [bits 32]
    27                                  ;-------------------------------------------------------------------------------
    28                                           ;字符串显示例程（适用于平坦内存模型）
    29                                  put_string:                                     ;显示0终止的字符串并移动光标
    30                                                                                  ;输入：EBX=字符串的线性地址
    31 00000008 53                              push ebx
    32 00000009 51                              push ecx
    33                                  
    34 0000000A FA                              cli                                     ;硬件操作期间，关中断
    35                                  
    36                                      .getc:
    37 0000000B 8A0B                            mov cl, [ebx]
    38 0000000D 08C9                            or  cl, cl                              ;检测串结束标志（0）
    39 0000000F 7408                            jz .exit                                ;显示完毕，返回
    40 00000011 E807000000                      call put_char
    41 00000016 43                              inc ebx
    42 00000017 EBF2                            jmp .getc
    43                                  
    44                                      .exit:
    45                                  
    46 00000019 FB                              sti                                     ;硬件操作完毕，开放中断
    47                                  
    48 0000001A 59                              pop ecx
    49 0000001B 5B                              pop ebx
    50                                  
    51 0000001C CB                              retf                                    ;段间返回
    52                                  
    53                                  ;-------------------------------------------------------------------------------
    54                                  put_char:                                       ;在当前光标处显示一个字符,并推进
    55                                                                                  ;光标。仅用于段内调用
    56                                                                                  ;输入：CL=字符ASCII码
    57 0000001D 60                              pushad
    58                                  
    59                                          ;以下取当前光标位置
    60 0000001E 66BAD403                        mov dx, 0x3d4
    61 00000022 B00E                            mov al, 0x0e
    62 00000024 EE                              out dx, al
    63 00000025 6642                            inc dx                                  ;0x3d5
    64 00000027 EC                              in  al, dx                              ;高字
    65 00000028 88C4                            mov ah, al
    66                                  
    67 0000002A 664A                            dec dx                                  ;0x3d4
    68 0000002C B00F                            mov al, 0x0f
    69 0000002E EE                              out dx, al
    70 0000002F 6642                            inc dx                                  ;0x3d5
    71 00000031 EC                              in  al, dx                              ;低字
    72 00000032 6689C3                          mov bx, ax                              ;BX=代表光标位置的16位数
    73 00000035 81E3FFFF0000                    and ebx, 0x0000ffff                     ;准备使用32位寻址方式访问显存
    74                                  
    75 0000003B 80F90D                          cmp cl, 0x0d                            ;回车符？
    76 0000003E 750E                            jnz .put_0a
    77                                  
    78 00000040 6689D8                          mov ax, bx                              ;以下按回车符处理
    79 00000043 B350                            mov bl, 80
    80 00000045 F6F3                            div bl
    81 00000047 F6E3                            mul bl
    82 00000049 6689C3                          mov bx, ax
    83 0000004C EB4E                            jmp .set_cursor
    84                                  
    85                                      .put_0a:
    86 0000004E 80F90A                          cmp cl, 0x0a                            ;换行符？
    87 00000051 7506                            jnz .put_other
    88 00000053 6683C350                        add bx, 80                              ;增加一行
    89 00000057 EB0E                            jmp .roll_screen
    90                                  
    91                                      .put_other:                                 ;正常显示字符
    92 00000059 66D1E3                          shl bx, 1
    93 0000005C 888B00800B80                    mov [0x800b8000+ebx], cl                ;在光标位置处显示字符
    94                                  
    95                                          ;以下将光标位置推进一个字符
    96 00000062 66D1EB                          shr bx, 1
    97 00000065 6643                            inc bx
    98                                  
    99                                      .roll_screen:
   100 00000067 6681FBD007                      cmp bx, 2000                            ;光标超出屏幕？滚屏
   101 0000006C 7C2E                            jl  .set_cursor
   102                                  
   103 0000006E FC                              cld
   104 0000006F BEA0800B80                      mov esi, 0x800b80a0                     ;小心！32位模式下movsb/w/d
   105 00000074 BF00800B80                      mov edi, 0x800b8000                     ;使用的是esi/edi/ecx
   106 00000079 B980070000                      mov ecx, 1920
   107 0000007E F3A5                            rep movsd
   108 00000080 66BB000F                        mov bx, 3840                            ;清除屏幕最底一行
   109 00000084 B950000000                      mov ecx, 80                             ;32位程序应该使用ECX
   110                                      .cls:
   111 00000089 66C78300800B802007              mov word [0x800b8000+ebx], 0x0720
   112 00000092 6683C302                        add bx, 2
   113 00000096 E2F1                            loop .cls
   114                                  
   115 00000098 66BB8007                        mov bx, 1920
   116                                  
   117                                      .set_cursor:
   118 0000009C 66BAD403                        mov dx, 0x3d4
   119 000000A0 B00E                            mov al, 0x0e
   120 000000A2 EE                              out dx, al
   121 000000A3 6642                            inc dx                                  ;0x3d5
   122 000000A5 88F8                            mov al, bh
   123 000000A7 EE                              out dx, al
   124 000000A8 664A                            dec dx                                  ;0x3d4
   125 000000AA B00F                            mov al, 0x0f
   126 000000AC EE                              out dx, al
   127 000000AD 6642                            inc dx                                  ;0x3d5
   128 000000AF 88D8                            mov al, bl
   129 000000B1 EE                              out dx, al
   130                                  
   131 000000B2 61                              popad
   132                                  
   133 000000B3 C3                              ret
   134                                  
   135                                  ;-------------------------------------------------------------------------------
   136                                  read_hard_disk_0:                               ;从硬盘读取一个逻辑扇区（平坦模型）
   137                                                                                  ;EAX=逻辑扇区号
   138                                                                                  ;EBX=目标缓冲区线性地址
   139                                                                                  ;返回：EBX=EBX+512
   140 000000B4 FA                               cli
   141                                  
   142 000000B5 50                               push eax
   143 000000B6 51                               push ecx
   144 000000B7 52                               push edx
   145                                  
   146 000000B8 50                               push eax
   147                                  
   148 000000B9 66BAF201                         mov dx, 0x1f2
   149 000000BD B001                             mov al, 1
   150 000000BF EE                               out dx, al                             ;读取的扇区数
   151                                  
   152 000000C0 6642                             inc dx                                 ;0x1f3
   153 000000C2 58                               pop eax
   154 000000C3 EE                               out dx, al                             ;LBA地址7~0
   155                                  
   156 000000C4 6642                             inc dx                                 ;0x1f4
   157 000000C6 B108                             mov cl, 8
   158 000000C8 D3E8                             shr eax, cl
   159 000000CA EE                               out dx, al                             ;LBA地址15~8
   160                                  
   161 000000CB 6642                             inc dx                                 ;0x1f5
   162 000000CD D3E8                             shr eax, cl
   163 000000CF EE                               out dx, al                             ;LBA地址23~16
   164                                  
   165 000000D0 6642                             inc dx                                 ;0x1f6
   166 000000D2 D3E8                             shr eax, cl
   167 000000D4 0CE0                             or  al, 0xe0                           ;第一硬盘  LBA地址27~24
   168 000000D6 EE                               out dx, al
   169                                  
   170 000000D7 6642                             inc dx                                 ;0x1f7
   171 000000D9 B020                             mov al, 0x20                           ;读命令
   172 000000DB EE                               out dx, al
   173                                  
   174                                    .waits:
   175 000000DC EC                               in  al, dx
   176 000000DD 2488                             and al, 0x88
   177 000000DF 3C08                             cmp al, 0x08
   178 000000E1 75F9                             jnz .waits                             ;不忙，且硬盘已准备好数据传输
   179                                  
   180 000000E3 B900010000                       mov ecx, 256                           ;总共要读取的字数
   181 000000E8 66BAF001                         mov dx, 0x1f0
   182                                    .readw:
   183 000000EC 66ED                             in  ax, dx
   184 000000EE 668903                           mov [ebx], ax
   185 000000F1 83C302                           add ebx, 2
   186 000000F4 E2F6                             loop .readw
   187                                  
   188 000000F6 5A                               pop edx
   189 000000F7 59                               pop ecx
   190 000000F8 58                               pop eax
   191                                  
   192 000000F9 FB                               sti
   193                                  
   194 000000FA CB                               retf                                   ;远返回
   195                                  
   196                                  ;-------------------------------------------------------------------------------
   197                                  ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助
   198                                  put_hex_dword:                                  ;在当前光标处以十六进制形式显示
   199                                                                                  ;一个双字并推进光标
   200                                                                                  ;输入：EDX=要转换并显示的数字
   201                                                                                  ;输出：无
   202 000000FB 60                              pushad
   203                                  
   204 000000FC BB[4C080000]                    mov ebx, bin_hex                       ;指向核心地址空间内的转换表
   205 00000101 B908000000                      mov ecx, 8
   206                                      .xlt:
   207 00000106 C1C204                          rol edx, 4
   208 00000109 89D0                            mov eax, edx
   209 0000010B 83E00F                          and eax, 0x0000000f
   210 0000010E D7                              xlat
   211                                  
   212 0000010F 51                              push ecx
   213 00000110 88C1                            mov cl, al
   214 00000112 E806FFFFFF                      call put_char
   215 00000117 59                              pop ecx
   216                                  
   217 00000118 E2EC                            loop .xlt
   218                                  
   219 0000011A 61                              popad
   220 0000011B CB                              retf
   221                                  
   222                                  ;-------------------------------------------------------------------------------
   223                                  set_up_gdt_descriptor:                          ;在GDT内安装一个新的描述符
   224                                                                                  ;输入：EDX:EAX=描述符
   225                                                                                  ;输出：CX=描述符的选择子
   226 0000011C 50                              push eax
   227 0000011D 53                              push ebx
   228 0000011E 52                              push edx
   229                                  
   230 0000011F 0F0105[CE020000]                sgdt [pgdt]                             ;取得GDTR的界限和线性地址
   231                                  
   232 00000126 0FB71D[CE020000]                movzx ebx, word [pgdt]                  ;GDT界限
   233 0000012D 6643                            inc bx                                  ;GDT总字节数，也是下一个描述符偏移
   234 0000012F 031D[D0020000]                  add ebx, [pgdt+2]                       ;下一个描述符的线性地址
   235                                  
   236 00000135 8903                            mov [ebx], eax
   237 00000137 895304                          mov [ebx+4], edx
   238                                  
   239 0000013A 668305[CE020000]08              add word [pgdt], 8                      ;增加一个描述符的大小
   240                                  
   241 00000142 0F0115[CE020000]                lgdt [pgdt]                             ;对GDT的更改生效
   242                                  
   243 00000149 66A1[CE020000]                  mov ax, [pgdt]                          ;得到GDT界限值
   244 0000014F 6631D2                          xor dx,dx
   245 00000152 66BB0800                        mov bx,8
   246 00000156 66F7F3                          div bx                                  ;除以8，去掉余数
   247 00000159 6689C1                          mov cx,ax
   248 0000015C 66C1E103                        shl cx, 3                               ;将索引号移到正确位置
   249                                  
   250 00000160 5A                              pop edx
   251 00000161 5B                              pop ebx
   252 00000162 58                              pop eax
   253                                  
   254 00000163 CB                              retf
   255                                  ;-------------------------------------------------------------------------------
   256                                  make_seg_descriptor:                            ;构造存储器和系统的段描述符
   257                                                                                  ;输入：EAX=线性基地址
   258                                                                                  ;      EBX=段界限
   259                                                                                  ;      ECX=属性。各属性位都在原始
   260                                                                                  ;          位置，无关的位清零
   261                                                                                  ;返回：EDX:EAX=描述符
   262 00000164 89C2                             mov edx, eax
   263 00000166 C1E010                           shl eax, 16
   264 00000169 6609D8                           or  ax, bx                             ;描述符前32位(EAX)构造完毕
   265                                  
   266 0000016C 81E20000FFFF                     and edx, 0xffff0000                    ;清除基地址中无关的位
   267 00000172 C1C208                           rol edx, 8
   268 00000175 0FCA                             bswap edx                              ;装配基址的31~24和23~16  (80486+)
   269                                  
   270 00000177 6631DB                           xor bx, bx
   271 0000017A 09DA                             or  edx, ebx                           ;装配段界限的高4位
   272                                  
   273 0000017C 09CA                             or  edx, ecx                           ;装配属性
   274                                  
   275 0000017E CB                               retf
   276                                  ;-------------------------------------------------------------------------------
   277                                  make_gate_descriptor:                           ;构造门的描述符（调用门等）
   278                                                                                  ;输入：EAX=门代码在段内偏移地址
   279                                                                                  ;       BX=门代码所在段的选择子
   280                                                                                  ;       CX=段类型及属性等（各属
   281                                                                                  ;          性位都在原始位置）
   282                                                                                  ;返回：EDX:EAX=完整的描述符
   283 0000017F 53                              push ebx
   284 00000180 51                              push ecx
   285                                  
   286 00000181 89C2                            mov edx, eax
   287 00000183 81E20000FFFF                    and edx, 0xffff0000                     ;得到偏移地址高16位
   288 00000189 6609CA                          or  dx, cx                              ;组装属性部分到EDX
   289                                  
   290 0000018C 25FFFF0000                      and eax, 0x0000ffff                     ;得到偏移地址低16位
   291 00000191 C1E310                          shl ebx, 16
   292 00000194 09D8                            or  eax, ebx                            ;组装段选择子部分
   293                                  
   294 00000196 59                              pop ecx
   295 00000197 5B                              pop ebx
   296                                  
   297 00000198 CB                              retf
   298                                  
   299                                  ;-------------------------------------------------------------------------------
   300                                  allocate_a_4k_page:                             ;分配一个4KB的页
   301                                                                                  ;输入：无
   302                                                                                  ;输出：EAX=页的物理地址
   303 00000199 53                              push ebx
   304 0000019A 51                              push ecx
   305 0000019B 52                              push edx
   306                                  
   307 0000019C 31C0                            xor eax, eax
   308                                      .b1:
   309 0000019E 0FAB05[FE020000]                bts [page_bit_map], eax
   310 000001A5 7315                            jnc .b2
   311 000001A7 40                              inc eax
   312 000001A8 3D00020000                      cmp eax, page_map_len*8
   313 000001AD 7CEF                            jl  .b1
   314                                  
   315 000001AF BB[10080000]                    mov ebx, message_3
   316 000001B4 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   317 000001BB F4                              hlt                                     ;没有可以分配的页，停机
   318                                  
   319                                    .b2:
   320 000001BC C1E00C                          shl eax,12                              ;乘以4096（0x1000）
   321                                  
   322 000001BF 5A                              pop edx
   323 000001C0 59                              pop ecx
   324 000001C1 5B                              pop ebx
   325                                  
   326 000001C2 C3                              ret
   327                                  
   328                                  ;-------------------------------------------------------------------------------
   329                                  alloc_inst_a_page:                              ;分配一个页，并安装在当前活动的
   330                                                                                  ;层级分页结构中
   331                                                                                  ;输入：EBX=页的线性地址
   332 000001C3 50                              push eax
   333 000001C4 53                              push ebx
   334 000001C5 56                              push esi
   335                                  
   336                                          ;检查该线性地址所对应的页表是否存在
   337 000001C6 89DE                            mov esi, ebx
   338 000001C8 81E60000C0FF                    and esi, 0xffc00000
   339 000001CE C1EE14                          shr esi, 20                             ;得到页目录索引，并乘以4
   340 000001D1 81CE00F0FFFF                    or  esi, 0xfffff000                     ;页目录自身的线性地址+表内偏移
   341                                  
   342 000001D7 F70601000000                    test dword [esi], 0x00000001            ;P位是否为“1”。检查该线性地址是
   343 000001DD 750A                            jnz .b1                                 ;否已经有对应的页表
   344                                  
   345                                          ;创建该线性地址所对应的页表
   346 000001DF E8B5FFFFFF                      call allocate_a_4k_page                 ;分配一个页做为页表
   347 000001E4 83C807                          or  eax, 0x00000007
   348 000001E7 8906                            mov [esi], eax                          ;在页目录中登记该页表
   349                                  
   350                                      .b1:
   351                                          ;开始访问该线性地址所对应的页表
   352 000001E9 89DE                            mov esi, ebx
   353 000001EB C1EE0A                          shr esi, 10
   354 000001EE 81E600F03F00                    and esi, 0x003ff000                     ;或者0xfffff000，因高10位是零
   355 000001F4 81CE0000C0FF                    or  esi, 0xffc00000                     ;得到该页表的线性地址
   356                                  
   357                                          ;得到该线性地址在页表内的对应条目（页表项）
   358 000001FA 81E300F03F00                    and ebx, 0x003ff000
   359 00000200 C1EB0A                          shr ebx, 10                             ;相当于右移12位，再乘以4
   360 00000203 09DE                            or  esi, ebx                            ;页表项的线性地址
   361 00000205 E88FFFFFFF                      call allocate_a_4k_page                 ;分配一个页，这才是要安装的页
   362 0000020A 83C807                          or  eax, 0x00000007
   363 0000020D 8906                            mov [esi], eax
   364                                  
   365 0000020F 5E                              pop esi
   366 00000210 5B                              pop ebx
   367 00000211 58                              pop eax
   368                                  
   369 00000212 CB                              retf
   370                                  ;-------------------------------------------------------------------------------
   371                                  create_copy_cur_pdir:                           ;创建新页目录，并复制当前页目录内容
   372                                                                                  ;输入：无
   373                                                                                  ;输出：EAX=新页目录的物理地址
   374 00000213 56                              push esi
   375 00000214 57                              push edi
   376 00000215 53                              push ebx
   377 00000216 51                              push ecx
   378                                  
   379 00000217 E87DFFFFFF                      call allocate_a_4k_page
   380 0000021C 89C3                            mov ebx, eax
   381 0000021E 83CB07                          or  ebx, 0x00000007
   382 00000221 891DF8FFFFFF                    mov [0xfffffff8], ebx
   383                                  
   384 00000227 0F013DF8FFFFFF                  invlpg [0xfffffff8]                     ;刷新单个 TLB
   385                                  
   386 0000022E BE00F0FFFF                      mov esi, 0xfffff000                     ;ESI->当前页目录的线性地址
   387 00000233 BF00E0FFFF                      mov edi, 0xffffe000                     ;EDI->新页目录的线性地址
   388 00000238 B900040000                      mov ecx, 1024                           ;ECX=要复制的目录项数
   389 0000023D FC                              cld
   390 0000023E F3A5                            repe movsd
   391                                  
   392 00000240 59                              pop ecx
   393 00000241 5B                              pop ebx
   394 00000242 5F                              pop edi
   395 00000243 5E                              pop esi
   396                                  
   397 00000244 CB                              retf
   398                                  
   399                                  ;-------------------------------------------------------------------------------
   400                                  general_interrupt_handler:                      ;通用的中断处理过程
   401 00000245 50                              push eax
   402                                  
   403 00000246 B020                            mov al, 0x20                            ;中断结束命令EOI
   404 00000248 E6A0                            out 0xa0, al                            ;向从片发送
   405 0000024A E620                            out 0x20, al                            ;向主片发送
   406                                  
   407 0000024C 58                              pop eax
   408                                  
   409 0000024D CF                              iretd
   410                                  ;-------------------------------------------------------------------------------
   411                                  general_exception_handler:                      ;通用的异常处理过程
   412 0000024E BB[56070000]                    mov ebx, excep_msg
   413 00000253 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   414                                  
   415 0000025A F4                              hlt
   416                                  ;-------------------------------------------------------------------------------
   417                                  rtm_0x70_interrupt_handle:                      ;实时时钟中断处理过程
   418                                  
   419 0000025B 60                              pushad
   420                                  
   421 0000025C B020                            mov al, 0x20                            ;中断结束命令EOI
   422 0000025E E6A0                            out 0xa0, al                            ;向8259A从片发送
   423 00000260 E620                            out 0x20, al                            ;向8259A主片发送
   424                                  
   425 00000262 B00C                            mov al, 0x0c                            ;寄存器C的索引。且开放NMI
   426 00000264 E670                            out 0x70, al
   427 00000266 E471                            in  al, 0x71                            ;读一下RTC的寄存器C，否则只发生一次中断
   428                                                                                  ;此处不考虑闹钟和周期性中断的情况
   429                                          ;找当前任务（状态为忙的任务）在链表中的位置
   430 00000268 B8[DA020000]                    mov eax, tcb_chain
   431                                      .b0:                                        ;EAX=链表头或当前TCB线性地址
   432 0000026D 8B18                            mov ebx, [eax]                          ;EBX=下一个TCB线性地址
   433 0000026F 09DB                            or  ebx, ebx
   434 00000271 743E                            jz  .irtn                               ;链表为空，或已到末尾，从中断返回
   435 00000273 66837B04FF                      cmp word [ebx+0x04], 0xffff             ;是忙任务（当前任务）？
   436 00000278 7404                            je  .b1
   437 0000027A 89D8                            mov eax, ebx                            ;定位到下一个TCB（的线性地址）
   438 0000027C EBEF                            jmp .b0
   439                                  
   440                                          ;将当前为忙的任务移到链尾
   441                                      .b1:
   442 0000027E 8B0B                            mov ecx, [ebx]                          ;下游TCB的线性地址
   443 00000280 8908                            mov [eax], ecx                          ;将当前任务从链中拆除
   444                                  
   445                                      .b2:                                        ;此时，EBX=当前任务的线性地址
   446 00000282 8B10                            mov edx, [eax]
   447 00000284 09D2                            or  edx, edx                            ;已到链表尾端?
   448 00000286 7404                            jz  .b3
   449 00000288 89D0                            mov eax, edx
   450 0000028A EBF6                            jmp .b2
   451                                  
   452                                      .b3:
   453 0000028C 8918                            mov [eax], ebx                          ;将忙任务的TCB挂在链表尾端
   454 0000028E C70300000000                    mov dword [ebx], 0x00000000             ;将忙任务的TCB标记为链尾
   455                                  
   456                                          ;从链首搜索第一个空闲任务
   457 00000294 B8[DA020000]                    mov eax, tcb_chain
   458                                      .b4:
   459 00000299 8B00                            mov eax, [eax]
   460 0000029B 09C0                            or  eax, eax                            ;已到链尾（未发现空闲任务）
   461 0000029D 7412                            jz .irtn                                ;未发现空闲任务，从中断返回
   462 0000029F 6683780400                      cmp word [eax+0x04], 0x0000             ;是空闲任务？
   463 000002A4 75F3                            jnz .b4
   464                                  
   465                                          ;将空闲任务和当前任务的状态都取反
   466 000002A6 66F75004                        not word [eax+0x04]                     ;设置空闲任务的状态为忙
   467 000002AA 66F75304                        not word [ebx+0x04]                     ;设置当前任务（忙）的状态为空闲
   468 000002AE FF6814                          jmp far [eax+0x14]                      ;任务切换
   469                                  
   470                                      .irtn:
   471 000002B1 61                              popad
   472                                  
   473 000002B2 CF                              iretd
   474                                  ;-------------------------------------------------------------------------------
   475                                  terminate_current_task:                         ;终止当前任务
   476                                                                                  ;注意，执行此例程时，当前任务仍在
   477                                                                                  ;运行中。此例程其实也是当前任务的
   478                                                                                  ;一部分
   479                                  
   480                                          ;找当前任务（状态为忙的任务）在链表中的位置
   481 000002B3 B8[DA020000]                    mov eax, tcb_chain
   482                                      .b0:                                        ;EAX=链表头或当前TCB线性地址
   483 000002B8 8B18                            mov ebx, [eax]                          ;EBX=下一个TCB线性地址
   484 000002BA 66837B04FF                      cmp word [ebx+0x04], 0xffff             ;是忙任务（当前任务）？
   485 000002BF 7404                            je  .b1
   486 000002C1 89D8                            mov eax, ebx                            ;定位到下一个TCB（的线性地址）
   487 000002C3 EBF3                            jmp .b0
   488                                  
   489                                      .b1:
   490 000002C5 66C743043333                    mov word [ebx+0x04], 0x3333             ;修改当前任务的状态未"退出"
   491                                      .b2:
   492 000002CB F4                              hlt                                     ;停机，等待程序管理器恢复运行时，
   493                                                                                  ;将其回收
   494 000002CC EBFD                            jmp .b2
   495                                  ;-------------------------------------------------------------------------------
   496 000002CE 0000                            pgdt            dw 0                    ;用于设置和修改GDT
   497 000002D0 00000000                                        dd 0
   498                                  
   499 000002D4 0000                            pidt            dw  0
   500 000002D6 00000000                                        dd  0
   501                                  
   502                                          ;任务控制块链
   503 000002DA 00000000                        tcb_chain       dd  0
   504                                  
   505 000002DE 00<rep 20h>                     core_tcb  times 32  db 0         ;内核（程序管理器）的TCB
   506                                  
   507 000002FE FFFFFFFFFFFF5555                page_bit_map    db  0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55
   508 00000306 FFFFFFFFFFFFFFFF                                db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   509 0000030E FFFFFFFFFFFFFFFF                                db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   510 00000316 FFFFFFFFFFFFFFFF                                db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
   511 0000031E 5555555555555555                                db  0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55
   512 00000326 0000000000000000                                db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   513 0000032E 0000000000000000                                db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   514 00000336 0000000000000000                                db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
   515                                          page_map_len    equ $-page_bit_map
   516                                  
   517                                          ;符号地址检索表
   518                                          salt:
   519 0000033E 405072696E74537472-             salt_1          db  '@PrintString'
   519 00000347 696E67             
   520 0000034A 00<rep F4h>                                 times 256-($-salt_1) db 0
   521 0000043E [08000000]                                      dd  put_string
   522 00000442 0800                                            dw  flat_4gb_code_seg_sel
   523                                  
   524 00000444 40526561644469736B-             salt_2          db  '@ReadDiskData'
   524 0000044D 44617461           
   525 00000451 00<rep F3h>                                 times 256-($-salt_2) db 0
   526 00000544 [B4000000]                                      dd  read_hard_disk_0
   527 00000548 0800                                            dw  flat_4gb_code_seg_sel
   528                                  
   529 0000054A 405072696E7444776F-             salt_3          db  '@PrintDwordAsHexString'
   529 00000553 726441734865785374-
   529 0000055C 72696E67           
   530 00000560 00<rep EAh>                                 times 256-($-salt_3) db 0
   531 0000064A [FB000000]                                      dd  put_hex_dword
   532 0000064E 0800                                            dw  flat_4gb_code_seg_sel
   533                                  
   534 00000650 405465726D696E6174-             salt_4          db  '@TerminateProgram'
   534 00000659 6550726F6772616D   
   535 00000661 00<rep EFh>                                 times 256-($-salt_4) db 0
   536 00000750 [B3020000]                                      dd  terminate_current_task
   537 00000754 0800                                            dw  flat_4gb_code_seg_sel
   538                                  
   539                                          salt_item_len   equ $-salt_4
   540                                          salt_items      equ ($-salt)/salt_item_len
   541                                  
   542 00000756 2A2A2A2A2A2A2A2A45-             excep_msg       db  '********Exception encounted********',0
   542 0000075F 7863657074696F6E20-
   542 00000768 656E636F756E746564-
   542 00000771 2A2A2A2A2A2A2A2A00 
   543                                  
   544 0000077A 2020576F726B696E67-             message_0       db  '  Working in system core with protection '
   544 00000783 20696E207379737465-
   544 0000078C 6D20636F7265207769-
   544 00000795 74682070726F746563-
   544 0000079E 74696F6E20         
   545 000007A3 616E6420706167696E-                             db  'and paging are all enabled.System core is mapped '
   545 000007AC 672061726520616C6C-
   545 000007B5 20656E61626C65642E-
   545 000007BE 53797374656D20636F-
   545 000007C7 7265206973206D6170-
   545 000007D0 70656420           
   546 000007D4 746F20616464726573-                             db  'to address 0x80000000.',0x0d,0x0a,0
   546 000007DD 732030783830303030-
   546 000007E6 3030302E0D0A00     
   547                                  
   548 000007ED 202053797374656D20-             message_1       db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
   548 000007F6 776964652043414C4C-
   548 000007FF 2D47415445206D6F75-
   548 00000808 6E7465642E0D0A00   
   549                                  
   550 00000810 2A2A2A2A2A2A2A2A4E-             message_3       db  '********No more pages********',0
   550 00000819 6F206D6F7265207061-
   550 00000822 6765732A2A2A2A2A2A-
   550 0000082B 2A2A00             
   551                                  
   552 0000082E 202053797374656D20-             core_msg0       db  '  System core task running!',0x0d,0x0a,0
   552 00000837 636F7265207461736B-
   552 00000840 2072756E6E696E6721-
   552 00000849 0D0A00             
   553                                  
   554 0000084C 303132333435363738-             bin_hex         db '0123456789ABCDEF'   ;put_hex_dword子过程用的查找表
   554 00000855 39414243444546     
   555                                  
   556 0000085C 00<rep 200h>                    core_buf   times 512 db 0               ;内核用的缓冲区
   557                                  
   558 00000A5C 0D0A202000                      cpu_brnd0       db 0x0d,0x0a,'  ',0
   559 00000A61 00<rep 34h>                     cpu_brand  times 52 db 0
   560 00000A95 0D0A0D0A00                      cpu_brnd1       db 0x0d,0x0a,0x0d,0x0a,0
   561                                  
   562                                  ;-------------------------------------------------------------------------------
   563                                  fill_descriptor_in_ldt:                         ;在LDT内安装一个新的描述符
   564                                                                                  ;输入：EDX:EAX=描述符
   565                                                                                  ;          EBX=TCB基地址
   566                                                                                  ;输出：CX=描述符的选择子
   567 00000A9A 50                               push eax
   568 00000A9B 52                               push edx
   569 00000A9C 57                               push edi
   570                                  
   571 00000A9D 8B7B0C                           mov edi, [ebx+0x0c]                    ;获得LDT基地址
   572                                  
   573 00000AA0 31C9                             xor ecx, ecx
   574 00000AA2 668B4B0A                         mov cx, [ebx+0x0a]                     ;获得LDT界限
   575 00000AA6 6641                             inc cx                                 ;LDT的总字节数，即新描述符偏移地址
   576                                  
   577 00000AA8 89040F                           mov [edi+ecx+0x00], eax
   578 00000AAB 89540F04                         mov [edi+ecx+0x04], edx                ;安装描述符
   579                                  
   580 00000AAF 6683C108                         add cx, 8
   581 00000AB3 6649                             dec cx                                 ;得到新的LDT界限值
   582                                  
   583 00000AB5 66894B0A                         mov [ebx+0x0a], cx                     ;更新LDT界限值到TCB
   584                                  
   585 00000AB9 6689C8                           mov ax, cx
   586 00000ABC 6631D2                           xor dx, dx
   587 00000ABF 66B90800                         mov cx, 8
   588 00000AC3 66F7F1                           div cx
   589                                  
   590 00000AC6 6689C1                           mov cx, ax
   591 00000AC9 66C1E103                         shl cx, 3                              ;左移3位，并且
   592 00000ACD 6683C904                         or cx, 0000_0000_0000_0100B            ;使TI位=1，指向LDT，最后使RPL=00
   593                                  
   594 00000AD1 5F                               pop edi
   595 00000AD2 5A                               pop edx
   596 00000AD3 58                               pop eax
   597                                  
   598 00000AD4 C3                               ret
   599                                  
   600                                  ;-------------------------------------------------------------------------------
   601                                  load_relocate_program:                          ;加载并重定位用户程序
   602                                                                                  ;输入: PUSH 逻辑扇区号
   603                                                                                  ;      PUSH 任务控制块基地址
   604                                                                                  ;输出：无
   605 00000AD5 60                              pushad
   606                                  
   607 00000AD6 89E5                            mov ebp, esp                            ;为访问通过堆栈传递的参数做准备
   608                                  
   609                                          ;清空当前目录的前半部分（对应低2GB的局部地址空间）
   610 00000AD8 BB00F0FFFF                      mov ebx, 0xfffff000
   611 00000ADD 31F6                            xor esi, esi
   612                                      .b1:
   613 00000ADF C704B300000000                  mov dword [ebx+esi*4], 0x00000000
   614 00000AE6 46                              inc esi
   615 00000AE7 81FE00020000                    cmp esi, 512
   616 00000AED 7CF0                            jl .b1
   617                                  
   618 00000AEF 0F20D8                          mov eax, cr3
   619 00000AF2 0F22D8                          mov cr3, eax                            ;刷新TLB 页表缓存
   620                                  
   621                                          ;以下开始分配内存并加装用户程序
   622 00000AF5 8B4528                          mov eax, [ebp+40]                       ;从堆栈中取出用户的起始扇区号
   623 00000AF8 BB[5C080000]                    mov ebx, core_buf                       ;读取程序头部数据
   624 00000AFD 9A[B4000000]0800                call flat_4gb_code_seg_sel:read_hard_disk_0
   625                                  
   626                                          ;以下判断整个程序有多大
   627 00000B04 A1[5C080000]                    mov eax, [core_buf]                     ;程序尺寸
   628 00000B09 89C3                            mov ebx, eax
   629 00000B0B 81E300F0FFFF                    and ebx, 0xfffff000                     ;使之4KB对齐
   630 00000B11 81C300100000                    add ebx, 0x1000
   631 00000B17 A9FF0F0000                      test eax, 0x00000fff                    ;程序的大小正好是4KB的倍数吗?
   632 00000B1C 0F45C3                          cmovnz eax, ebx                         ;不是。使用凑整的结果
   633                                  
   634 00000B1F 89C1                            mov ecx, eax
   635 00000B21 C1E90C                          shr ecx, 12                             ;程序占用的总4KB页数
   636                                  
   637 00000B24 8B4528                          mov eax, [ebp+40]                       ;起始扇区号
   638 00000B27 8B7524                          mov esi, [ebp+36]                       ;从堆栈中取得TCB的基地址
   639                                      .b2:
   640                                          alloc_user_linear                       ;宏：在用户任务地址空间上分配内存
    15 00000B2A 8B5E06              <1>  mov ebx, [esi+0x06]
    16 00000B2D 81460600100000      <1>  add dword [esi+0x06], 0x1000
    17 00000B34 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   641                                  
   642 00000B3B 51                              push ecx
   643 00000B3C B908000000                      mov ecx, 8
   644                                      .b3:
   645 00000B41 9A[B4000000]0800                call flat_4gb_code_seg_sel:read_hard_disk_0
   646 00000B48 40                              inc eax
   647 00000B49 E2F6                            loop .b3
   648                                  
   649 00000B4B 59                              pop ecx
   650 00000B4C E2DC                            loop .b2
   651                                  
   652                                          ;在内核地址空间内创建用户任务的TSS
   653                                          alloc_core_linear                       ;宏：在内核的地址空间上分配内存
     9 00000B4E 8B1D[E4020000]      <1>  mov ebx, [core_tcb+0x06]
    10 00000B54 8105[E4020000]0010- <1>  add dword [core_tcb+0x06], 0x1000
    10 00000B5C 0000                <1>
    11 00000B5E 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   654                                                                                  ;用户任务的TSS必须在全局空间上分配
   655                                  
   656 00000B65 895E14                          mov [esi+0x14], ebx                     ;在TCB中填写TSS的线性地址
   657 00000B68 66C746126700                    mov word [esi+0x12], 103                ;在TCB中填写TSS的界限值
   658                                  
   659                                          ;在用户任务的局部地址空间内创建LDT
   660                                          alloc_user_linear                       ;宏：在用户任务地址空间上分配内存
    15 00000B6E 8B5E06              <1>  mov ebx, [esi+0x06]
    16 00000B71 81460600100000      <1>  add dword [esi+0x06], 0x1000
    17 00000B78 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   661                                  
   662 00000B7F 895E0C                          mov [esi+0x0c], ebx                     ;填写LDT线性地址到TCB中
   663                                  
   664                                          ;建立程序代码段描述符
   665 00000B82 B800000000                      mov eax, 0x00000000
   666 00000B87 BBFFFF0F00                      mov ebx, 0x000fffff
   667 00000B8C B900F8C000                      mov ecx, 0x00c0f800                     ;4KB粒度的代码段描述符，特权级3
   668 00000B91 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   669 00000B98 89F3                            mov ebx, esi                            ;TCB的基地址
   670 00000B9A E8FBFEFFFF                      call fill_descriptor_in_ldt
   671 00000B9F 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   672                                  
   673 00000BA3 8B5E14                          mov ebx, [esi+0x14]                     ;从TCB中获取TSS的线性地址
   674 00000BA6 66894B4C                        mov [ebx+76], cx                        ;填写TSS的CS域
   675                                  
   676                                          ;建立程序数据段描述符
   677 00000BAA B800000000                      mov eax, 0x00000000
   678 00000BAF BBFFFF0F00                      mov ebx, 0x000fffff
   679 00000BB4 B900F2C000                      mov ecx, 0x00c0f200                     ;4KB粒度的数据段描述符，特权级3
   680 00000BB9 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   681 00000BC0 89F3                            mov ebx, esi                            ;TCB的基地址
   682 00000BC2 E8D3FEFFFF                      call fill_descriptor_in_ldt
   683 00000BC7 6683C903                        or cx, 0000_0000_0000_0011B             ;设置选择子的特权级为3
   684                                  
   685 00000BCB 8B5E14                          mov ebx, [esi+0x14]                     ;从TCB中获取TSS的线性地址
   686 00000BCE 66894B54                        mov [ebx+84], cx                        ;填写TSS的DS域
   687 00000BD2 66894B48                        mov [ebx+72], cx                        ;填写TSS的ES域
   688 00000BD6 66894B58                        mov [ebx+88], cx                        ;填写TSS的FS域
   689 00000BDA 66894B5C                        mov [ebx+92], cx                        ;填写TSS的GS域
   690                                  
   691                                          ;将数据段作为用户任务的3特权级固有堆栈
   692                                          alloc_user_linear                       ;宏：在用户任务地址空间上分配内存
    15 00000BDE 8B5E06              <1>  mov ebx, [esi+0x06]
    16 00000BE1 81460600100000      <1>  add dword [esi+0x06], 0x1000
    17 00000BE8 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   693                                  
   694 00000BEF 8B5E14                          mov ebx, [esi+0x14]                     ;从TCB中获取TSS的线性地址
   695 00000BF2 66894B50                        mov [ebx+80], cx                        ;填写TSS的SS域
   696 00000BF6 8B5606                          mov edx, [esi+0x06]                     ;堆栈的高端线性地址
   697 00000BF9 895338                          mov [ebx+56], edx                       ;填写TSS的ESP域
   698                                  
   699                                  
   700                                          ;在用户任务的局部地址空间内创建0特权级堆栈
   701                                          alloc_user_linear                       ;宏：在用户任务地址空间上分配内存
    15 00000BFC 8B5E06              <1>  mov ebx, [esi+0x06]
    16 00000BFF 81460600100000      <1>  add dword [esi+0x06], 0x1000
    17 00000C06 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   702                                  
   703 00000C0D B800000000                      mov eax, 0x00000000
   704 00000C12 BBFFFF0F00                      mov ebx, 0x000fffff
   705 00000C17 B90092C000                      mov ecx, 0x00c09200                     ;4KB粒度的堆栈段描述符，特权级0
   706 00000C1C 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   707 00000C23 89F3                            mov ebx, esi                            ;TCB的基地址
   708 00000C25 E870FEFFFF                      call fill_descriptor_in_ldt
   709 00000C2A 6683C900                        or  cx, 0000_0000_0000_0000B            ;设置选择子的特权级为0
   710                                  
   711 00000C2E 8B5E14                          mov ebx, [esi+0x14]                     ;从TCB中获取TSS的线性地址
   712 00000C31 66894B08                        mov [ebx+8], cx                         ;填写TSS的SS0域
   713 00000C35 8B5606                          mov edx, [esi+0x06]                     ;堆栈的高端线性地址
   714 00000C38 895304                          mov [ebx+4], edx                        ;填写TSS的ESP0域
   715                                  
   716                                          ;在用户任务的局部地址空间内创建1特权级堆栈
   717                                          alloc_user_linear                       ;宏：在用户任务地址空间上分配内存
    15 00000C3B 8B5E06              <1>  mov ebx, [esi+0x06]
    16 00000C3E 81460600100000      <1>  add dword [esi+0x06], 0x1000
    17 00000C45 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   718                                  
   719 00000C4C B800000000                      mov eax, 0x00000000
   720 00000C51 BBFFFF0F00                      mov ebx, 0x000fffff
   721 00000C56 B900B2C000                      mov ecx, 0x00c0b200                     ;4KB粒度的堆栈段描述符，特权级1
   722 00000C5B 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   723 00000C62 89F3                            mov ebx, esi                            ;TCB的基地址
   724 00000C64 E831FEFFFF                      call fill_descriptor_in_ldt
   725 00000C69 6683C901                        or  cx, 0000_0000_0000_0001B            ;设置选择子的特权级为1
   726                                  
   727 00000C6D 8B5E14                          mov ebx, [esi+0x14]                     ;从TCB中获取TSS的线性地址
   728 00000C70 66894B10                        mov [ebx+16], cx                        ;填写TSS的SS1域
   729 00000C74 8B5606                          mov edx, [esi+0x06]                     ;堆栈的高端线性地址
   730 00000C77 89530C                          mov [ebx+12], edx                       ;填写TSS的ESP1域
   731                                  
   732                                          ;在用户任务的局部地址空间内创建2特权级堆栈
   733                                          alloc_user_linear                       ;宏：在用户任务地址空间上分配内存
    15 00000C7A 8B5E06              <1>  mov ebx, [esi+0x06]
    16 00000C7D 81460600100000      <1>  add dword [esi+0x06], 0x1000
    17 00000C84 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   734                                  
   735 00000C8B B800000000                      mov eax, 0x00000000
   736 00000C90 BBFFFF0F00                      mov ebx, 0x000fffff
   737 00000C95 B900D2C000                      mov ecx, 0x00c0d200                     ;4KB粒度的堆栈段描述符，特权级2
   738 00000C9A 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   739 00000CA1 89F3                            mov ebx, esi                            ;TCB的基地址
   740 00000CA3 E8F2FDFFFF                      call fill_descriptor_in_ldt
   741 00000CA8 6683C902                        or  cx, 0000_0000_0000_0010B            ;设置选择子的特权级为2
   742                                  
   743 00000CAC 8B5E14                          mov ebx, [esi+0x14]                     ;从TCB中获取TSS的线性地址
   744 00000CAF 66894B18                        mov [ebx+24], cx                        ;填写TSS的SS2域
   745 00000CB3 8B5606                          mov edx, [esi+0x06]                     ;堆栈的高端线性地址
   746 00000CB6 895314                          mov [ebx+20], edx                       ;填写TSS的ESP2域
   747                                  
   748                                  
   749                                          ;重定位U-SALT
   750 00000CB9 FC                              cld
   751                                  
   752 00000CBA 8B0D0C000000                    mov ecx, [0x0c]                         ;U-SALT条目数
   753 00000CC0 8B3D08000000                    mov edi, [0x08]                         ;U-SALT在4GB空间内的偏移
   754                                      .b4:
   755 00000CC6 51                              push ecx
   756 00000CC7 57                              push edi
   757                                  
   758 00000CC8 B904000000                      mov ecx, salt_items
   759 00000CCD BE[3E030000]                    mov esi, salt
   760                                      .b5:
   761 00000CD2 57                              push edi
   762 00000CD3 56                              push esi
   763 00000CD4 51                              push ecx
   764                                  
   765 00000CD5 B940000000                      mov ecx, 64                             ;检索表中，每条目的比较次数
   766 00000CDA F3A7                            repe cmpsd                              ;每次比较4字节
   767 00000CDC 7517                            jnz .b6
   768 00000CDE 8B06                            mov eax, [esi]                          ;若匹配，则esi恰好指向其后的地址
   769 00000CE0 898700FFFFFF                    mov [edi-256], eax                      ;将字符串改写成偏移地址
   770 00000CE6 668B4604                        mov ax, [esi+4]
   771 00000CEA 6683C803                        or  ax, 0000000000000011B               ;以用户程序自己的特权级使用调用门
   772                                                                                  ;故RPL=3
   773 00000CEE 66898704FFFFFF                  mov [edi-252], ax                       ;回填调用门选择子
   774                                      .b6:
   775                                  
   776 00000CF5 59                              pop ecx
   777 00000CF6 5E                              pop esi
   778 00000CF7 81C606010000                    add esi, salt_item_len
   779 00000CFD 5F                              pop edi                                 ;从头比较
   780 00000CFE E2D2                            loop .b5
   781                                  
   782 00000D00 5F                              pop edi
   783 00000D01 81C700010000                    add edi, 256
   784 00000D07 59                              pop ecx
   785 00000D08 E2BC                            loop .b4
   786                                  
   787                                          ;在GDT中登记LDT描述符
   788 00000D0A 8B7524                          mov esi, [ebp+36]                       ;从堆栈中取得TCB的基地址
   789 00000D0D 8B460C                          mov eax, [esi+0x0c]                     ;LDT的起始线性地址
   790 00000D10 0FB75E0A                        movzx ebx, word [esi+0x0a]              ;LDT段界限
   791 00000D14 B900824000                      mov ecx, 0x00408200                     ;LDT描述符，特权级0
   792 00000D19 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   793 00000D20 9A[1C010000]0800                call flat_4gb_code_seg_sel:set_up_gdt_descriptor
   794 00000D27 66894E10                        mov [esi+0x10], cx                      ;登记LDT选择子到TCB中
   795                                  
   796 00000D2B 8B5E14                          mov ebx, [esi+0x14]                     ;从TCB中获取TSS的线性地址
   797 00000D2E 66894B60                        mov [ebx+96], cx                        ;填写TSS的LDT域
   798                                  
   799 00000D32 66C7030000                      mov word [ebx+0], 0                     ;反向链=0
   800                                  
   801 00000D37 668B5612                        mov dx, [esi+0x12]                      ;段长度（界限）
   802 00000D3B 66895366                        mov [ebx+102], dx                       ;填写TSS的I/O位图偏移域
   803                                  
   804 00000D3F 66C743640000                    mov word [ebx+100], 0                   ;T=0
   805                                  
   806 00000D45 A104000000                      mov eax, [0x04]                         ;从任务的4GB地址空间获取入口点
   807 00000D4A 894320                          mov [ebx+32], eax                       ;填写TSS的EIP域
   808                                  
   809 00000D4D 9C                              pushfd
   810 00000D4E 5A                              pop edx
   811 00000D4F 895324                          mov [ebx+36], edx                       ;填写TSS的EFLAGS域
   812                                  
   813                                          ;在GDT中登记TSS描述符
   814 00000D52 8B4614                          mov eax, [esi+0x14]                     ;从TCB中获取TSS的起始线性地址
   815 00000D55 0FB75E12                        movzx ebx, word [esi+0x12]              ;段长度（界限）
   816 00000D59 B900894000                      mov ecx, 0x00408900                     ;TSS描述符，特权级0
   817 00000D5E 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   818 00000D65 9A[1C010000]0800                call flat_4gb_code_seg_sel:set_up_gdt_descriptor
   819 00000D6C 66894E18                        mov [esi+0x18], cx                      ;登记TSS选择子到TCB
   820                                  
   821                                          ;创建用户任务的页目录
   822                                          ;注意！页的分配和使用是由页位图决定的，可以不占用线性地址空间
   823 00000D70 9A[13020000]0800                call flat_4gb_code_seg_sel:create_copy_cur_pdir
   824 00000D77 8B5E14                          mov ebx, [esi+0x14]                     ;从TCB中获取TSS的线性地址
   825 00000D7A 89431C                          mov dword [ebx+28], eax                 ;填写TSS的CR3(PDBR)域
   826                                  
   827 00000D7D 61                              popad
   828                                  
   829 00000D7E C20800                          ret 8                                   ;丢弃调用本过程前压入的参数
   830                                  
   831                                  ;-------------------------------------------------------------------------------
   832                                  append_to_tcb_link:                             ;在TCB链上追加任务控制块
   833                                                                                  ;输入：ECX=TCB线性基地址
   834 00000D81 FA                              cli
   835                                  
   836 00000D82 50                              push eax
   837 00000D83 53                              push ebx
   838                                  
   839 00000D84 B8[DA020000]                    mov eax, tcb_chain
   840                                      .b0:                                        ;EAX=链表头或当前TCB线性地址
   841 00000D89 8B18                            mov ebx, [eax]                          ;EBX=下一个TCB线性地址
   842 00000D8B 09DB                            or  ebx, ebx
   843 00000D8D 7404                            jz .b1                                  ;链表为空，或已到末尾
   844 00000D8F 89D8                            mov eax, ebx                            ;定位到下一个TCB（的线性地址）
   845 00000D91 EBF6                            jmp .b0
   846                                  
   847                                      .b1:
   848 00000D93 8908                            mov [eax], ecx
   849 00000D95 C70100000000                    mov dword [ecx], 0x00000000             ;当前TCB指针域清零，以指示这是最
   850                                                                                  ;后一个TCB
   851 00000D9B 5B                              pop ebx
   852 00000D9C 58                              pop eax
   853                                  
   854 00000D9D FB                              sti
   855                                  
   856 00000D9E C3                              ret
   857                                  ;-------------------------------------------------------------------------------
   858                                  start:
   859                                          ;创建中断描述符IDT
   860                                          ;在此之前，禁止调用put_string过程，以及任何含有sti指令的过程
   861                                  
   862                                          ;前20个向量是处理器异常使用的
   863 00000D9F B8[4E020000]                    mov eax, general_exception_handler      ;门代码在段内偏移地址
   864 00000DA4 66BB0800                        mov bx, flat_4gb_code_seg_sel           ;门代码所在段的选择子
   865 00000DA8 66B9008E                        mov cx, 0x8e00                          ;32位中断门，0特权级
   866 00000DAC 9A[7F010000]0800                call flat_4gb_code_seg_sel:make_gate_descriptor
   867                                  
   868 00000DB3 BB00F00180                      mov ebx, idt_linear_address             ;中断描述符表的线性地址
   869 00000DB8 31F6                            xor esi, esi
   870                                      .idt0:
   871 00000DBA 8904F3                          mov [ebx+esi*8], eax
   872 00000DBD 8954F304                        mov [ebx+esi*8+4], edx
   873 00000DC1 46                              inc esi
   874 00000DC2 83FE13                          cmp esi, 19                             ;安装前20个异常中断处理过程
   875 00000DC5 7EF3                            jle .idt0
   876                                  
   877                                          ;其余为保留或硬件使用的中断向量
   878 00000DC7 B8[45020000]                    mov eax, general_interrupt_handler      ;门代码在段内偏移地址
   879 00000DCC 66BB0800                        mov bx, flat_4gb_code_seg_sel           ;门代码所在段的选择子
   880 00000DD0 66B9008E                        mov cx, 0x8e00                          ;32位中断门，0特权级
   881 00000DD4 9A[7F010000]0800                call flat_4gb_code_seg_sel:make_gate_descriptor
   882                                  
   883 00000DDB BB00F00180                      mov ebx, idt_linear_address             ;中断描述符表的线性地址
   884                                      .idt1:
   885 00000DE0 8904F3                          mov [ebx+esi*8], eax
   886 00000DE3 8954F304                        mov [ebx+esi*8+4], edx
   887 00000DE7 46                              inc esi
   888 00000DE8 81FEFF000000                    cmp esi, 255                            ;安装普通的中断处理过程
   889 00000DEE 7EF0                            jle .idt1
   890                                  
   891                                          ;设置实时时钟中断处理过程
   892 00000DF0 B8[5B020000]                    mov eax, rtm_0x70_interrupt_handle      ;门代码在段内偏移地址
   893 00000DF5 66BB0800                        mov bx, flat_4gb_code_seg_sel           ;门代码所在段的选择子
   894 00000DF9 66B9008E                        mov cx, 0x8e00                          ;32位中断门，0特权级
   895 00000DFD 9A[7F010000]0800                call flat_4gb_code_seg_sel:make_gate_descriptor
   896                                  
   897 00000E04 BB00F00180                      mov ebx, idt_linear_address             ;中断描述符表的线性地址
   898 00000E09 898380030000                    mov [ebx+0x70*8], eax
   899 00000E0F 899384030000                    mov [ebx+0x70*8+4], edx
   900                                  
   901                                          ;准备开放中断
   902 00000E15 66C705[D4020000]FF-             mov word [pidt], 256*8-1                ;IDT的界限
   902 00000E1D 07                 
   903 00000E1E C705[D6020000]00F0-             mov dword [pidt+2], idt_linear_address
   903 00000E26 0180               
   904 00000E28 0F011D[D4020000]                lidt [pidt]                             ;加载中断描述符表寄存器IDTR
   905                                  
   906                                          ;设置8259A中断控制器
   907 00000E2F B011                            mov al, 0x11
   908 00000E31 E620                            out 0x20, al                            ;ICW1：边沿触发/级联方式
   909 00000E33 B020                            mov al, 0x20
   910 00000E35 E621                            out 0x21, al                            ;ICW2:起始中断向量
   911 00000E37 B004                            mov al, 0x04
   912 00000E39 E621                            out 0x21, al                            ;ICW3:从片级联到IR2
   913 00000E3B B001                            mov al, 0x01
   914 00000E3D E621                            out 0x21, al                            ;ICW4:非总线缓冲，全嵌套，正常EOI
   915                                  
   916 00000E3F B011                            mov al, 0x11
   917 00000E41 E6A0                            out 0xa0, al                            ;ICW1：边沿触发/级联方式
   918 00000E43 B070                            mov al, 0x70
   919 00000E45 E6A1                            out 0xa1, al                            ;ICW2:起始中断向量
   920 00000E47 B004                            mov al, 0x04
   921 00000E49 E6A1                            out 0xa1, al                            ;ICW3:从片级联到IR2
   922 00000E4B B001                            mov al, 0x01
   923 00000E4D E6A1                            out 0xa1, al                            ;ICW4:非总线缓冲，全嵌套，正常EOI
   924                                  
   925                                          ;设置和时钟中断相关的硬件
   926 00000E4F B00B                            mov al, 0x0b                            ;RTC寄存器B
   927 00000E51 0C80                            or  al, 0x80                            ;阻断NMI
   928 00000E53 E670                            out 0x70, al
   929 00000E55 B012                            mov al, 0x12                            ;设置寄存器B，禁止周期性中断，开放更
   930 00000E57 E671                            out 0x71, al                            ;新结束后中断，BCD码，24小时制
   931                                  
   932 00000E59 E4A1                            in  al, 0xa1                            ;读8259从片的IMR寄存器
   933 00000E5B 24FE                            and al, 0xfe                            ;清除bit 0(此位连接RTC)
   934 00000E5D E6A1                            out 0xa1, al                            ;写回此寄存器
   935                                  
   936 00000E5F B00C                            mov al, 0x0c
   937 00000E61 E670                            out 0x70, al
   938 00000E63 E471                            in  al, 0x71                            ;读RTC寄存器C，复位未决的中断状态
   939                                  
   940 00000E65 FB                              sti                                     ;开放硬件中断
   941                                  
   942 00000E66 BB[7A070000]                    mov ebx, message_0
   943 00000E6B 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   944                                  
   945                                          ;显示处理器品牌信息
   946 00000E72 B802000080                      mov eax, 0x80000002
   947 00000E77 0FA2                            cpuid
   948 00000E79 A3[610A0000]                    mov [cpu_brand + 0x00], eax
   949 00000E7E 891D[650A0000]                  mov [cpu_brand + 0x04], ebx
   950 00000E84 890D[690A0000]                  mov [cpu_brand + 0x08], ecx
   951 00000E8A 8915[6D0A0000]                  mov [cpu_brand + 0x0c], edx
   952                                  
   953 00000E90 B803000080                      mov eax, 0x80000003
   954 00000E95 0FA2                            cpuid
   955 00000E97 A3[710A0000]                    mov [cpu_brand + 0x10], eax
   956 00000E9C 891D[750A0000]                  mov [cpu_brand + 0x14], ebx
   957 00000EA2 890D[790A0000]                  mov [cpu_brand + 0x18], ecx
   958 00000EA8 8915[7D0A0000]                  mov [cpu_brand + 0x1c], edx
   959                                  
   960 00000EAE B804000080                      mov eax, 0x80000004
   961 00000EB3 0FA2                            cpuid
   962 00000EB5 A3[810A0000]                    mov [cpu_brand + 0x20], eax
   963 00000EBA 891D[850A0000]                  mov [cpu_brand + 0x24], ebx
   964 00000EC0 890D[890A0000]                  mov [cpu_brand + 0x28], ecx
   965 00000EC6 8915[8D0A0000]                  mov [cpu_brand + 0x2c], edx
   966                                  
   967 00000ECC BB[5C0A0000]                    mov ebx, cpu_brnd0                      ;显示处理器品牌信息
   968 00000ED1 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   969 00000ED8 BB[610A0000]                    mov ebx, cpu_brand
   970 00000EDD 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   971 00000EE4 BB[950A0000]                    mov ebx, cpu_brnd1
   972 00000EE9 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   973                                  
   974                                          ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
   975 00000EF0 BF[3E030000]                    mov edi, salt                           ;C-SALT表的起始位置
   976 00000EF5 B904000000                      mov ecx, salt_items                     ;C-SALT表的条目数量
   977                                      .b4:
   978 00000EFA 51                              push ecx
   979 00000EFB 8B8700010000                    mov eax, [edi+256]                      ;该条目入口点的32位偏移地址
   980 00000F01 668B9F04010000                  mov bx, [edi+260]                       ;该条目入口点的段选择子
   981 00000F08 66B900EC                        mov cx, 1_11_0_1100_000_00000B          ;特权级3的调用门(3以上的特权级才
   982                                                                                  ;允许访问)，0个参数(因为用寄存器
   983                                                                                  ;传递参数，而没有用栈)
   984 00000F0C 9A[7F010000]0800                call flat_4gb_code_seg_sel:make_gate_descriptor
   985 00000F13 9A[1C010000]0800                call flat_4gb_code_seg_sel:set_up_gdt_descriptor
   986 00000F1A 66898F04010000                  mov [edi+260], cx                       ;将返回的门描述符选择子回填
   987 00000F21 81C706010000                    add edi, salt_item_len                  ;指向下一个C-SALT条目
   988 00000F27 59                              pop ecx
   989 00000F28 E2D0                            loop .b4
   990                                  
   991                                          ;对门进行测试
   992 00000F2A BB[ED070000]                    mov ebx, message_1
   993 00000F2F FF1D[3E040000]                  call far [salt_1+256]                   ;通过门显示信息（偏移量忽略）
   994                                  
   995                                          ;初始化创建程序管理器任务的任务控制块TCB
   996 00000F35 66C705[E2020000]FF-             mov word [core_tcb+0x04], 0xffff        ;任务状态：忙碌
   996 00000F3D FF                 
   997 00000F3E C705[E4020000]0000-             mov dword [core_tcb+0x06], 0x80100000   ;内核虚拟空间的分配从这里开始
   997 00000F46 1080               
   998 00000F48 66C705[E8020000]FF-             mov word [core_tcb+0x0a], 0xffff        ;登记LDT初始的界限到TCB中（未使用）
   998 00000F50 FF                 
   999 00000F51 B9[DE020000]                    mov ecx, core_tcb
  1000 00000F56 E826FEFFFF                      call append_to_tcb_link                 ;将此TCB添加到TCB链中
  1001                                  
  1002                                          ;为程序管理器的TSS分配内存空间
  1003                                          alloc_core_linear                       ;宏：在内核的虚拟地址空间分配内存
     9 00000F5B 8B1D[E4020000]      <1>  mov ebx, [core_tcb+0x06]
    10 00000F61 8105[E4020000]0010- <1>  add dword [core_tcb+0x06], 0x1000
    10 00000F69 0000                <1>
    11 00000F6B 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
  1004                                  
  1005                                          ;在程序管理器的TSS中设置必要的条目
  1006 00000F72 66C7030000                      mov word [ebx+0], 0                     ;反向链=0
  1007 00000F77 0F20D8                          mov eax, cr3
  1008 00000F7A 89431C                          mov dword [ebx+28], eax                 ;登记CR3(PDBR)
  1009 00000F7D 66C743600000                    mov word [ebx+96], 0                    ;没有LDT。处理器允许没有LDT的任务。
  1010 00000F83 66C743640000                    mov word [ebx+100], 0                   ;T=0
  1011 00000F89 66C743666700                    mov word [ebx+102], 103                 ;没有I/O位图。0特权级事实上不需要。
  1012                                  
  1013                                          ;创建程序管理器的TSS描述符，并安装到GDT中
  1014 00000F8F 89D8                            mov eax, ebx                            ;TSS的起始线性地址
  1015 00000F91 BB67000000                      mov ebx, 103                            ;段长度（界限）
  1016 00000F96 B900894000                      mov ecx, 0x00408900                     ;TSS描述符，特权级0
  1017 00000F9B 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
  1018 00000FA2 9A[1C010000]0800                call flat_4gb_code_seg_sel:set_up_gdt_descriptor
  1019 00000FA9 66890D[F6020000]                mov [core_tcb+0x18], cx                 ;登记内核任务的TSS选择子到其TCB
  1020                                  
  1021                                          ;任务寄存器TR中的内容是任务存在的标志，该内容也决定了当前任务是谁。
  1022                                          ;下面的指令为当前正在执行的0特权级任务“程序管理器”后补手续（TSS）。
  1023 00000FB0 0F00D9                          ltr cx
  1024                                  
  1025                                          ;现在可认为“程序管理器”任务正执行中
  1026                                  
  1027                                          ;创建用户任务的任务控制块
  1028                                          alloc_core_linear                       ;宏：在内核的虚拟地址空间分配内存
     9 00000FB3 8B1D[E4020000]      <1>  mov ebx, [core_tcb+0x06]
    10 00000FB9 8105[E4020000]0010- <1>  add dword [core_tcb+0x06], 0x1000
    10 00000FC1 0000                <1>
    11 00000FC3 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
  1029                                  
  1030 00000FCA 66C743040000                    mov word [ebx+0x04], 0                  ;任务状态：空闲
  1031 00000FD0 C7430600000000                  mov dword [ebx+0x06], 0                 ;用户任务局部空间的分配从0开始。
  1032 00000FD7 66C7430AFFFF                    mov word [ebx+0x0a], 0xffff             ;登记LDT初始的界限到TCB中
  1033                                  
  1034 00000FDD 6A32                            push dword 50                           ;用户程序位于逻辑50扇区
  1035 00000FDF 53                              push ebx                                ;压入任务控制块起始线性地址
  1036 00000FE0 E8F0FAFFFF                      call load_relocate_program
  1037 00000FE5 89D9                            mov ecx, ebx
  1038 00000FE7 E895FDFFFF                      call append_to_tcb_link                 ;将此TCB添加到TCB链中
  1039                                  
  1040                                          ;创建用户任务的任务控制块
  1041                                          alloc_core_linear                       ;宏：在内核的虚拟地址空间分配内存
     9 00000FEC 8B1D[E4020000]      <1>  mov ebx, [core_tcb+0x06]
    10 00000FF2 8105[E4020000]0010- <1>  add dword [core_tcb+0x06], 0x1000
    10 00000FFA 0000                <1>
    11 00000FFC 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
  1042                                  
  1043 00001003 66C743040000                    mov word [ebx+0x04], 0                  ;任务状态：空闲
  1044 00001009 C7430600000000                  mov dword [ebx+0x06], 0                 ;用户任务局部空间的分配从0开始。
  1045 00001010 66C7430AFFFF                    mov word [ebx+0x0a], 0xffff             ;登记LDT初始的界限到TCB中
  1046                                  
  1047 00001016 6A64                            push dword 100                          ;用户程序位于逻辑100扇区
  1048 00001018 53                              push ebx                                ;压入任务控制块起始线性地址
  1049 00001019 E8B7FAFFFF                      call load_relocate_program
  1050 0000101E 89D9                            mov ecx, ebx
  1051 00001020 E85CFDFFFF                      call append_to_tcb_link                 ;将此TCB添加到TCB链中
  1052                                  
  1053                                      .core:
  1054 00001025 BB[2E080000]                    mov ebx, core_msg0
  1055 0000102A 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
  1056                                  
  1057                                          ;这里可以编写回收已终止任务内存的代码
  1058 00001031 EBF2                            jmp .core
  1059                                  
  1060                                  core_code_end:
  1061                                  
  1062                                  ;-------------------------------------------------------------------------------
  1063                                  SECTION core_trail
  1064                                  ;-------------------------------------------------------------------------------
  1065                                  core_end:
