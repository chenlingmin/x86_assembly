     1                                          core_base_address equ 0x00040000    ;常数，内核加载的起始内存地址
     2                                          core_start_sector equ 0x00000001    ;常数，内核的起始逻辑扇区号
     3                                  ;===============================================================================
     4                                  SECTION mbr vstart=0x00007c00
     5                                  
     6 00000000 8CC8                            mov ax, cs
     7 00000002 8ED0                            mov ss, ax
     8 00000004 BC007C                          mov sp, 0x7c00
     9                                  
    10                                          ;计算GDT所在的逻辑段地址
    11 00000007 2E66A1[6F01]                    mov eax, [cs:pgdt+0x02]             ;GDT的32位物理地址
    12 0000000C 6631D2                          xor edx, edx
    13 0000000F 66BB10000000                    mov ebx, 16
    14 00000015 66F7F3                          div ebx                             ;分解成16位的逻辑地址
    15                                  
    16 00000018 8ED8                            mov ds, eax                         ;令DS指向该段以进行操作
    17 0000001A 6689D3                          mov ebx, edx                        ;段内起始偏移地址
    18                                  
    19                                          ;跳过0#号描述符的槽位
    20                                          ;创建1#描述符，保护模式下的代码段描述符
    21 0000001D 6667C74308FFFF0000              mov dword [ebx+0x08], 0x0000ffff    ;基地址为0，界限为0xFFFFF,DPL=00
    22 00000026 6667C7430C0098CF00              mov dword [ebx+0x0c], 0x00cf9800    ;4KB粒度，代码段描述符，向上扩展
    23                                  
    24                                          ;创建2#描述符，保护模式下的数据段和堆栈段描述符
    25 0000002F 6667C74310FFFF0000              mov dword [ebx+0x10], 0x0000ffff    ;基地址为0，界限为0xFFFFF,DPL=00
    26 00000038 6667C743140092CF00              mov dword [ebx+0x14], 0x00cf9200    ;4KB粒度，数据段描述符，向上扩展
    27                                  
    28                                          ;初始化描述符表寄存器GDTR
    29 00000041 2EC706[6D01]1700                mov word [cs:pgdt], 23              ;描述符表的界限
    30                                  
    31 00000048 2E0F0116[6D01]                  lgdt [cs:pgdt]
    32                                  
    33 0000004E E492                            in al, 0x92                         ;南桥芯片内的端口
    34 00000050 0C02                            or al, 0000_0010B
    35 00000052 E692                            out 0x92, al                        ;打开A20
    36                                  
    37 00000054 FA                              cli                                 ;中断机制尚未工作
    38                                  
    39 00000055 0F20C0                          mov eax, cr0
    40 00000058 6683C801                        or  eax, 1
    41 0000005C 0F22C0                          mov cr0, eax                        ;设置PE位
    42                                  
    43                                          ;以下进入保护模式......
    44 0000005F 66EA[67000000]0800              jmp dword 0x0008:flush              ;16位的描述符选择子：32位偏移
    45                                                                              ;清空流水线并串行化处理器
    46                                          [bits 32]
    47                                      flush:
    48 00000067 B810000000                      mov eax, 0x00010                    ;加载数据段（4GB）选择子
    49 0000006C 8ED8                            mov ds, eax
    50 0000006E 8EC0                            mov es, eax
    51 00000070 8EE0                            mov fs, eax
    52 00000072 8EE8                            mov gs, eax
    53 00000074 8ED0                            mov ss, eax                         ;加载堆栈段（4GB）选择子
    54 00000076 BC00700000                      mov esp, 0x7000                     ;堆栈指针
    55                                  
    56                                          ;以下加载系统核心程序
    57 0000007B BF00000400                      mov edi, core_base_address
    58                                  
    59 00000080 B801000000                      mov eax, core_start_sector
    60 00000085 89FB                            mov ebx, edi                        ;起始地址
    61 00000087 E89C000000                      call read_hard_disk_0               ;以下读取程序的起始部分（一个扇区）
    62                                  
    63                                          ;以下判断整个程序有多大
    64 0000008C 8B07                            mov eax, [edi]                      ;核心程序尺寸
    65 0000008E 31D2                            xor edx, edx
    66 00000090 B900020000                      mov ecx, 512                        ;512字节每扇区
    67 00000095 F7F1                            div ecx
    68                                  
    69 00000097 09D2                            or  edx, edx
    70 00000099 7501                            jnz @1                              ;未除尽，因此结果比实际扇区数少1
    71 0000009B 48                              dec eax                             ;已经读了一个扇区，扇区总数减1
    72                                      @1:
    73 0000009C 09C0                            or  eax, eax                        ;考虑实际长度≤512个字节的情况
    74 0000009E 7410                            jz pge                              ;EAX=0 ?
    75                                  
    76                                          ;读取剩余的扇区
    77 000000A0 89C1                            mov ecx, eax                        ;32位模式下的LOOP使用ECX
    78 000000A2 B801000000                      mov eax, core_start_sector
    79 000000A7 40                              inc eax                             ;从下一个逻辑扇区接着读
    80                                      @2:
    81 000000A8 E87B000000                      call read_hard_disk_0
    82 000000AD 40                              inc eax
    83 000000AE E2F8                            loop @2                             ;循环读，直到读完整个内核
    84                                  
    85                                      pge:
    86                                          ;准备打开分页机制。从此，再也不用在段之间转来转去，实在晕乎~
    87                                  
    88                                          ;创建系统内核的页目录PDT
    89 000000B0 BB00000200                      mov ebx, 0x00020000                 ;页目录表PDT的物理地址
    90                                  
    91                                          ;在页目录内创建指向页目录表自己的目录项
    92 000000B5 C783FC0F0000030002-             mov dword [ebx+4092], 0x00020003
    92 000000BE 00                 
    93                                  
    94 000000BF BA03100200                      mov edx, 0x00021003                 ;MBR空间有限，后面尽量不使用立即数
    95                                          ;在页目录内创建与线性地址0x00000000对应的目录项
    96 000000C4 8913                            mov [ebx+0x000], edx                ;写入目录项（页表的物理地址和属性）
    97                                                                              ;此目录项仅用于过渡
    98                                          ;在页目录内创建与线性地址0x80000000对应的目录项
    99 000000C6 899300080000                    mov [ebx+0x800], edx                ;写入目录项（页表的物理地址和属性）
   100                                  
   101                                          ;创建与上面那个目录项目对应的页表，初始化页表项
   102 000000CC BB00100200                      mov ebx, 0x00021000                 ;页表的物理地址
   103 000000D1 31C0                            xor eax, eax                        ;起始页的物理地址
   104 000000D3 31F6                            xor esi, esi
   105                                      .b1:
   106 000000D5 89C2                            mov edx, eax
   107 000000D7 83CA03                          or  edx, 0x00000003
   108 000000DA 8914B3                          mov [ebx+esi*4], edx                ;登记页的物理地址
   109 000000DD 0500100000                      add eax, 0x1000                     ;下一个相邻页的物理地址
   110 000000E2 46                              inc esi
   111 000000E3 81FE00010000                    cmp esi, 256                        ;仅低端1MB内存对应的页才是有效的
   112 000000E9 7CEA                            jl  .b1
   113                                  
   114                                          ;令CR3寄存器指向页目录，并正式开启页功能
   115 000000EB B800000200                      mov eax, 0x00020000                 ;PCD=PWT=0
   116 000000F0 0F22D8                          mov cr3, eax
   117                                  
   118                                          ;将GDT的线性地址映射到从0x80000000开始的相同位置
   119 000000F3 0F0105[6D010000]                sgdt [pgdt]
   120 000000FA 8B1D[6F010000]                  mov ebx, [pgdt+2]
   121 00000100 8105[6F010000]0000-             add dword [pgdt+2], 0x80000000      ;GDTR也用的是线性地址
   121 00000108 0080               
   122 0000010A 0F0115[6D010000]                lgdt [pgdt]
   123                                  
   124 00000111 0F20C0                          mov eax, cr0
   125 00000114 0D00000080                      or  eax, 0x80000000
   126 00000119 0F22C0                          mov cr0, eax                        ;开启分页机制
   127                                  
   128                                          ;将堆栈映射到高端，这是非常容易被忽略的一件事。应当把内核的所有东西
   129                                          ;都移到高端，否则，一定会和正在加载的用户任务局部空间里的内容冲突，
   130                                          ;而且很难想到问题会出在这里。
   131 0000011C 81C400000080                    add esp, 0x80000000
   132                                  
   133 00000122 FF2504000480                    jmp [0x80040004]
   134                                  
   135                                  ;-------------------------------------------------------------------------------
   136                                  read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区
   137                                                                              ;EAX=逻辑扇区号
   138                                                                              ;DS:EBX=目标缓冲区地址
   139                                                                              ;返回：EBX=EBX+512
   140 00000128 50                              push eax
   141 00000129 51                              push ecx
   142 0000012A 52                              push edx
   143                                  
   144 0000012B 50                              push eax
   145                                  
   146 0000012C 66BAF201                        mov dx, 0x1f2
   147 00000130 B001                            mov al, 1
   148 00000132 EE                              out dx, al                          ;读取的扇区数
   149                                  
   150 00000133 6642                            inc dx                              ;0x1f3
   151 00000135 58                              pop eax
   152 00000136 EE                              out dx, al                          ;LBA地址7~0
   153                                  
   154 00000137 6642                            inc dx                              ;0x1f4
   155 00000139 B108                            mov cl, 8
   156 0000013B D3E8                            shr eax, cl
   157 0000013D EE                              out dx, al                          ;LBA地址15~8
   158                                  
   159 0000013E 6642                            inc dx                              ;0x1f5
   160 00000140 D3E8                            shr eax, cl
   161 00000142 EE                              out dx, al                          ;LBA地址23~16
   162                                  
   163 00000143 6642                            inc dx                              ;0x1f6
   164 00000145 D3E8                            shr eax, cl
   165 00000147 0CE0                            or  al, 0xe0                        ;第一硬盘  LBA地址27~24
   166 00000149 EE                              out dx, al
   167                                  
   168 0000014A 6642                            inc dx                              ;0x1f7
   169 0000014C B020                            mov al, 0x20                        ;读命令
   170 0000014E EE                              out dx, al
   171                                  
   172                                      .waits:
   173 0000014F EC                              in  al, dx
   174 00000150 2488                            and al, 0x88
   175 00000152 3C08                            cmp al, 0x08
   176 00000154 75F9                            jnz .waits                          ;不忙，且硬盘已准备好数据传输
   177                                  
   178 00000156 B900010000                      mov ecx, 256                        ;总共要读取的字数
   179 0000015B 66BAF001                        mov dx, 0x1f0
   180                                      .readw:
   181 0000015F 66ED                             in ax, dx
   182 00000161 668903                           mov [ebx], ax
   183 00000164 83C302                           add ebx, 2
   184 00000167 E2F6                             loop .readw
   185                                  
   186 00000169 5A                               pop edx
   187 0000016A 59                               pop ecx
   188 0000016B 58                               pop eax
   189                                  
   190 0000016C C3                               ret
   191                                  
   192                                  ;-------------------------------------------------------------------------------
   193 0000016D 0000                            pgdt                dw 0
   194 0000016F 00800000                                            dd 0x00008000   ;GDT的物理地址/线性地址
   195                                  ;-------------------------------------------------------------------------------
   196 00000173 00<rep 8Bh>                     times 510-($-$$)    db 0
   197 000001FE 55AA                                                db 0x55, 0xaa
