     1                                  SECTION header vstart=0                     ;定义用户程序头部段
     2 00000000 [00000000]                  program_length  dd program_end          ;程序总长度[0x00]
     3                                  
     4                                      ;用户程序入口点
     5 00000004 [A000]                      code_entry      dw start                ;偏移地址[0x04]
     6 00000006 [00000000]                                  dd section.code_1.start ;段地址[0x06]
     7                                  
     8 0000000A 0500                        realloc_tbl_len dw (header_end-code_1_segment)/4
     9                                                                              ;段重定位表项个数[0x0a]
    10                                  
    11                                      ;段重定位表
    12 0000000C [00000000]                  code_1_segment  dd section.code_1.start ;[0x0c]
    13 00000010 [00000000]                  code_2_segment  dd section.code_2.start ;[0x10]
    14 00000014 [00000000]                  data_1_segment  dd section.data_1.start ;[0x14]
    15 00000018 [00000000]                  data_2_segment  dd section.data_2.start ;[0x18]
    16 0000001C [00000000]                  stack_segment   dd section.stack.start  ;[0x1c]
    17                                  
    18                                      header_end:
    19                                  
    20                                  ;=================================================================================
    21                                  SECTION code_1 align=16 vstart=0            ;定义代码段(16字节对齐)
    22                                  put_string:                                 ;显示串（0结尾）
    23                                                                              ;输入：DS:BX=串地址
    24 00000000 8A0F                            mov cl, [bx]
    25 00000002 08C9                            or  cl, cl                          ;cl=0 ?
    26 00000004 7406                            jz .exit                            ;是的，返回主程序
    27 00000006 E80400                          call put_char
    28 00000009 43                              inc bx                              ;下一个字符
    29 0000000A EBF4                            jmp put_string
    30                                  
    31                                      .exit:
    32 0000000C C3                              ret
    33                                  
    34                                  ;---------------------------------------------------------------------------------
    35                                  put_char:                                   ;显示一个字符
    36                                                                              ;输入：cl=字符ascii
    37 0000000D 50                              push ax
    38 0000000E 53                              push bx
    39 0000000F 51                              push cx
    40 00000010 52                              push dx
    41 00000011 1E                              push ds
    42 00000012 06                              push es
    43                                  
    44                                          ;以下取当前光标位置
    45 00000013 BAD403                          mov dx, 0x3d4
    46 00000016 B00E                            mov al, 0x0e
    47 00000018 EE                              out dx, al
    48 00000019 BAD503                          mov dx, 0x3d5
    49 0000001C EC                              in  al, dx                          ;高8位
    50 0000001D 88C4                            mov ah, al
    51                                  
    52 0000001F BAD403                          mov dx, 0x3d4
    53 00000022 B00F                            mov al, 0x0f
    54 00000024 EE                              out dx, al
    55 00000025 BAD503                          mov dx, 0x3d5
    56 00000028 EC                              in  al, dx                          ;低8位
    57 00000029 89C3                            mov bx, ax                          ;BX=代表光标位置的16位数
    58                                  
    59 0000002B 80F90D                          cmp cl, 0x0d                        ;回车符？
    60 0000002E 750C                            jnz .put_0a                         ;不是。看看是不是换行等字符
    61 00000030 89D8                            mov ax, bx
    62 00000032 B350                            mov bl, 80
    63 00000034 F6F3                            div bl
    64 00000036 F6E3                            mul bl
    65 00000038 89C3                            mov bx, ax
    66 0000003A EB45                            jmp .set_cursor
    67                                  
    68                                      .put_0a:
    69 0000003C 80F90A                          cmp cl, 0x0a                        ;换行符？
    70 0000003F 7505                            jnz .put_other                      ;不是，正常显示字符
    71 00000041 83C350                          add bx, 80
    72 00000044 EB0F                            jmp .roll_screen
    73                                  
    74                                      .put_other:                             ;正常显示字符
    75 00000046 B800B8                          mov ax, 0xb800
    76 00000049 8EC0                            mov es, ax
    77 0000004B D1E3                            shl bx, 1
    78 0000004D 26880F                          mov [es:bx], cl
    79                                  
    80                                          ;以下将光标位置推进一个字符
    81 00000050 D1EB                            shr bx, 1
    82 00000052 83C301                          add bx, 1
    83                                  
    84                                      .roll_screen:
    85 00000055 81FBD007                        cmp bx, 2000                        ;光标超出屏幕？滚屏
    86 00000059 7C26                            jl .set_cursor
    87                                  
    88 0000005B B800B8                          mov ax, 0xb800
    89 0000005E 8ED8                            mov ds, ax
    90 00000060 8EC0                            mov es, ax
    91 00000062 FC                              cld
    92 00000063 BEA000                          mov si, 0xa0
    93 00000066 BF0000                          mov di, 0x00
    94 00000069 B98007                          mov cx, 1920
    95 0000006C F3A5                            rep movsw
    96 0000006E BB000F                          mov bx, 3840                        ;清除屏幕最底一行
    97 00000071 B95000                          mov cx, 80
    98                                      .cls:
    99 00000074 26C7072007                      mov word[es:bx], 0x0720             ;空格
   100 00000079 83C302                          add bx, 2
   101 0000007C E2F6                            loop .cls
   102                                  
   103 0000007E BB8007                          mov bx, 1920
   104                                  
   105                                      .set_cursor:
   106 00000081 BAD403                          mov dx, 0x3d4
   107 00000084 B00E                            mov al, 0x0e
   108 00000086 EE                              out dx, al
   109 00000087 BAD503                          mov dx, 0x3d5
   110 0000008A 88F8                            mov al, bh
   111 0000008C EE                              out dx, al
   112 0000008D BAD403                          mov dx, 0x3d4
   113 00000090 B00F                            mov al, 0x0f
   114 00000092 EE                              out dx, al
   115 00000093 BAD503                          mov dx, 0x3d5
   116 00000096 88D8                            mov al, bl
   117 00000098 EE                              out dx, al
   118                                  
   119 00000099 07                              pop es
   120 0000009A 1F                              pop ds
   121 0000009B 5A                              pop dx
   122 0000009C 59                              pop cx
   123 0000009D 5B                              pop bx
   124 0000009E 58                              pop ax
   125                                  
   126 0000009F C3                              ret
   127                                  
   128                                  ;---------------------------------------------------------------------------------
   129                                      start:
   130                                          ;初始执行时，DS ES 指向用户程序头部段
   131 000000A0 A1[1C00]                        mov ax, [stack_segment]             ;设置到用户程序自己的堆栈
   132 000000A3 8ED0                            mov ss, ax
   133 000000A5 BC[0001]                        mov sp, stack_end
   134                                  
   135 000000A8 A1[1400]                        mov ax, [data_1_segment]            ;设置到用户程序自己的数据段
   136 000000AB 8ED8                            mov ds, ax
   137                                  
   138 000000AD BB[0000]                        mov bx, msg0
   139 000000B0 E84DFF                          call put_string                     ;显示第一段信息
   140                                  
   141 000000B3 26FF36[1000]                    push word [es:code_2_segment]
   142 000000B8 B8[0000]                        mov ax, begin
   143 000000BB 50                              push ax
   144                                  
   145 000000BC CB                              retf                                ;转移到代码段2执行
   146                                      continue:
   147 000000BD 26A1[1800]                      mov ax, [es:data_2_segment]         ;段寄存器DS切换到数据段2
   148 000000C1 8ED8                            mov ds, ax
   149                                  
   150 000000C3 BB[0000]                        mov bx, msg1
   151 000000C6 E837FF                          call put_string                     ;显示第二段信息
   152                                  
   153 000000C9 EBFE                            jmp $
   154                                  
   155                                  ;=================================================================================
   156                                  
   157                                  SECTION code_2 align=16 vstart=0            ;定义代码段(16字节对齐)
   158                                  
   159                                      begin:
   160 00000000 26FF36[0C00]                    push word [es:code_1_segment]
   161 00000005 B8[BD00]                        mov ax, continue
   162 00000008 50                              push ax
   163                                  
   164 00000009 CB                              retf                                ;转移到代码段1接着执行
   165                                  
   166                                  ;=================================================================================
   167                                  SECTION data_1 align=16 vstart=0
   168                                  
   169 00000000 202054686973206973-         msg0 db '  This is NASM - the famous Netwide Assembler. '
   169 00000009 204E41534D202D2074-
   169 00000012 68652066616D6F7573-
   169 0000001B 204E65747769646520-
   169 00000024 417373656D626C6572-
   169 0000002D 2E20               
   170 0000002F 4261636B2061742053-              db 'Back at SourceForge and in intensive development! '
   170 00000038 6F75726365466F7267-
   170 00000041 6520616E6420696E20-
   170 0000004A 696E74656E73697665-
   170 00000053 20646576656C6F706D-
   170 0000005C 656E742120         
   171 00000061 476574207468652063-              db 'Get the current versions from http://www.nasm.us/.'
   171 0000006A 757272656E74207665-
   171 00000073 7273696F6E73206672-
   171 0000007C 6F6D20687474703A2F-
   171 00000085 2F7777772E6E61736D-
   171 0000008E 2E75732F2E         
   172 00000093 0D0A0D0A                         db 0x0d,0x0a,0x0d,0x0a
   173 00000097 20204578616D706C65-              db '  Example code for calculate 1+2+...+1000:',0x0d,0x0a,0x0d,0x0a
   173 000000A0 20636F646520666F72-
   173 000000A9 2063616C63756C6174-
   173 000000B2 6520312B322B2E2E2E-
   173 000000BB 2B313030303A0D0A0D-
   173 000000C4 0A                 
   174 000000C5 2020202020786F7220-              db '     xor dx,dx',0x0d,0x0a
   174 000000CE 64782C64780D0A     
   175 000000D5 2020202020786F7220-              db '     xor ax,ax',0x0d,0x0a
   175 000000DE 61782C61780D0A     
   176 000000E5 2020202020786F7220-              db '     xor cx,cx',0x0d,0x0a
   176 000000EE 63782C63780D0A     
   177 000000F5 202040403A0D0A                   db '  @@:',0x0d,0x0a
   178 000000FC 2020202020696E6320-              db '     inc cx',0x0d,0x0a
   178 00000105 63780D0A           
   179 00000109 202020202061646420-              db '     add ax,cx',0x0d,0x0a
   179 00000112 61782C63780D0A     
   180 00000119 202020202061646320-              db '     adc dx,0',0x0d,0x0a
   180 00000122 64782C300D0A       
   181 00000128 2020202020696E6320-              db '     inc cx',0x0d,0x0a
   181 00000131 63780D0A           
   182 00000135 2020202020636D7020-              db '     cmp cx,1000',0x0d,0x0a
   182 0000013E 63782C313030300D0A 
   183 00000147 20202020206A6C6520-              db '     jle @@',0x0d,0x0a
   183 00000150 40400D0A           
   184 00000154 20202020202E2E2E20-              db '     ... ...(Some other codes)',0x0d,0x0a,0x0d,0x0a
   184 0000015D 2E2E2E28536F6D6520-
   184 00000166 6F7468657220636F64-
   184 0000016F 6573290D0A0D0A     
   185 00000176 00                               db 0
   186                                  
   187                                  ;=================================================================================
   188                                  SECTION data_2 align=16 vstart=0
   189 00000000 20205468652061626F-         msg1 db '  The above contents is written by LeeChung. '
   189 00000009 766520636F6E74656E-
   189 00000012 747320697320777269-
   189 0000001B 7474656E206279204C-
   189 00000024 65654368756E672E20 
   190 0000002D 323031312D30352D30-              db '2011-05-06'
   190 00000036 36                 
   191 00000037 00                               db 0
   192                                  
   193                                  ;=================================================================================
   194                                  SECTION stack align=16 vstart=0
   195 00000000 <res 100h>                      resb 256
   195          ******************       warning: uninitialized space declared in stack section: zeroing [-w+zeroing]
   196                                  stack_end:
   197                                  
   198                                  ;=================================================================================
   199                                  SECTION trail align=16
   200                                  program_end:
